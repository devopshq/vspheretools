##################################################
# file: VimService_client.py
#
# client stubs generated by "pysphere.ZSI.generate.wsdl2python.WriteServiceModule"
#
#
##################################################

from VimService_services_types import *
import urlparse, types
from pysphere.ZSI.TCcompound import ComplexType, Struct
from pysphere.ZSI import client
from pysphere.ZSI.schema import GED, GTD
import pysphere.ZSI
#alias
ZSI = pysphere.ZSI
from pysphere.ZSI.generate.pyclass import pyclass_type

# Locator
class VimServiceLocator:
    VimPortType_address = "https://localhost/sdk/vimService"
    def getVimPortTypeAddress(self):
        return VimServiceLocator.VimPortType_address
    def getVimPortType(self, url=None, **kw):
        return VimBindingSOAP(url or VimServiceLocator.VimPortType_address, **kw)


# Methods
class VimBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: DestroyPropertyFilter
    def DestroyPropertyFilter(self, request, **kw):
        if isinstance(request, DestroyPropertyFilterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyPropertyFilterResponseMsg.typecode)
        return response

    # op: CreateFilter
    def CreateFilter(self, request, **kw):
        if isinstance(request, CreateFilterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateFilterResponseMsg.typecode)
        return response

    # op: RetrieveProperties
    def RetrieveProperties(self, request, **kw):
        if isinstance(request, RetrievePropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrievePropertiesResponseMsg.typecode)
        return response

    # op: CheckForUpdates
    def CheckForUpdates(self, request, **kw):
        if isinstance(request, CheckForUpdatesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckForUpdatesResponseMsg.typecode)
        return response

    # op: WaitForUpdates
    def WaitForUpdates(self, request, **kw):
        if isinstance(request, WaitForUpdatesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(WaitForUpdatesResponseMsg.typecode)
        return response

    # op: CancelWaitForUpdates
    def CancelWaitForUpdates(self, request, **kw):
        if isinstance(request, CancelWaitForUpdatesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelWaitForUpdatesResponseMsg.typecode)
        return response

    # op: WaitForUpdatesEx
    def WaitForUpdatesEx(self, request, **kw):
        if isinstance(request, WaitForUpdatesExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(WaitForUpdatesExResponseMsg.typecode)
        return response

    # op: RetrievePropertiesEx
    def RetrievePropertiesEx(self, request, **kw):
        if isinstance(request, RetrievePropertiesExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrievePropertiesExResponseMsg.typecode)
        return response

    # op: ContinueRetrievePropertiesEx
    def ContinueRetrievePropertiesEx(self, request, **kw):
        if isinstance(request, ContinueRetrievePropertiesExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ContinueRetrievePropertiesExResponseMsg.typecode)
        return response

    # op: CancelRetrievePropertiesEx
    def CancelRetrievePropertiesEx(self, request, **kw):
        if isinstance(request, CancelRetrievePropertiesExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelRetrievePropertiesExResponseMsg.typecode)
        return response

    # op: CreatePropertyCollector
    def CreatePropertyCollector(self, request, **kw):
        if isinstance(request, CreatePropertyCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreatePropertyCollectorResponseMsg.typecode)
        return response

    # op: DestroyPropertyCollector
    def DestroyPropertyCollector(self, request, **kw):
        if isinstance(request, DestroyPropertyCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyPropertyCollectorResponseMsg.typecode)
        return response

    # op: AddAuthorizationRole
    def AddAuthorizationRole(self, request, **kw):
        if isinstance(request, AddAuthorizationRoleRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddAuthorizationRoleResponseMsg.typecode)
        return response

    # op: RemoveAuthorizationRole
    def RemoveAuthorizationRole(self, request, **kw):
        if isinstance(request, RemoveAuthorizationRoleRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAuthorizationRoleResponseMsg.typecode)
        return response

    # op: UpdateAuthorizationRole
    def UpdateAuthorizationRole(self, request, **kw):
        if isinstance(request, UpdateAuthorizationRoleRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateAuthorizationRoleResponseMsg.typecode)
        return response

    # op: MergePermissions
    def MergePermissions(self, request, **kw):
        if isinstance(request, MergePermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MergePermissionsResponseMsg.typecode)
        return response

    # op: RetrieveRolePermissions
    def RetrieveRolePermissions(self, request, **kw):
        if isinstance(request, RetrieveRolePermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveRolePermissionsResponseMsg.typecode)
        return response

    # op: RetrieveEntityPermissions
    def RetrieveEntityPermissions(self, request, **kw):
        if isinstance(request, RetrieveEntityPermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveEntityPermissionsResponseMsg.typecode)
        return response

    # op: RetrieveAllPermissions
    def RetrieveAllPermissions(self, request, **kw):
        if isinstance(request, RetrieveAllPermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveAllPermissionsResponseMsg.typecode)
        return response

    # op: SetEntityPermissions
    def SetEntityPermissions(self, request, **kw):
        if isinstance(request, SetEntityPermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetEntityPermissionsResponseMsg.typecode)
        return response

    # op: ResetEntityPermissions
    def ResetEntityPermissions(self, request, **kw):
        if isinstance(request, ResetEntityPermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetEntityPermissionsResponseMsg.typecode)
        return response

    # op: RemoveEntityPermission
    def RemoveEntityPermission(self, request, **kw):
        if isinstance(request, RemoveEntityPermissionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveEntityPermissionResponseMsg.typecode)
        return response

    # op: HasPrivilegeOnEntity
    def HasPrivilegeOnEntity(self, request, **kw):
        if isinstance(request, HasPrivilegeOnEntityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(HasPrivilegeOnEntityResponseMsg.typecode)
        return response

    # op: ReconfigureCluster_Task
    def ReconfigureCluster_Task(self, request, **kw):
        if isinstance(request, ReconfigureCluster_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureCluster_TaskResponseMsg.typecode)
        return response

    # op: ApplyRecommendation
    def ApplyRecommendation(self, request, **kw):
        if isinstance(request, ApplyRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyRecommendationResponseMsg.typecode)
        return response

    # op: CancelRecommendation
    def CancelRecommendation(self, request, **kw):
        if isinstance(request, CancelRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelRecommendationResponseMsg.typecode)
        return response

    # op: RecommendHostsForVm
    def RecommendHostsForVm(self, request, **kw):
        if isinstance(request, RecommendHostsForVmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RecommendHostsForVmResponseMsg.typecode)
        return response

    # op: AddHost_Task
    def AddHost_Task(self, request, **kw):
        if isinstance(request, AddHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddHost_TaskResponseMsg.typecode)
        return response

    # op: MoveInto_Task
    def MoveInto_Task(self, request, **kw):
        if isinstance(request, MoveInto_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveInto_TaskResponseMsg.typecode)
        return response

    # op: MoveHostInto_Task
    def MoveHostInto_Task(self, request, **kw):
        if isinstance(request, MoveHostInto_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveHostInto_TaskResponseMsg.typecode)
        return response

    # op: RefreshRecommendation
    def RefreshRecommendation(self, request, **kw):
        if isinstance(request, RefreshRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshRecommendationResponseMsg.typecode)
        return response

    # op: RetrieveDasAdvancedRuntimeInfo
    def RetrieveDasAdvancedRuntimeInfo(self, request, **kw):
        if isinstance(request, RetrieveDasAdvancedRuntimeInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveDasAdvancedRuntimeInfoResponseMsg.typecode)
        return response

    # op: ClusterEnterMaintenanceMode
    def ClusterEnterMaintenanceMode(self, request, **kw):
        if isinstance(request, ClusterEnterMaintenanceModeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ClusterEnterMaintenanceModeResponseMsg.typecode)
        return response

    # op: ReconfigureComputeResource_Task
    def ReconfigureComputeResource_Task(self, request, **kw):
        if isinstance(request, ReconfigureComputeResource_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureComputeResource_TaskResponseMsg.typecode)
        return response

    # op: AddCustomFieldDef
    def AddCustomFieldDef(self, request, **kw):
        if isinstance(request, AddCustomFieldDefRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddCustomFieldDefResponseMsg.typecode)
        return response

    # op: RemoveCustomFieldDef
    def RemoveCustomFieldDef(self, request, **kw):
        if isinstance(request, RemoveCustomFieldDefRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveCustomFieldDefResponseMsg.typecode)
        return response

    # op: RenameCustomFieldDef
    def RenameCustomFieldDef(self, request, **kw):
        if isinstance(request, RenameCustomFieldDefRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameCustomFieldDefResponseMsg.typecode)
        return response

    # op: SetField
    def SetField(self, request, **kw):
        if isinstance(request, SetFieldRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetFieldResponseMsg.typecode)
        return response

    # op: DoesCustomizationSpecExist
    def DoesCustomizationSpecExist(self, request, **kw):
        if isinstance(request, DoesCustomizationSpecExistRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DoesCustomizationSpecExistResponseMsg.typecode)
        return response

    # op: GetCustomizationSpec
    def GetCustomizationSpec(self, request, **kw):
        if isinstance(request, GetCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(GetCustomizationSpecResponseMsg.typecode)
        return response

    # op: CreateCustomizationSpec
    def CreateCustomizationSpec(self, request, **kw):
        if isinstance(request, CreateCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCustomizationSpecResponseMsg.typecode)
        return response

    # op: OverwriteCustomizationSpec
    def OverwriteCustomizationSpec(self, request, **kw):
        if isinstance(request, OverwriteCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(OverwriteCustomizationSpecResponseMsg.typecode)
        return response

    # op: DeleteCustomizationSpec
    def DeleteCustomizationSpec(self, request, **kw):
        if isinstance(request, DeleteCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteCustomizationSpecResponseMsg.typecode)
        return response

    # op: DuplicateCustomizationSpec
    def DuplicateCustomizationSpec(self, request, **kw):
        if isinstance(request, DuplicateCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DuplicateCustomizationSpecResponseMsg.typecode)
        return response

    # op: RenameCustomizationSpec
    def RenameCustomizationSpec(self, request, **kw):
        if isinstance(request, RenameCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameCustomizationSpecResponseMsg.typecode)
        return response

    # op: CustomizationSpecItemToXml
    def CustomizationSpecItemToXml(self, request, **kw):
        if isinstance(request, CustomizationSpecItemToXmlRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CustomizationSpecItemToXmlResponseMsg.typecode)
        return response

    # op: XmlToCustomizationSpecItem
    def XmlToCustomizationSpecItem(self, request, **kw):
        if isinstance(request, XmlToCustomizationSpecItemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(XmlToCustomizationSpecItemResponseMsg.typecode)
        return response

    # op: CheckCustomizationResources
    def CheckCustomizationResources(self, request, **kw):
        if isinstance(request, CheckCustomizationResourcesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCustomizationResourcesResponseMsg.typecode)
        return response

    # op: QueryConnectionInfo
    def QueryConnectionInfo(self, request, **kw):
        if isinstance(request, QueryConnectionInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConnectionInfoResponseMsg.typecode)
        return response

    # op: PowerOnMultiVM_Task
    def PowerOnMultiVM_Task(self, request, **kw):
        if isinstance(request, PowerOnMultiVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnMultiVM_TaskResponseMsg.typecode)
        return response

    # op: queryDatacenterConfigOptionDescriptor
    def queryDatacenterConfigOptionDescriptor(self, request, **kw):
        if isinstance(request, queryDatacenterConfigOptionDescriptorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(queryDatacenterConfigOptionDescriptorResponseMsg.typecode)
        return response

    # op: ReconfigureDatacenter_Task
    def ReconfigureDatacenter_Task(self, request, **kw):
        if isinstance(request, ReconfigureDatacenter_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureDatacenter_TaskResponseMsg.typecode)
        return response

    # op: RefreshDatastore
    def RefreshDatastore(self, request, **kw):
        if isinstance(request, RefreshDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDatastoreResponseMsg.typecode)
        return response

    # op: RefreshDatastoreStorageInfo
    def RefreshDatastoreStorageInfo(self, request, **kw):
        if isinstance(request, RefreshDatastoreStorageInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDatastoreStorageInfoResponseMsg.typecode)
        return response

    # op: UpdateVirtualMachineFiles_Task
    def UpdateVirtualMachineFiles_Task(self, request, **kw):
        if isinstance(request, UpdateVirtualMachineFiles_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVirtualMachineFiles_TaskResponseMsg.typecode)
        return response

    # op: RenameDatastore
    def RenameDatastore(self, request, **kw):
        if isinstance(request, RenameDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameDatastoreResponseMsg.typecode)
        return response

    # op: DestroyDatastore
    def DestroyDatastore(self, request, **kw):
        if isinstance(request, DestroyDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyDatastoreResponseMsg.typecode)
        return response

    # op: DatastoreEnterMaintenanceMode
    def DatastoreEnterMaintenanceMode(self, request, **kw):
        if isinstance(request, DatastoreEnterMaintenanceModeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DatastoreEnterMaintenanceModeResponseMsg.typecode)
        return response

    # op: DatastoreExitMaintenanceMode_Task
    def DatastoreExitMaintenanceMode_Task(self, request, **kw):
        if isinstance(request, DatastoreExitMaintenanceMode_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DatastoreExitMaintenanceMode_TaskResponseMsg.typecode)
        return response

    # op: QueryDescriptions
    def QueryDescriptions(self, request, **kw):
        if isinstance(request, QueryDescriptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDescriptionsResponseMsg.typecode)
        return response

    # op: BrowseDiagnosticLog
    def BrowseDiagnosticLog(self, request, **kw):
        if isinstance(request, BrowseDiagnosticLogRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(BrowseDiagnosticLogResponseMsg.typecode)
        return response

    # op: GenerateLogBundles_Task
    def GenerateLogBundles_Task(self, request, **kw):
        if isinstance(request, GenerateLogBundles_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(GenerateLogBundles_TaskResponseMsg.typecode)
        return response

    # op: FetchDVPortKeys
    def FetchDVPortKeys(self, request, **kw):
        if isinstance(request, FetchDVPortKeysRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FetchDVPortKeysResponseMsg.typecode)
        return response

    # op: FetchDVPorts
    def FetchDVPorts(self, request, **kw):
        if isinstance(request, FetchDVPortsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FetchDVPortsResponseMsg.typecode)
        return response

    # op: QueryUsedVlanIdInDvs
    def QueryUsedVlanIdInDvs(self, request, **kw):
        if isinstance(request, QueryUsedVlanIdInDvsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryUsedVlanIdInDvsResponseMsg.typecode)
        return response

    # op: ReconfigureDvs_Task
    def ReconfigureDvs_Task(self, request, **kw):
        if isinstance(request, ReconfigureDvs_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureDvs_TaskResponseMsg.typecode)
        return response

    # op: PerformDvsProductSpecOperation_Task
    def PerformDvsProductSpecOperation_Task(self, request, **kw):
        if isinstance(request, PerformDvsProductSpecOperation_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PerformDvsProductSpecOperation_TaskResponseMsg.typecode)
        return response

    # op: MergeDvs_Task
    def MergeDvs_Task(self, request, **kw):
        if isinstance(request, MergeDvs_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MergeDvs_TaskResponseMsg.typecode)
        return response

    # op: AddDVPortgroup_Task
    def AddDVPortgroup_Task(self, request, **kw):
        if isinstance(request, AddDVPortgroup_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddDVPortgroup_TaskResponseMsg.typecode)
        return response

    # op: MoveDVPort_Task
    def MoveDVPort_Task(self, request, **kw):
        if isinstance(request, MoveDVPort_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveDVPort_TaskResponseMsg.typecode)
        return response

    # op: UpdateDvsCapability
    def UpdateDvsCapability(self, request, **kw):
        if isinstance(request, UpdateDvsCapabilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDvsCapabilityResponseMsg.typecode)
        return response

    # op: ReconfigureDVPort_Task
    def ReconfigureDVPort_Task(self, request, **kw):
        if isinstance(request, ReconfigureDVPort_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureDVPort_TaskResponseMsg.typecode)
        return response

    # op: RefreshDVPortState
    def RefreshDVPortState(self, request, **kw):
        if isinstance(request, RefreshDVPortStateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDVPortStateResponseMsg.typecode)
        return response

    # op: RectifyDvsHost_Task
    def RectifyDvsHost_Task(self, request, **kw):
        if isinstance(request, RectifyDvsHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RectifyDvsHost_TaskResponseMsg.typecode)
        return response

    # op: UpdateNetworkResourcePool
    def UpdateNetworkResourcePool(self, request, **kw):
        if isinstance(request, UpdateNetworkResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateNetworkResourcePoolResponseMsg.typecode)
        return response

    # op: AddNetworkResourcePool
    def AddNetworkResourcePool(self, request, **kw):
        if isinstance(request, AddNetworkResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddNetworkResourcePoolResponseMsg.typecode)
        return response

    # op: RemoveNetworkResourcePool
    def RemoveNetworkResourcePool(self, request, **kw):
        if isinstance(request, RemoveNetworkResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveNetworkResourcePoolResponseMsg.typecode)
        return response

    # op: EnableNetworkResourceManagement
    def EnableNetworkResourceManagement(self, request, **kw):
        if isinstance(request, EnableNetworkResourceManagementRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableNetworkResourceManagementResponseMsg.typecode)
        return response

    # op: DVSRollback_Task
    def DVSRollback_Task(self, request, **kw):
        if isinstance(request, DVSRollback_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DVSRollback_TaskResponseMsg.typecode)
        return response

    # op: CreateDVPortgroup_Task
    def CreateDVPortgroup_Task(self, request, **kw):
        if isinstance(request, CreateDVPortgroup_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDVPortgroup_TaskResponseMsg.typecode)
        return response

    # op: UpdateDVSHealthCheckConfig_Task
    def UpdateDVSHealthCheckConfig_Task(self, request, **kw):
        if isinstance(request, UpdateDVSHealthCheckConfig_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDVSHealthCheckConfig_TaskResponseMsg.typecode)
        return response

    # op: LookupDvPortGroup
    def LookupDvPortGroup(self, request, **kw):
        if isinstance(request, LookupDvPortGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LookupDvPortGroupResponseMsg.typecode)
        return response

    # op: QueryConfigOptionDescriptor
    def QueryConfigOptionDescriptor(self, request, **kw):
        if isinstance(request, QueryConfigOptionDescriptorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigOptionDescriptorResponseMsg.typecode)
        return response

    # op: QueryConfigOption
    def QueryConfigOption(self, request, **kw):
        if isinstance(request, QueryConfigOptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigOptionResponseMsg.typecode)
        return response

    # op: QueryConfigTarget
    def QueryConfigTarget(self, request, **kw):
        if isinstance(request, QueryConfigTargetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigTargetResponseMsg.typecode)
        return response

    # op: QueryTargetCapabilities
    def QueryTargetCapabilities(self, request, **kw):
        if isinstance(request, QueryTargetCapabilitiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryTargetCapabilitiesResponseMsg.typecode)
        return response

    # op: setCustomValue
    def setCustomValue(self, request, **kw):
        if isinstance(request, setCustomValueRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(setCustomValueResponseMsg.typecode)
        return response

    # op: UnregisterExtension
    def UnregisterExtension(self, request, **kw):
        if isinstance(request, UnregisterExtensionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterExtensionResponseMsg.typecode)
        return response

    # op: FindExtension
    def FindExtension(self, request, **kw):
        if isinstance(request, FindExtensionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindExtensionResponseMsg.typecode)
        return response

    # op: RegisterExtension
    def RegisterExtension(self, request, **kw):
        if isinstance(request, RegisterExtensionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterExtensionResponseMsg.typecode)
        return response

    # op: UpdateExtension
    def UpdateExtension(self, request, **kw):
        if isinstance(request, UpdateExtensionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateExtensionResponseMsg.typecode)
        return response

    # op: GetPublicKey
    def GetPublicKey(self, request, **kw):
        if isinstance(request, GetPublicKeyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(GetPublicKeyResponseMsg.typecode)
        return response

    # op: SetPublicKey
    def SetPublicKey(self, request, **kw):
        if isinstance(request, SetPublicKeyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetPublicKeyResponseMsg.typecode)
        return response

    # op: SetExtensionCertificate
    def SetExtensionCertificate(self, request, **kw):
        if isinstance(request, SetExtensionCertificateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetExtensionCertificateResponseMsg.typecode)
        return response

    # op: QueryManagedBy
    def QueryManagedBy(self, request, **kw):
        if isinstance(request, QueryManagedByRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryManagedByResponseMsg.typecode)
        return response

    # op: QueryExtensionIpAllocationUsage
    def QueryExtensionIpAllocationUsage(self, request, **kw):
        if isinstance(request, QueryExtensionIpAllocationUsageRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryExtensionIpAllocationUsageResponseMsg.typecode)
        return response

    # op: MoveDatastoreFile_Task
    def MoveDatastoreFile_Task(self, request, **kw):
        if isinstance(request, MoveDatastoreFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: CopyDatastoreFile_Task
    def CopyDatastoreFile_Task(self, request, **kw):
        if isinstance(request, CopyDatastoreFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CopyDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: DeleteDatastoreFile_Task
    def DeleteDatastoreFile_Task(self, request, **kw):
        if isinstance(request, DeleteDatastoreFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: MakeDirectory
    def MakeDirectory(self, request, **kw):
        if isinstance(request, MakeDirectoryRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MakeDirectoryResponseMsg.typecode)
        return response

    # op: ChangeOwner
    def ChangeOwner(self, request, **kw):
        if isinstance(request, ChangeOwnerRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ChangeOwnerResponseMsg.typecode)
        return response

    # op: CreateFolder
    def CreateFolder(self, request, **kw):
        if isinstance(request, CreateFolderRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateFolderResponseMsg.typecode)
        return response

    # op: MoveIntoFolder_Task
    def MoveIntoFolder_Task(self, request, **kw):
        if isinstance(request, MoveIntoFolder_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveIntoFolder_TaskResponseMsg.typecode)
        return response

    # op: CreateVM_Task
    def CreateVM_Task(self, request, **kw):
        if isinstance(request, CreateVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVM_TaskResponseMsg.typecode)
        return response

    # op: RegisterVM_Task
    def RegisterVM_Task(self, request, **kw):
        if isinstance(request, RegisterVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterVM_TaskResponseMsg.typecode)
        return response

    # op: CreateCluster
    def CreateCluster(self, request, **kw):
        if isinstance(request, CreateClusterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateClusterResponseMsg.typecode)
        return response

    # op: CreateClusterEx
    def CreateClusterEx(self, request, **kw):
        if isinstance(request, CreateClusterExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateClusterExResponseMsg.typecode)
        return response

    # op: AddStandaloneHost_Task
    def AddStandaloneHost_Task(self, request, **kw):
        if isinstance(request, AddStandaloneHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddStandaloneHost_TaskResponseMsg.typecode)
        return response

    # op: CreateDatacenter
    def CreateDatacenter(self, request, **kw):
        if isinstance(request, CreateDatacenterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDatacenterResponseMsg.typecode)
        return response

    # op: UnregisterAndDestroy_Task
    def UnregisterAndDestroy_Task(self, request, **kw):
        if isinstance(request, UnregisterAndDestroy_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterAndDestroy_TaskResponseMsg.typecode)
        return response

    # op: CreateDVS_Task
    def CreateDVS_Task(self, request, **kw):
        if isinstance(request, CreateDVS_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDVS_TaskResponseMsg.typecode)
        return response

    # op: CreateStoragePod
    def CreateStoragePod(self, request, **kw):
        if isinstance(request, CreateStoragePodRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateStoragePodResponseMsg.typecode)
        return response

    # op: SetCollectorPageSize
    def SetCollectorPageSize(self, request, **kw):
        if isinstance(request, SetCollectorPageSizeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetCollectorPageSizeResponseMsg.typecode)
        return response

    # op: RewindCollector
    def RewindCollector(self, request, **kw):
        if isinstance(request, RewindCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RewindCollectorResponseMsg.typecode)
        return response

    # op: ResetCollector
    def ResetCollector(self, request, **kw):
        if isinstance(request, ResetCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetCollectorResponseMsg.typecode)
        return response

    # op: DestroyCollector
    def DestroyCollector(self, request, **kw):
        if isinstance(request, DestroyCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyCollectorResponseMsg.typecode)
        return response

    # op: QueryTpmAttestationReport
    def QueryTpmAttestationReport(self, request, **kw):
        if isinstance(request, QueryTpmAttestationReportRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryTpmAttestationReportResponseMsg.typecode)
        return response

    # op: QueryHostConnectionInfo
    def QueryHostConnectionInfo(self, request, **kw):
        if isinstance(request, QueryHostConnectionInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryHostConnectionInfoResponseMsg.typecode)
        return response

    # op: UpdateSystemResources
    def UpdateSystemResources(self, request, **kw):
        if isinstance(request, UpdateSystemResourcesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateSystemResourcesResponseMsg.typecode)
        return response

    # op: UpdateSystemSwapConfiguration
    def UpdateSystemSwapConfiguration(self, request, **kw):
        if isinstance(request, UpdateSystemSwapConfigurationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateSystemSwapConfigurationResponseMsg.typecode)
        return response

    # op: ReconnectHost_Task
    def ReconnectHost_Task(self, request, **kw):
        if isinstance(request, ReconnectHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconnectHost_TaskResponseMsg.typecode)
        return response

    # op: DisconnectHost_Task
    def DisconnectHost_Task(self, request, **kw):
        if isinstance(request, DisconnectHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DisconnectHost_TaskResponseMsg.typecode)
        return response

    # op: EnterMaintenanceMode_Task
    def EnterMaintenanceMode_Task(self, request, **kw):
        if isinstance(request, EnterMaintenanceMode_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnterMaintenanceMode_TaskResponseMsg.typecode)
        return response

    # op: ExitMaintenanceMode_Task
    def ExitMaintenanceMode_Task(self, request, **kw):
        if isinstance(request, ExitMaintenanceMode_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExitMaintenanceMode_TaskResponseMsg.typecode)
        return response

    # op: RebootHost_Task
    def RebootHost_Task(self, request, **kw):
        if isinstance(request, RebootHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RebootHost_TaskResponseMsg.typecode)
        return response

    # op: ShutdownHost_Task
    def ShutdownHost_Task(self, request, **kw):
        if isinstance(request, ShutdownHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ShutdownHost_TaskResponseMsg.typecode)
        return response

    # op: PowerDownHostToStandBy_Task
    def PowerDownHostToStandBy_Task(self, request, **kw):
        if isinstance(request, PowerDownHostToStandBy_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerDownHostToStandBy_TaskResponseMsg.typecode)
        return response

    # op: PowerUpHostFromStandBy_Task
    def PowerUpHostFromStandBy_Task(self, request, **kw):
        if isinstance(request, PowerUpHostFromStandBy_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerUpHostFromStandBy_TaskResponseMsg.typecode)
        return response

    # op: QueryMemoryOverhead
    def QueryMemoryOverhead(self, request, **kw):
        if isinstance(request, QueryMemoryOverheadRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryMemoryOverheadResponseMsg.typecode)
        return response

    # op: QueryMemoryOverheadEx
    def QueryMemoryOverheadEx(self, request, **kw):
        if isinstance(request, QueryMemoryOverheadExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryMemoryOverheadExResponseMsg.typecode)
        return response

    # op: ReconfigureHostForDAS_Task
    def ReconfigureHostForDAS_Task(self, request, **kw):
        if isinstance(request, ReconfigureHostForDAS_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureHostForDAS_TaskResponseMsg.typecode)
        return response

    # op: UpdateFlags
    def UpdateFlags(self, request, **kw):
        if isinstance(request, UpdateFlagsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateFlagsResponseMsg.typecode)
        return response

    # op: EnterLockdownMode
    def EnterLockdownMode(self, request, **kw):
        if isinstance(request, EnterLockdownModeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnterLockdownModeResponseMsg.typecode)
        return response

    # op: ExitLockdownMode
    def ExitLockdownMode(self, request, **kw):
        if isinstance(request, ExitLockdownModeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExitLockdownModeResponseMsg.typecode)
        return response

    # op: AcquireCimServicesTicket
    def AcquireCimServicesTicket(self, request, **kw):
        if isinstance(request, AcquireCimServicesTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireCimServicesTicketResponseMsg.typecode)
        return response

    # op: UpdateIpmi
    def UpdateIpmi(self, request, **kw):
        if isinstance(request, UpdateIpmiRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpmiResponseMsg.typecode)
        return response

    # op: RetrieveHardwareUptime
    def RetrieveHardwareUptime(self, request, **kw):
        if isinstance(request, RetrieveHardwareUptimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveHardwareUptimeResponseMsg.typecode)
        return response

    # op: HttpNfcLeaseGetManifest
    def HttpNfcLeaseGetManifest(self, request, **kw):
        if isinstance(request, HttpNfcLeaseGetManifestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(HttpNfcLeaseGetManifestResponseMsg.typecode)
        return response

    # op: HttpNfcLeaseComplete
    def HttpNfcLeaseComplete(self, request, **kw):
        if isinstance(request, HttpNfcLeaseCompleteRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(HttpNfcLeaseCompleteResponseMsg.typecode)
        return response

    # op: HttpNfcLeaseAbort
    def HttpNfcLeaseAbort(self, request, **kw):
        if isinstance(request, HttpNfcLeaseAbortRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(HttpNfcLeaseAbortResponseMsg.typecode)
        return response

    # op: HttpNfcLeaseProgress
    def HttpNfcLeaseProgress(self, request, **kw):
        if isinstance(request, HttpNfcLeaseProgressRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(HttpNfcLeaseProgressResponseMsg.typecode)
        return response

    # op: QueryIpPools
    def QueryIpPools(self, request, **kw):
        if isinstance(request, QueryIpPoolsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryIpPoolsResponseMsg.typecode)
        return response

    # op: CreateIpPool
    def CreateIpPool(self, request, **kw):
        if isinstance(request, CreateIpPoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateIpPoolResponseMsg.typecode)
        return response

    # op: UpdateIpPool
    def UpdateIpPool(self, request, **kw):
        if isinstance(request, UpdateIpPoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpPoolResponseMsg.typecode)
        return response

    # op: DestroyIpPool
    def DestroyIpPool(self, request, **kw):
        if isinstance(request, DestroyIpPoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyIpPoolResponseMsg.typecode)
        return response

    # op: AllocateIpv4Address
    def AllocateIpv4Address(self, request, **kw):
        if isinstance(request, AllocateIpv4AddressRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AllocateIpv4AddressResponseMsg.typecode)
        return response

    # op: AllocateIpv6Address
    def AllocateIpv6Address(self, request, **kw):
        if isinstance(request, AllocateIpv6AddressRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AllocateIpv6AddressResponseMsg.typecode)
        return response

    # op: ReleaseIpAllocation
    def ReleaseIpAllocation(self, request, **kw):
        if isinstance(request, ReleaseIpAllocationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReleaseIpAllocationResponseMsg.typecode)
        return response

    # op: QueryIPAllocations
    def QueryIPAllocations(self, request, **kw):
        if isinstance(request, QueryIPAllocationsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryIPAllocationsResponseMsg.typecode)
        return response

    # op: UpdateAssignedLicense
    def UpdateAssignedLicense(self, request, **kw):
        if isinstance(request, UpdateAssignedLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateAssignedLicenseResponseMsg.typecode)
        return response

    # op: RemoveAssignedLicense
    def RemoveAssignedLicense(self, request, **kw):
        if isinstance(request, RemoveAssignedLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAssignedLicenseResponseMsg.typecode)
        return response

    # op: QueryAssignedLicenses
    def QueryAssignedLicenses(self, request, **kw):
        if isinstance(request, QueryAssignedLicensesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAssignedLicensesResponseMsg.typecode)
        return response

    # op: QuerySupportedFeatures
    def QuerySupportedFeatures(self, request, **kw):
        if isinstance(request, QuerySupportedFeaturesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QuerySupportedFeaturesResponseMsg.typecode)
        return response

    # op: QueryLicenseSourceAvailability
    def QueryLicenseSourceAvailability(self, request, **kw):
        if isinstance(request, QueryLicenseSourceAvailabilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryLicenseSourceAvailabilityResponseMsg.typecode)
        return response

    # op: QueryLicenseUsage
    def QueryLicenseUsage(self, request, **kw):
        if isinstance(request, QueryLicenseUsageRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryLicenseUsageResponseMsg.typecode)
        return response

    # op: SetLicenseEdition
    def SetLicenseEdition(self, request, **kw):
        if isinstance(request, SetLicenseEditionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetLicenseEditionResponseMsg.typecode)
        return response

    # op: CheckLicenseFeature
    def CheckLicenseFeature(self, request, **kw):
        if isinstance(request, CheckLicenseFeatureRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckLicenseFeatureResponseMsg.typecode)
        return response

    # op: EnableFeature
    def EnableFeature(self, request, **kw):
        if isinstance(request, EnableFeatureRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableFeatureResponseMsg.typecode)
        return response

    # op: DisableFeature
    def DisableFeature(self, request, **kw):
        if isinstance(request, DisableFeatureRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableFeatureResponseMsg.typecode)
        return response

    # op: ConfigureLicenseSource
    def ConfigureLicenseSource(self, request, **kw):
        if isinstance(request, ConfigureLicenseSourceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureLicenseSourceResponseMsg.typecode)
        return response

    # op: UpdateLicense
    def UpdateLicense(self, request, **kw):
        if isinstance(request, UpdateLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLicenseResponseMsg.typecode)
        return response

    # op: AddLicense
    def AddLicense(self, request, **kw):
        if isinstance(request, AddLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddLicenseResponseMsg.typecode)
        return response

    # op: RemoveLicense
    def RemoveLicense(self, request, **kw):
        if isinstance(request, RemoveLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveLicenseResponseMsg.typecode)
        return response

    # op: DecodeLicense
    def DecodeLicense(self, request, **kw):
        if isinstance(request, DecodeLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DecodeLicenseResponseMsg.typecode)
        return response

    # op: UpdateLicenseLabel
    def UpdateLicenseLabel(self, request, **kw):
        if isinstance(request, UpdateLicenseLabelRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLicenseLabelResponseMsg.typecode)
        return response

    # op: RemoveLicenseLabel
    def RemoveLicenseLabel(self, request, **kw):
        if isinstance(request, RemoveLicenseLabelRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveLicenseLabelResponseMsg.typecode)
        return response

    # op: Reload
    def Reload(self, request, **kw):
        if isinstance(request, ReloadRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReloadResponseMsg.typecode)
        return response

    # op: Rename_Task
    def Rename_Task(self, request, **kw):
        if isinstance(request, Rename_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(Rename_TaskResponseMsg.typecode)
        return response

    # op: Destroy_Task
    def Destroy_Task(self, request, **kw):
        if isinstance(request, Destroy_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(Destroy_TaskResponseMsg.typecode)
        return response

    # op: DestroyNetwork
    def DestroyNetwork(self, request, **kw):
        if isinstance(request, DestroyNetworkRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyNetworkResponseMsg.typecode)
        return response

    # op: ValidateHost
    def ValidateHost(self, request, **kw):
        if isinstance(request, ValidateHostRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateHostResponseMsg.typecode)
        return response

    # op: ParseDescriptor
    def ParseDescriptor(self, request, **kw):
        if isinstance(request, ParseDescriptorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ParseDescriptorResponseMsg.typecode)
        return response

    # op: CreateImportSpec
    def CreateImportSpec(self, request, **kw):
        if isinstance(request, CreateImportSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateImportSpecResponseMsg.typecode)
        return response

    # op: CreateDescriptor
    def CreateDescriptor(self, request, **kw):
        if isinstance(request, CreateDescriptorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDescriptorResponseMsg.typecode)
        return response

    # op: QueryPerfProviderSummary
    def QueryPerfProviderSummary(self, request, **kw):
        if isinstance(request, QueryPerfProviderSummaryRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfProviderSummaryResponseMsg.typecode)
        return response

    # op: QueryAvailablePerfMetric
    def QueryAvailablePerfMetric(self, request, **kw):
        if isinstance(request, QueryAvailablePerfMetricRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailablePerfMetricResponseMsg.typecode)
        return response

    # op: QueryPerfCounter
    def QueryPerfCounter(self, request, **kw):
        if isinstance(request, QueryPerfCounterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCounterResponseMsg.typecode)
        return response

    # op: QueryPerfCounterByLevel
    def QueryPerfCounterByLevel(self, request, **kw):
        if isinstance(request, QueryPerfCounterByLevelRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCounterByLevelResponseMsg.typecode)
        return response

    # op: QueryPerf
    def QueryPerf(self, request, **kw):
        if isinstance(request, QueryPerfRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfResponseMsg.typecode)
        return response

    # op: QueryPerfComposite
    def QueryPerfComposite(self, request, **kw):
        if isinstance(request, QueryPerfCompositeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCompositeResponseMsg.typecode)
        return response

    # op: CreatePerfInterval
    def CreatePerfInterval(self, request, **kw):
        if isinstance(request, CreatePerfIntervalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreatePerfIntervalResponseMsg.typecode)
        return response

    # op: RemovePerfInterval
    def RemovePerfInterval(self, request, **kw):
        if isinstance(request, RemovePerfIntervalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemovePerfIntervalResponseMsg.typecode)
        return response

    # op: UpdatePerfInterval
    def UpdatePerfInterval(self, request, **kw):
        if isinstance(request, UpdatePerfIntervalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePerfIntervalResponseMsg.typecode)
        return response

    # op: UpdateCounterLevelMapping
    def UpdateCounterLevelMapping(self, request, **kw):
        if isinstance(request, UpdateCounterLevelMappingRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateCounterLevelMappingResponseMsg.typecode)
        return response

    # op: ResetCounterLevelMapping
    def ResetCounterLevelMapping(self, request, **kw):
        if isinstance(request, ResetCounterLevelMappingRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetCounterLevelMappingResponseMsg.typecode)
        return response

    # op: EstimateDatabaseSize
    def EstimateDatabaseSize(self, request, **kw):
        if isinstance(request, EstimateDatabaseSizeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EstimateDatabaseSizeResponseMsg.typecode)
        return response

    # op: UpdateConfig
    def UpdateConfig(self, request, **kw):
        if isinstance(request, UpdateConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateConfigResponseMsg.typecode)
        return response

    # op: MoveIntoResourcePool
    def MoveIntoResourcePool(self, request, **kw):
        if isinstance(request, MoveIntoResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveIntoResourcePoolResponseMsg.typecode)
        return response

    # op: UpdateChildResourceConfiguration
    def UpdateChildResourceConfiguration(self, request, **kw):
        if isinstance(request, UpdateChildResourceConfigurationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateChildResourceConfigurationResponseMsg.typecode)
        return response

    # op: CreateResourcePool
    def CreateResourcePool(self, request, **kw):
        if isinstance(request, CreateResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateResourcePoolResponseMsg.typecode)
        return response

    # op: DestroyChildren
    def DestroyChildren(self, request, **kw):
        if isinstance(request, DestroyChildrenRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyChildrenResponseMsg.typecode)
        return response

    # op: CreateVApp
    def CreateVApp(self, request, **kw):
        if isinstance(request, CreateVAppRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVAppResponseMsg.typecode)
        return response

    # op: CreateChildVM_Task
    def CreateChildVM_Task(self, request, **kw):
        if isinstance(request, CreateChildVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateChildVM_TaskResponseMsg.typecode)
        return response

    # op: RegisterChildVM_Task
    def RegisterChildVM_Task(self, request, **kw):
        if isinstance(request, RegisterChildVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterChildVM_TaskResponseMsg.typecode)
        return response

    # op: ImportVApp
    def ImportVApp(self, request, **kw):
        if isinstance(request, ImportVAppRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ImportVAppResponseMsg.typecode)
        return response

    # op: QueryResourceConfigOption
    def QueryResourceConfigOption(self, request, **kw):
        if isinstance(request, QueryResourceConfigOptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryResourceConfigOptionResponseMsg.typecode)
        return response

    # op: RefreshRuntime
    def RefreshRuntime(self, request, **kw):
        if isinstance(request, RefreshRuntimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshRuntimeResponseMsg.typecode)
        return response

    # op: FindByUuid
    def FindByUuid(self, request, **kw):
        if isinstance(request, FindByUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByUuidResponseMsg.typecode)
        return response

    # op: FindByDatastorePath
    def FindByDatastorePath(self, request, **kw):
        if isinstance(request, FindByDatastorePathRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByDatastorePathResponseMsg.typecode)
        return response

    # op: FindByDnsName
    def FindByDnsName(self, request, **kw):
        if isinstance(request, FindByDnsNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByDnsNameResponseMsg.typecode)
        return response

    # op: FindByIp
    def FindByIp(self, request, **kw):
        if isinstance(request, FindByIpRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByIpResponseMsg.typecode)
        return response

    # op: FindByInventoryPath
    def FindByInventoryPath(self, request, **kw):
        if isinstance(request, FindByInventoryPathRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByInventoryPathResponseMsg.typecode)
        return response

    # op: FindChild
    def FindChild(self, request, **kw):
        if isinstance(request, FindChildRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindChildResponseMsg.typecode)
        return response

    # op: FindAllByUuid
    def FindAllByUuid(self, request, **kw):
        if isinstance(request, FindAllByUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindAllByUuidResponseMsg.typecode)
        return response

    # op: FindAllByDnsName
    def FindAllByDnsName(self, request, **kw):
        if isinstance(request, FindAllByDnsNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindAllByDnsNameResponseMsg.typecode)
        return response

    # op: FindAllByIp
    def FindAllByIp(self, request, **kw):
        if isinstance(request, FindAllByIpRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindAllByIpResponseMsg.typecode)
        return response

    # op: CurrentTime
    def CurrentTime(self, request, **kw):
        if isinstance(request, CurrentTimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CurrentTimeResponseMsg.typecode)
        return response

    # op: RetrieveServiceContent
    def RetrieveServiceContent(self, request, **kw):
        if isinstance(request, RetrieveServiceContentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveServiceContentResponseMsg.typecode)
        return response

    # op: ValidateMigration
    def ValidateMigration(self, request, **kw):
        if isinstance(request, ValidateMigrationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateMigrationResponseMsg.typecode)
        return response

    # op: QueryVMotionCompatibility
    def QueryVMotionCompatibility(self, request, **kw):
        if isinstance(request, QueryVMotionCompatibilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVMotionCompatibilityResponseMsg.typecode)
        return response

    # op: RetrieveProductComponents
    def RetrieveProductComponents(self, request, **kw):
        if isinstance(request, RetrieveProductComponentsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveProductComponentsResponseMsg.typecode)
        return response

    # op: QueryServiceList
    def QueryServiceList(self, request, **kw):
        if isinstance(request, QueryServiceListRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryServiceListResponseMsg.typecode)
        return response

    # op: UpdateServiceMessage
    def UpdateServiceMessage(self, request, **kw):
        if isinstance(request, UpdateServiceMessageRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServiceMessageResponseMsg.typecode)
        return response

    # op: LoginByToken
    def LoginByToken(self, request, **kw):
        if isinstance(request, LoginByTokenRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginByTokenResponseMsg.typecode)
        return response

    # op: Login
    def Login(self, request, **kw):
        if isinstance(request, LoginRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginResponseMsg.typecode)
        return response

    # op: LoginBySSPI
    def LoginBySSPI(self, request, **kw):
        if isinstance(request, LoginBySSPIRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginBySSPIResponseMsg.typecode)
        return response

    # op: Logout
    def Logout(self, request, **kw):
        if isinstance(request, LogoutRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LogoutResponseMsg.typecode)
        return response

    # op: AcquireLocalTicket
    def AcquireLocalTicket(self, request, **kw):
        if isinstance(request, AcquireLocalTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireLocalTicketResponseMsg.typecode)
        return response

    # op: AcquireGenericServiceTicket
    def AcquireGenericServiceTicket(self, request, **kw):
        if isinstance(request, AcquireGenericServiceTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireGenericServiceTicketResponseMsg.typecode)
        return response

    # op: TerminateSession
    def TerminateSession(self, request, **kw):
        if isinstance(request, TerminateSessionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(TerminateSessionResponseMsg.typecode)
        return response

    # op: SetLocale
    def SetLocale(self, request, **kw):
        if isinstance(request, SetLocaleRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetLocaleResponseMsg.typecode)
        return response

    # op: LoginExtensionBySubjectName
    def LoginExtensionBySubjectName(self, request, **kw):
        if isinstance(request, LoginExtensionBySubjectNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginExtensionBySubjectNameResponseMsg.typecode)
        return response

    # op: LoginExtensionByCertificate
    def LoginExtensionByCertificate(self, request, **kw):
        if isinstance(request, LoginExtensionByCertificateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginExtensionByCertificateResponseMsg.typecode)
        return response

    # op: ImpersonateUser
    def ImpersonateUser(self, request, **kw):
        if isinstance(request, ImpersonateUserRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ImpersonateUserResponseMsg.typecode)
        return response

    # op: SessionIsActive
    def SessionIsActive(self, request, **kw):
        if isinstance(request, SessionIsActiveRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SessionIsActiveResponseMsg.typecode)
        return response

    # op: AcquireCloneTicket
    def AcquireCloneTicket(self, request, **kw):
        if isinstance(request, AcquireCloneTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireCloneTicketResponseMsg.typecode)
        return response

    # op: CloneSession
    def CloneSession(self, request, **kw):
        if isinstance(request, CloneSessionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CloneSessionResponseMsg.typecode)
        return response

    # op: ExecuteSimpleCommand
    def ExecuteSimpleCommand(self, request, **kw):
        if isinstance(request, ExecuteSimpleCommandRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExecuteSimpleCommandResponseMsg.typecode)
        return response

    # op: ConfigureDatastoreIORM_Task
    def ConfigureDatastoreIORM_Task(self, request, **kw):
        if isinstance(request, ConfigureDatastoreIORM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureDatastoreIORM_TaskResponseMsg.typecode)
        return response

    # op: QueryIORMConfigOption
    def QueryIORMConfigOption(self, request, **kw):
        if isinstance(request, QueryIORMConfigOptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryIORMConfigOptionResponseMsg.typecode)
        return response

    # op: QueryDatastorePerformanceSummary
    def QueryDatastorePerformanceSummary(self, request, **kw):
        if isinstance(request, QueryDatastorePerformanceSummaryRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDatastorePerformanceSummaryResponseMsg.typecode)
        return response

    # op: ApplyStorageDrsRecommendationToPod_Task
    def ApplyStorageDrsRecommendationToPod_Task(self, request, **kw):
        if isinstance(request, ApplyStorageDrsRecommendationToPod_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyStorageDrsRecommendationToPod_TaskResponseMsg.typecode)
        return response

    # op: ApplyStorageDrsRecommendation_Task
    def ApplyStorageDrsRecommendation_Task(self, request, **kw):
        if isinstance(request, ApplyStorageDrsRecommendation_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyStorageDrsRecommendation_TaskResponseMsg.typecode)
        return response

    # op: CancelStorageDrsRecommendation
    def CancelStorageDrsRecommendation(self, request, **kw):
        if isinstance(request, CancelStorageDrsRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelStorageDrsRecommendationResponseMsg.typecode)
        return response

    # op: RefreshStorageDrsRecommendation
    def RefreshStorageDrsRecommendation(self, request, **kw):
        if isinstance(request, RefreshStorageDrsRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshStorageDrsRecommendationResponseMsg.typecode)
        return response

    # op: ConfigureStorageDrsForPod_Task
    def ConfigureStorageDrsForPod_Task(self, request, **kw):
        if isinstance(request, ConfigureStorageDrsForPod_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureStorageDrsForPod_TaskResponseMsg.typecode)
        return response

    # op: RecommendDatastores
    def RecommendDatastores(self, request, **kw):
        if isinstance(request, RecommendDatastoresRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RecommendDatastoresResponseMsg.typecode)
        return response

    # op: CancelTask
    def CancelTask(self, request, **kw):
        if isinstance(request, CancelTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelTaskResponseMsg.typecode)
        return response

    # op: UpdateProgress
    def UpdateProgress(self, request, **kw):
        if isinstance(request, UpdateProgressRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateProgressResponseMsg.typecode)
        return response

    # op: SetTaskState
    def SetTaskState(self, request, **kw):
        if isinstance(request, SetTaskStateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetTaskStateResponseMsg.typecode)
        return response

    # op: SetTaskDescription
    def SetTaskDescription(self, request, **kw):
        if isinstance(request, SetTaskDescriptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetTaskDescriptionResponseMsg.typecode)
        return response

    # op: ReadNextTasks
    def ReadNextTasks(self, request, **kw):
        if isinstance(request, ReadNextTasksRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadNextTasksResponseMsg.typecode)
        return response

    # op: ReadPreviousTasks
    def ReadPreviousTasks(self, request, **kw):
        if isinstance(request, ReadPreviousTasksRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadPreviousTasksResponseMsg.typecode)
        return response

    # op: CreateCollectorForTasks
    def CreateCollectorForTasks(self, request, **kw):
        if isinstance(request, CreateCollectorForTasksRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCollectorForTasksResponseMsg.typecode)
        return response

    # op: CreateTask
    def CreateTask(self, request, **kw):
        if isinstance(request, CreateTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateTaskResponseMsg.typecode)
        return response

    # op: RetrieveUserGroups
    def RetrieveUserGroups(self, request, **kw):
        if isinstance(request, RetrieveUserGroupsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveUserGroupsResponseMsg.typecode)
        return response

    # op: UpdateVAppConfig
    def UpdateVAppConfig(self, request, **kw):
        if isinstance(request, UpdateVAppConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVAppConfigResponseMsg.typecode)
        return response

    # op: UpdateLinkedChildren
    def UpdateLinkedChildren(self, request, **kw):
        if isinstance(request, UpdateLinkedChildrenRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLinkedChildrenResponseMsg.typecode)
        return response

    # op: CloneVApp_Task
    def CloneVApp_Task(self, request, **kw):
        if isinstance(request, CloneVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CloneVApp_TaskResponseMsg.typecode)
        return response

    # op: ExportVApp
    def ExportVApp(self, request, **kw):
        if isinstance(request, ExportVAppRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExportVAppResponseMsg.typecode)
        return response

    # op: PowerOnVApp_Task
    def PowerOnVApp_Task(self, request, **kw):
        if isinstance(request, PowerOnVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnVApp_TaskResponseMsg.typecode)
        return response

    # op: PowerOffVApp_Task
    def PowerOffVApp_Task(self, request, **kw):
        if isinstance(request, PowerOffVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOffVApp_TaskResponseMsg.typecode)
        return response

    # op: SuspendVApp_Task
    def SuspendVApp_Task(self, request, **kw):
        if isinstance(request, SuspendVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SuspendVApp_TaskResponseMsg.typecode)
        return response

    # op: unregisterVApp_Task
    def unregisterVApp_Task(self, request, **kw):
        if isinstance(request, unregisterVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(unregisterVApp_TaskResponseMsg.typecode)
        return response

    # op: CreateVirtualDisk_Task
    def CreateVirtualDisk_Task(self, request, **kw):
        if isinstance(request, CreateVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: DeleteVirtualDisk_Task
    def DeleteVirtualDisk_Task(self, request, **kw):
        if isinstance(request, DeleteVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: MoveVirtualDisk_Task
    def MoveVirtualDisk_Task(self, request, **kw):
        if isinstance(request, MoveVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: CopyVirtualDisk_Task
    def CopyVirtualDisk_Task(self, request, **kw):
        if isinstance(request, CopyVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CopyVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ExtendVirtualDisk_Task
    def ExtendVirtualDisk_Task(self, request, **kw):
        if isinstance(request, ExtendVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtendVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskFragmentation
    def QueryVirtualDiskFragmentation(self, request, **kw):
        if isinstance(request, QueryVirtualDiskFragmentationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskFragmentationResponseMsg.typecode)
        return response

    # op: DefragmentVirtualDisk_Task
    def DefragmentVirtualDisk_Task(self, request, **kw):
        if isinstance(request, DefragmentVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DefragmentVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ShrinkVirtualDisk_Task
    def ShrinkVirtualDisk_Task(self, request, **kw):
        if isinstance(request, ShrinkVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ShrinkVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: InflateVirtualDisk_Task
    def InflateVirtualDisk_Task(self, request, **kw):
        if isinstance(request, InflateVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(InflateVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: EagerZeroVirtualDisk_Task
    def EagerZeroVirtualDisk_Task(self, request, **kw):
        if isinstance(request, EagerZeroVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EagerZeroVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ZeroFillVirtualDisk_Task
    def ZeroFillVirtualDisk_Task(self, request, **kw):
        if isinstance(request, ZeroFillVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ZeroFillVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: SetVirtualDiskUuid
    def SetVirtualDiskUuid(self, request, **kw):
        if isinstance(request, SetVirtualDiskUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetVirtualDiskUuidResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskUuid
    def QueryVirtualDiskUuid(self, request, **kw):
        if isinstance(request, QueryVirtualDiskUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskUuidResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskGeometry
    def QueryVirtualDiskGeometry(self, request, **kw):
        if isinstance(request, QueryVirtualDiskGeometryRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskGeometryResponseMsg.typecode)
        return response

    # op: RefreshStorageInfo
    def RefreshStorageInfo(self, request, **kw):
        if isinstance(request, RefreshStorageInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshStorageInfoResponseMsg.typecode)
        return response

    # op: CreateSnapshot_Task
    def CreateSnapshot_Task(self, request, **kw):
        if isinstance(request, CreateSnapshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RevertToCurrentSnapshot_Task
    def RevertToCurrentSnapshot_Task(self, request, **kw):
        if isinstance(request, RevertToCurrentSnapshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RevertToCurrentSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RemoveAllSnapshots_Task
    def RemoveAllSnapshots_Task(self, request, **kw):
        if isinstance(request, RemoveAllSnapshots_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAllSnapshots_TaskResponseMsg.typecode)
        return response

    # op: ConsolidateVMDisks_Task
    def ConsolidateVMDisks_Task(self, request, **kw):
        if isinstance(request, ConsolidateVMDisks_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ConsolidateVMDisks_TaskResponseMsg.typecode)
        return response

    # op: EstimateStorageForConsolidateSnapshots_Task
    def EstimateStorageForConsolidateSnapshots_Task(self, request, **kw):
        if isinstance(request, EstimateStorageForConsolidateSnapshots_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EstimateStorageForConsolidateSnapshots_TaskResponseMsg.typecode)
        return response

    # op: ReconfigVM_Task
    def ReconfigVM_Task(self, request, **kw):
        if isinstance(request, ReconfigVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigVM_TaskResponseMsg.typecode)
        return response

    # op: UpgradeVM_Task
    def UpgradeVM_Task(self, request, **kw):
        if isinstance(request, UpgradeVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVM_TaskResponseMsg.typecode)
        return response

    # op: ExtractOvfEnvironment
    def ExtractOvfEnvironment(self, request, **kw):
        if isinstance(request, ExtractOvfEnvironmentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtractOvfEnvironmentResponseMsg.typecode)
        return response

    # op: PowerOnVM_Task
    def PowerOnVM_Task(self, request, **kw):
        if isinstance(request, PowerOnVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnVM_TaskResponseMsg.typecode)
        return response

    # op: PowerOffVM_Task
    def PowerOffVM_Task(self, request, **kw):
        if isinstance(request, PowerOffVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOffVM_TaskResponseMsg.typecode)
        return response

    # op: SuspendVM_Task
    def SuspendVM_Task(self, request, **kw):
        if isinstance(request, SuspendVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SuspendVM_TaskResponseMsg.typecode)
        return response

    # op: ResetVM_Task
    def ResetVM_Task(self, request, **kw):
        if isinstance(request, ResetVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetVM_TaskResponseMsg.typecode)
        return response

    # op: ShutdownGuest
    def ShutdownGuest(self, request, **kw):
        if isinstance(request, ShutdownGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ShutdownGuestResponseMsg.typecode)
        return response

    # op: RebootGuest
    def RebootGuest(self, request, **kw):
        if isinstance(request, RebootGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RebootGuestResponseMsg.typecode)
        return response

    # op: StandbyGuest
    def StandbyGuest(self, request, **kw):
        if isinstance(request, StandbyGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StandbyGuestResponseMsg.typecode)
        return response

    # op: AnswerVM
    def AnswerVM(self, request, **kw):
        if isinstance(request, AnswerVMRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AnswerVMResponseMsg.typecode)
        return response

    # op: CustomizeVM_Task
    def CustomizeVM_Task(self, request, **kw):
        if isinstance(request, CustomizeVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CustomizeVM_TaskResponseMsg.typecode)
        return response

    # op: CheckCustomizationSpec
    def CheckCustomizationSpec(self, request, **kw):
        if isinstance(request, CheckCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCustomizationSpecResponseMsg.typecode)
        return response

    # op: MigrateVM_Task
    def MigrateVM_Task(self, request, **kw):
        if isinstance(request, MigrateVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MigrateVM_TaskResponseMsg.typecode)
        return response

    # op: RelocateVM_Task
    def RelocateVM_Task(self, request, **kw):
        if isinstance(request, RelocateVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RelocateVM_TaskResponseMsg.typecode)
        return response

    # op: CloneVM_Task
    def CloneVM_Task(self, request, **kw):
        if isinstance(request, CloneVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CloneVM_TaskResponseMsg.typecode)
        return response

    # op: ExportVm
    def ExportVm(self, request, **kw):
        if isinstance(request, ExportVmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExportVmResponseMsg.typecode)
        return response

    # op: MarkAsTemplate
    def MarkAsTemplate(self, request, **kw):
        if isinstance(request, MarkAsTemplateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MarkAsTemplateResponseMsg.typecode)
        return response

    # op: MarkAsVirtualMachine
    def MarkAsVirtualMachine(self, request, **kw):
        if isinstance(request, MarkAsVirtualMachineRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MarkAsVirtualMachineResponseMsg.typecode)
        return response

    # op: UnregisterVM
    def UnregisterVM(self, request, **kw):
        if isinstance(request, UnregisterVMRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterVMResponseMsg.typecode)
        return response

    # op: ResetGuestInformation
    def ResetGuestInformation(self, request, **kw):
        if isinstance(request, ResetGuestInformationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetGuestInformationResponseMsg.typecode)
        return response

    # op: MountToolsInstaller
    def MountToolsInstaller(self, request, **kw):
        if isinstance(request, MountToolsInstallerRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MountToolsInstallerResponseMsg.typecode)
        return response

    # op: UnmountToolsInstaller
    def UnmountToolsInstaller(self, request, **kw):
        if isinstance(request, UnmountToolsInstallerRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UnmountToolsInstallerResponseMsg.typecode)
        return response

    # op: UpgradeTools_Task
    def UpgradeTools_Task(self, request, **kw):
        if isinstance(request, UpgradeTools_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeTools_TaskResponseMsg.typecode)
        return response

    # op: AcquireMksTicket
    def AcquireMksTicket(self, request, **kw):
        if isinstance(request, AcquireMksTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireMksTicketResponseMsg.typecode)
        return response

    # op: AcquireTicket
    def AcquireTicket(self, request, **kw):
        if isinstance(request, AcquireTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireTicketResponseMsg.typecode)
        return response

    # op: SetScreenResolution
    def SetScreenResolution(self, request, **kw):
        if isinstance(request, SetScreenResolutionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetScreenResolutionResponseMsg.typecode)
        return response

    # op: DefragmentAllDisks
    def DefragmentAllDisks(self, request, **kw):
        if isinstance(request, DefragmentAllDisksRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DefragmentAllDisksResponseMsg.typecode)
        return response

    # op: CreateSecondaryVM_Task
    def CreateSecondaryVM_Task(self, request, **kw):
        if isinstance(request, CreateSecondaryVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateSecondaryVM_TaskResponseMsg.typecode)
        return response

    # op: TurnOffFaultToleranceForVM_Task
    def TurnOffFaultToleranceForVM_Task(self, request, **kw):
        if isinstance(request, TurnOffFaultToleranceForVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(TurnOffFaultToleranceForVM_TaskResponseMsg.typecode)
        return response

    # op: MakePrimaryVM_Task
    def MakePrimaryVM_Task(self, request, **kw):
        if isinstance(request, MakePrimaryVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MakePrimaryVM_TaskResponseMsg.typecode)
        return response

    # op: TerminateFaultTolerantVM_Task
    def TerminateFaultTolerantVM_Task(self, request, **kw):
        if isinstance(request, TerminateFaultTolerantVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(TerminateFaultTolerantVM_TaskResponseMsg.typecode)
        return response

    # op: DisableSecondaryVM_Task
    def DisableSecondaryVM_Task(self, request, **kw):
        if isinstance(request, DisableSecondaryVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableSecondaryVM_TaskResponseMsg.typecode)
        return response

    # op: EnableSecondaryVM_Task
    def EnableSecondaryVM_Task(self, request, **kw):
        if isinstance(request, EnableSecondaryVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableSecondaryVM_TaskResponseMsg.typecode)
        return response

    # op: SetDisplayTopology
    def SetDisplayTopology(self, request, **kw):
        if isinstance(request, SetDisplayTopologyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetDisplayTopologyResponseMsg.typecode)
        return response

    # op: StartRecording_Task
    def StartRecording_Task(self, request, **kw):
        if isinstance(request, StartRecording_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StartRecording_TaskResponseMsg.typecode)
        return response

    # op: StopRecording_Task
    def StopRecording_Task(self, request, **kw):
        if isinstance(request, StopRecording_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StopRecording_TaskResponseMsg.typecode)
        return response

    # op: StartReplaying_Task
    def StartReplaying_Task(self, request, **kw):
        if isinstance(request, StartReplaying_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StartReplaying_TaskResponseMsg.typecode)
        return response

    # op: StopReplaying_Task
    def StopReplaying_Task(self, request, **kw):
        if isinstance(request, StopReplaying_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StopReplaying_TaskResponseMsg.typecode)
        return response

    # op: PromoteDisks_Task
    def PromoteDisks_Task(self, request, **kw):
        if isinstance(request, PromoteDisks_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PromoteDisks_TaskResponseMsg.typecode)
        return response

    # op: CreateScreenshot_Task
    def CreateScreenshot_Task(self, request, **kw):
        if isinstance(request, CreateScreenshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateScreenshot_TaskResponseMsg.typecode)
        return response

    # op: QueryChangedDiskAreas
    def QueryChangedDiskAreas(self, request, **kw):
        if isinstance(request, QueryChangedDiskAreasRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryChangedDiskAreasResponseMsg.typecode)
        return response

    # op: QueryUnownedFiles
    def QueryUnownedFiles(self, request, **kw):
        if isinstance(request, QueryUnownedFilesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryUnownedFilesResponseMsg.typecode)
        return response

    # op: reloadVirtualMachineFromPath_Task
    def reloadVirtualMachineFromPath_Task(self, request, **kw):
        if isinstance(request, reloadVirtualMachineFromPath_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(reloadVirtualMachineFromPath_TaskResponseMsg.typecode)
        return response

    # op: QueryFaultToleranceCompatibility
    def QueryFaultToleranceCompatibility(self, request, **kw):
        if isinstance(request, QueryFaultToleranceCompatibilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryFaultToleranceCompatibilityResponseMsg.typecode)
        return response

    # op: TerminateVM
    def TerminateVM(self, request, **kw):
        if isinstance(request, TerminateVMRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(TerminateVMResponseMsg.typecode)
        return response

    # op: RemoveAlarm
    def RemoveAlarm(self, request, **kw):
        if isinstance(request, RemoveAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAlarmResponseMsg.typecode)
        return response

    # op: ReconfigureAlarm
    def ReconfigureAlarm(self, request, **kw):
        if isinstance(request, ReconfigureAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureAlarmResponseMsg.typecode)
        return response

    # op: CreateAlarm
    def CreateAlarm(self, request, **kw):
        if isinstance(request, CreateAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateAlarmResponseMsg.typecode)
        return response

    # op: GetAlarm
    def GetAlarm(self, request, **kw):
        if isinstance(request, GetAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(GetAlarmResponseMsg.typecode)
        return response

    # op: AreAlarmActionsEnabled
    def AreAlarmActionsEnabled(self, request, **kw):
        if isinstance(request, AreAlarmActionsEnabledRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AreAlarmActionsEnabledResponseMsg.typecode)
        return response

    # op: EnableAlarmActions
    def EnableAlarmActions(self, request, **kw):
        if isinstance(request, EnableAlarmActionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableAlarmActionsResponseMsg.typecode)
        return response

    # op: GetAlarmState
    def GetAlarmState(self, request, **kw):
        if isinstance(request, GetAlarmStateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(GetAlarmStateResponseMsg.typecode)
        return response

    # op: AcknowledgeAlarm
    def AcknowledgeAlarm(self, request, **kw):
        if isinstance(request, AcknowledgeAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AcknowledgeAlarmResponseMsg.typecode)
        return response

    # op: ReconfigureDVPortgroup_Task
    def ReconfigureDVPortgroup_Task(self, request, **kw):
        if isinstance(request, ReconfigureDVPortgroup_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureDVPortgroup_TaskResponseMsg.typecode)
        return response

    # op: DVPortgroupRollback_Task
    def DVPortgroupRollback_Task(self, request, **kw):
        if isinstance(request, DVPortgroupRollback_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DVPortgroupRollback_TaskResponseMsg.typecode)
        return response

    # op: QueryAvailableDvsSpec
    def QueryAvailableDvsSpec(self, request, **kw):
        if isinstance(request, QueryAvailableDvsSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailableDvsSpecResponseMsg.typecode)
        return response

    # op: QueryCompatibleHostForNewDvs
    def QueryCompatibleHostForNewDvs(self, request, **kw):
        if isinstance(request, QueryCompatibleHostForNewDvsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryCompatibleHostForNewDvsResponseMsg.typecode)
        return response

    # op: QueryCompatibleHostForExistingDvs
    def QueryCompatibleHostForExistingDvs(self, request, **kw):
        if isinstance(request, QueryCompatibleHostForExistingDvsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryCompatibleHostForExistingDvsResponseMsg.typecode)
        return response

    # op: QueryDvsCompatibleHostSpec
    def QueryDvsCompatibleHostSpec(self, request, **kw):
        if isinstance(request, QueryDvsCompatibleHostSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsCompatibleHostSpecResponseMsg.typecode)
        return response

    # op: QueryDvsFeatureCapability
    def QueryDvsFeatureCapability(self, request, **kw):
        if isinstance(request, QueryDvsFeatureCapabilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsFeatureCapabilityResponseMsg.typecode)
        return response

    # op: QueryDvsByUuid
    def QueryDvsByUuid(self, request, **kw):
        if isinstance(request, QueryDvsByUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsByUuidResponseMsg.typecode)
        return response

    # op: QueryDvsConfigTarget
    def QueryDvsConfigTarget(self, request, **kw):
        if isinstance(request, QueryDvsConfigTargetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsConfigTargetResponseMsg.typecode)
        return response

    # op: QueryDvsCheckCompatibility
    def QueryDvsCheckCompatibility(self, request, **kw):
        if isinstance(request, QueryDvsCheckCompatibilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsCheckCompatibilityResponseMsg.typecode)
        return response

    # op: RectifyDvsOnHost_Task
    def RectifyDvsOnHost_Task(self, request, **kw):
        if isinstance(request, RectifyDvsOnHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RectifyDvsOnHost_TaskResponseMsg.typecode)
        return response

    # op: DVSManagerExportEntity_Task
    def DVSManagerExportEntity_Task(self, request, **kw):
        if isinstance(request, DVSManagerExportEntity_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DVSManagerExportEntity_TaskResponseMsg.typecode)
        return response

    # op: DVSManagerImportEntity_Task
    def DVSManagerImportEntity_Task(self, request, **kw):
        if isinstance(request, DVSManagerImportEntity_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DVSManagerImportEntity_TaskResponseMsg.typecode)
        return response

    # op: DVSManagerLookupDvPortGroup
    def DVSManagerLookupDvPortGroup(self, request, **kw):
        if isinstance(request, DVSManagerLookupDvPortGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DVSManagerLookupDvPortGroupResponseMsg.typecode)
        return response

    # op: ReadNextEvents
    def ReadNextEvents(self, request, **kw):
        if isinstance(request, ReadNextEventsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadNextEventsResponseMsg.typecode)
        return response

    # op: ReadPreviousEvents
    def ReadPreviousEvents(self, request, **kw):
        if isinstance(request, ReadPreviousEventsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadPreviousEventsResponseMsg.typecode)
        return response

    # op: RetrieveArgumentDescription
    def RetrieveArgumentDescription(self, request, **kw):
        if isinstance(request, RetrieveArgumentDescriptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveArgumentDescriptionResponseMsg.typecode)
        return response

    # op: CreateCollectorForEvents
    def CreateCollectorForEvents(self, request, **kw):
        if isinstance(request, CreateCollectorForEventsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCollectorForEventsResponseMsg.typecode)
        return response

    # op: LogUserEvent
    def LogUserEvent(self, request, **kw):
        if isinstance(request, LogUserEventRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LogUserEventResponseMsg.typecode)
        return response

    # op: QueryEvents
    def QueryEvents(self, request, **kw):
        if isinstance(request, QueryEventsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryEventsResponseMsg.typecode)
        return response

    # op: PostEvent
    def PostEvent(self, request, **kw):
        if isinstance(request, PostEventRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(PostEventResponseMsg.typecode)
        return response

    # op: JoinDomain_Task
    def JoinDomain_Task(self, request, **kw):
        if isinstance(request, JoinDomain_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(JoinDomain_TaskResponseMsg.typecode)
        return response

    # op: JoinDomainWithCAM_Task
    def JoinDomainWithCAM_Task(self, request, **kw):
        if isinstance(request, JoinDomainWithCAM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(JoinDomainWithCAM_TaskResponseMsg.typecode)
        return response

    # op: ImportCertificateForCAM_Task
    def ImportCertificateForCAM_Task(self, request, **kw):
        if isinstance(request, ImportCertificateForCAM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ImportCertificateForCAM_TaskResponseMsg.typecode)
        return response

    # op: LeaveCurrentDomain_Task
    def LeaveCurrentDomain_Task(self, request, **kw):
        if isinstance(request, LeaveCurrentDomain_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(LeaveCurrentDomain_TaskResponseMsg.typecode)
        return response

    # op: ReconfigureAutostart
    def ReconfigureAutostart(self, request, **kw):
        if isinstance(request, ReconfigureAutostartRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureAutostartResponseMsg.typecode)
        return response

    # op: AutoStartPowerOn
    def AutoStartPowerOn(self, request, **kw):
        if isinstance(request, AutoStartPowerOnRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AutoStartPowerOnResponseMsg.typecode)
        return response

    # op: AutoStartPowerOff
    def AutoStartPowerOff(self, request, **kw):
        if isinstance(request, AutoStartPowerOffRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AutoStartPowerOffResponseMsg.typecode)
        return response

    # op: QueryBootDevices
    def QueryBootDevices(self, request, **kw):
        if isinstance(request, QueryBootDevicesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryBootDevicesResponseMsg.typecode)
        return response

    # op: UpdateBootDevice
    def UpdateBootDevice(self, request, **kw):
        if isinstance(request, UpdateBootDeviceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateBootDeviceResponseMsg.typecode)
        return response

    # op: ConfigureHostCache_Task
    def ConfigureHostCache_Task(self, request, **kw):
        if isinstance(request, ConfigureHostCache_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureHostCache_TaskResponseMsg.typecode)
        return response

    # op: EnableHyperThreading
    def EnableHyperThreading(self, request, **kw):
        if isinstance(request, EnableHyperThreadingRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableHyperThreadingResponseMsg.typecode)
        return response

    # op: DisableHyperThreading
    def DisableHyperThreading(self, request, **kw):
        if isinstance(request, DisableHyperThreadingRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableHyperThreadingResponseMsg.typecode)
        return response

    # op: SearchDatastore_Task
    def SearchDatastore_Task(self, request, **kw):
        if isinstance(request, SearchDatastore_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SearchDatastore_TaskResponseMsg.typecode)
        return response

    # op: SearchDatastoreSubFolders_Task
    def SearchDatastoreSubFolders_Task(self, request, **kw):
        if isinstance(request, SearchDatastoreSubFolders_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SearchDatastoreSubFolders_TaskResponseMsg.typecode)
        return response

    # op: DeleteFile
    def DeleteFile(self, request, **kw):
        if isinstance(request, DeleteFileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteFileResponseMsg.typecode)
        return response

    # op: UpdateLocalSwapDatastore
    def UpdateLocalSwapDatastore(self, request, **kw):
        if isinstance(request, UpdateLocalSwapDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLocalSwapDatastoreResponseMsg.typecode)
        return response

    # op: QueryAvailableDisksForVmfs
    def QueryAvailableDisksForVmfs(self, request, **kw):
        if isinstance(request, QueryAvailableDisksForVmfsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailableDisksForVmfsResponseMsg.typecode)
        return response

    # op: QueryVmfsDatastoreCreateOptions
    def QueryVmfsDatastoreCreateOptions(self, request, **kw):
        if isinstance(request, QueryVmfsDatastoreCreateOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVmfsDatastoreCreateOptionsResponseMsg.typecode)
        return response

    # op: CreateVmfsDatastore
    def CreateVmfsDatastore(self, request, **kw):
        if isinstance(request, CreateVmfsDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVmfsDatastoreResponseMsg.typecode)
        return response

    # op: QueryVmfsDatastoreExtendOptions
    def QueryVmfsDatastoreExtendOptions(self, request, **kw):
        if isinstance(request, QueryVmfsDatastoreExtendOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVmfsDatastoreExtendOptionsResponseMsg.typecode)
        return response

    # op: QueryVmfsDatastoreExpandOptions
    def QueryVmfsDatastoreExpandOptions(self, request, **kw):
        if isinstance(request, QueryVmfsDatastoreExpandOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVmfsDatastoreExpandOptionsResponseMsg.typecode)
        return response

    # op: ExtendVmfsDatastore
    def ExtendVmfsDatastore(self, request, **kw):
        if isinstance(request, ExtendVmfsDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtendVmfsDatastoreResponseMsg.typecode)
        return response

    # op: ExpandVmfsDatastore
    def ExpandVmfsDatastore(self, request, **kw):
        if isinstance(request, ExpandVmfsDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExpandVmfsDatastoreResponseMsg.typecode)
        return response

    # op: CreateNasDatastore
    def CreateNasDatastore(self, request, **kw):
        if isinstance(request, CreateNasDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateNasDatastoreResponseMsg.typecode)
        return response

    # op: CreateLocalDatastore
    def CreateLocalDatastore(self, request, **kw):
        if isinstance(request, CreateLocalDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateLocalDatastoreResponseMsg.typecode)
        return response

    # op: RemoveDatastore
    def RemoveDatastore(self, request, **kw):
        if isinstance(request, RemoveDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveDatastoreResponseMsg.typecode)
        return response

    # op: ConfigureDatastorePrincipal
    def ConfigureDatastorePrincipal(self, request, **kw):
        if isinstance(request, ConfigureDatastorePrincipalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureDatastorePrincipalResponseMsg.typecode)
        return response

    # op: QueryUnresolvedVmfsVolumes
    def QueryUnresolvedVmfsVolumes(self, request, **kw):
        if isinstance(request, QueryUnresolvedVmfsVolumesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryUnresolvedVmfsVolumesResponseMsg.typecode)
        return response

    # op: ResignatureUnresolvedVmfsVolume_Task
    def ResignatureUnresolvedVmfsVolume_Task(self, request, **kw):
        if isinstance(request, ResignatureUnresolvedVmfsVolume_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResignatureUnresolvedVmfsVolume_TaskResponseMsg.typecode)
        return response

    # op: UpdateDateTimeConfig
    def UpdateDateTimeConfig(self, request, **kw):
        if isinstance(request, UpdateDateTimeConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDateTimeConfigResponseMsg.typecode)
        return response

    # op: QueryAvailableTimeZones
    def QueryAvailableTimeZones(self, request, **kw):
        if isinstance(request, QueryAvailableTimeZonesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailableTimeZonesResponseMsg.typecode)
        return response

    # op: QueryDateTime
    def QueryDateTime(self, request, **kw):
        if isinstance(request, QueryDateTimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDateTimeResponseMsg.typecode)
        return response

    # op: UpdateDateTime
    def UpdateDateTime(self, request, **kw):
        if isinstance(request, UpdateDateTimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDateTimeResponseMsg.typecode)
        return response

    # op: RefreshDateTimeSystem
    def RefreshDateTimeSystem(self, request, **kw):
        if isinstance(request, RefreshDateTimeSystemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDateTimeSystemResponseMsg.typecode)
        return response

    # op: QueryAvailablePartition
    def QueryAvailablePartition(self, request, **kw):
        if isinstance(request, QueryAvailablePartitionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailablePartitionResponseMsg.typecode)
        return response

    # op: SelectActivePartition
    def SelectActivePartition(self, request, **kw):
        if isinstance(request, SelectActivePartitionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SelectActivePartitionResponseMsg.typecode)
        return response

    # op: QueryPartitionCreateOptions
    def QueryPartitionCreateOptions(self, request, **kw):
        if isinstance(request, QueryPartitionCreateOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPartitionCreateOptionsResponseMsg.typecode)
        return response

    # op: QueryPartitionCreateDesc
    def QueryPartitionCreateDesc(self, request, **kw):
        if isinstance(request, QueryPartitionCreateDescRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPartitionCreateDescResponseMsg.typecode)
        return response

    # op: CreateDiagnosticPartition
    def CreateDiagnosticPartition(self, request, **kw):
        if isinstance(request, CreateDiagnosticPartitionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDiagnosticPartitionResponseMsg.typecode)
        return response

    # op: EsxAgentHostManagerUpdateConfig
    def EsxAgentHostManagerUpdateConfig(self, request, **kw):
        if isinstance(request, EsxAgentHostManagerUpdateConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EsxAgentHostManagerUpdateConfigResponseMsg.typecode)
        return response

    # op: UpdateDefaultPolicy
    def UpdateDefaultPolicy(self, request, **kw):
        if isinstance(request, UpdateDefaultPolicyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDefaultPolicyResponseMsg.typecode)
        return response

    # op: EnableRuleset
    def EnableRuleset(self, request, **kw):
        if isinstance(request, EnableRulesetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableRulesetResponseMsg.typecode)
        return response

    # op: DisableRuleset
    def DisableRuleset(self, request, **kw):
        if isinstance(request, DisableRulesetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableRulesetResponseMsg.typecode)
        return response

    # op: UpdateRuleset
    def UpdateRuleset(self, request, **kw):
        if isinstance(request, UpdateRulesetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateRulesetResponseMsg.typecode)
        return response

    # op: RefreshFirewall
    def RefreshFirewall(self, request, **kw):
        if isinstance(request, RefreshFirewallRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshFirewallResponseMsg.typecode)
        return response

    # op: ResetFirmwareToFactoryDefaults
    def ResetFirmwareToFactoryDefaults(self, request, **kw):
        if isinstance(request, ResetFirmwareToFactoryDefaultsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetFirmwareToFactoryDefaultsResponseMsg.typecode)
        return response

    # op: BackupFirmwareConfiguration
    def BackupFirmwareConfiguration(self, request, **kw):
        if isinstance(request, BackupFirmwareConfigurationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(BackupFirmwareConfigurationResponseMsg.typecode)
        return response

    # op: QueryFirmwareConfigUploadURL
    def QueryFirmwareConfigUploadURL(self, request, **kw):
        if isinstance(request, QueryFirmwareConfigUploadURLRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryFirmwareConfigUploadURLResponseMsg.typecode)
        return response

    # op: RestoreFirmwareConfiguration
    def RestoreFirmwareConfiguration(self, request, **kw):
        if isinstance(request, RestoreFirmwareConfigurationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RestoreFirmwareConfigurationResponseMsg.typecode)
        return response

    # op: RefreshHealthStatusSystem
    def RefreshHealthStatusSystem(self, request, **kw):
        if isinstance(request, RefreshHealthStatusSystemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshHealthStatusSystemResponseMsg.typecode)
        return response

    # op: ResetSystemHealthInfo
    def ResetSystemHealthInfo(self, request, **kw):
        if isinstance(request, ResetSystemHealthInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetSystemHealthInfoResponseMsg.typecode)
        return response

    # op: HostImageConfigGetAcceptance
    def HostImageConfigGetAcceptance(self, request, **kw):
        if isinstance(request, HostImageConfigGetAcceptanceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(HostImageConfigGetAcceptanceResponseMsg.typecode)
        return response

    # op: HostImageConfigGetProfile
    def HostImageConfigGetProfile(self, request, **kw):
        if isinstance(request, HostImageConfigGetProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(HostImageConfigGetProfileResponseMsg.typecode)
        return response

    # op: UpdateHostImageAcceptanceLevel
    def UpdateHostImageAcceptanceLevel(self, request, **kw):
        if isinstance(request, UpdateHostImageAcceptanceLevelRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateHostImageAcceptanceLevelResponseMsg.typecode)
        return response

    # op: QueryVnicStatus
    def QueryVnicStatus(self, request, **kw):
        if isinstance(request, QueryVnicStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVnicStatusResponseMsg.typecode)
        return response

    # op: QueryPnicStatus
    def QueryPnicStatus(self, request, **kw):
        if isinstance(request, QueryPnicStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPnicStatusResponseMsg.typecode)
        return response

    # op: QueryBoundVnics
    def QueryBoundVnics(self, request, **kw):
        if isinstance(request, QueryBoundVnicsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryBoundVnicsResponseMsg.typecode)
        return response

    # op: QueryCandidateNics
    def QueryCandidateNics(self, request, **kw):
        if isinstance(request, QueryCandidateNicsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryCandidateNicsResponseMsg.typecode)
        return response

    # op: BindVnic
    def BindVnic(self, request, **kw):
        if isinstance(request, BindVnicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(BindVnicResponseMsg.typecode)
        return response

    # op: UnbindVnic
    def UnbindVnic(self, request, **kw):
        if isinstance(request, UnbindVnicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UnbindVnicResponseMsg.typecode)
        return response

    # op: QueryMigrationDependencies
    def QueryMigrationDependencies(self, request, **kw):
        if isinstance(request, QueryMigrationDependenciesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryMigrationDependenciesResponseMsg.typecode)
        return response

    # op: QueryModules
    def QueryModules(self, request, **kw):
        if isinstance(request, QueryModulesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryModulesResponseMsg.typecode)
        return response

    # op: UpdateModuleOptionString
    def UpdateModuleOptionString(self, request, **kw):
        if isinstance(request, UpdateModuleOptionStringRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateModuleOptionStringResponseMsg.typecode)
        return response

    # op: QueryConfiguredModuleOptionString
    def QueryConfiguredModuleOptionString(self, request, **kw):
        if isinstance(request, QueryConfiguredModuleOptionStringRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfiguredModuleOptionStringResponseMsg.typecode)
        return response

    # op: CreateUser
    def CreateUser(self, request, **kw):
        if isinstance(request, CreateUserRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateUserResponseMsg.typecode)
        return response

    # op: UpdateUser
    def UpdateUser(self, request, **kw):
        if isinstance(request, UpdateUserRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateUserResponseMsg.typecode)
        return response

    # op: CreateGroup
    def CreateGroup(self, request, **kw):
        if isinstance(request, CreateGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateGroupResponseMsg.typecode)
        return response

    # op: RemoveUser
    def RemoveUser(self, request, **kw):
        if isinstance(request, RemoveUserRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveUserResponseMsg.typecode)
        return response

    # op: RemoveGroup
    def RemoveGroup(self, request, **kw):
        if isinstance(request, RemoveGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveGroupResponseMsg.typecode)
        return response

    # op: AssignUserToGroup
    def AssignUserToGroup(self, request, **kw):
        if isinstance(request, AssignUserToGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AssignUserToGroupResponseMsg.typecode)
        return response

    # op: UnassignUserFromGroup
    def UnassignUserFromGroup(self, request, **kw):
        if isinstance(request, UnassignUserFromGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UnassignUserFromGroupResponseMsg.typecode)
        return response

    # op: ReconfigureServiceConsoleReservation
    def ReconfigureServiceConsoleReservation(self, request, **kw):
        if isinstance(request, ReconfigureServiceConsoleReservationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureServiceConsoleReservationResponseMsg.typecode)
        return response

    # op: ReconfigureVirtualMachineReservation
    def ReconfigureVirtualMachineReservation(self, request, **kw):
        if isinstance(request, ReconfigureVirtualMachineReservationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureVirtualMachineReservationResponseMsg.typecode)
        return response

    # op: UpdateNetworkConfig
    def UpdateNetworkConfig(self, request, **kw):
        if isinstance(request, UpdateNetworkConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateNetworkConfigResponseMsg.typecode)
        return response

    # op: UpdateDnsConfig
    def UpdateDnsConfig(self, request, **kw):
        if isinstance(request, UpdateDnsConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDnsConfigResponseMsg.typecode)
        return response

    # op: UpdateIpRouteConfig
    def UpdateIpRouteConfig(self, request, **kw):
        if isinstance(request, UpdateIpRouteConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpRouteConfigResponseMsg.typecode)
        return response

    # op: UpdateConsoleIpRouteConfig
    def UpdateConsoleIpRouteConfig(self, request, **kw):
        if isinstance(request, UpdateConsoleIpRouteConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateConsoleIpRouteConfigResponseMsg.typecode)
        return response

    # op: UpdateIpRouteTableConfig
    def UpdateIpRouteTableConfig(self, request, **kw):
        if isinstance(request, UpdateIpRouteTableConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpRouteTableConfigResponseMsg.typecode)
        return response

    # op: AddVirtualSwitch
    def AddVirtualSwitch(self, request, **kw):
        if isinstance(request, AddVirtualSwitchRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddVirtualSwitchResponseMsg.typecode)
        return response

    # op: RemoveVirtualSwitch
    def RemoveVirtualSwitch(self, request, **kw):
        if isinstance(request, RemoveVirtualSwitchRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveVirtualSwitchResponseMsg.typecode)
        return response

    # op: UpdateVirtualSwitch
    def UpdateVirtualSwitch(self, request, **kw):
        if isinstance(request, UpdateVirtualSwitchRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVirtualSwitchResponseMsg.typecode)
        return response

    # op: AddPortGroup
    def AddPortGroup(self, request, **kw):
        if isinstance(request, AddPortGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddPortGroupResponseMsg.typecode)
        return response

    # op: RemovePortGroup
    def RemovePortGroup(self, request, **kw):
        if isinstance(request, RemovePortGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemovePortGroupResponseMsg.typecode)
        return response

    # op: UpdatePortGroup
    def UpdatePortGroup(self, request, **kw):
        if isinstance(request, UpdatePortGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePortGroupResponseMsg.typecode)
        return response

    # op: UpdatePhysicalNicLinkSpeed
    def UpdatePhysicalNicLinkSpeed(self, request, **kw):
        if isinstance(request, UpdatePhysicalNicLinkSpeedRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePhysicalNicLinkSpeedResponseMsg.typecode)
        return response

    # op: QueryNetworkHint
    def QueryNetworkHint(self, request, **kw):
        if isinstance(request, QueryNetworkHintRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryNetworkHintResponseMsg.typecode)
        return response

    # op: AddVirtualNic
    def AddVirtualNic(self, request, **kw):
        if isinstance(request, AddVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddVirtualNicResponseMsg.typecode)
        return response

    # op: RemoveVirtualNic
    def RemoveVirtualNic(self, request, **kw):
        if isinstance(request, RemoveVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveVirtualNicResponseMsg.typecode)
        return response

    # op: UpdateVirtualNic
    def UpdateVirtualNic(self, request, **kw):
        if isinstance(request, UpdateVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVirtualNicResponseMsg.typecode)
        return response

    # op: AddServiceConsoleVirtualNic
    def AddServiceConsoleVirtualNic(self, request, **kw):
        if isinstance(request, AddServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RemoveServiceConsoleVirtualNic
    def RemoveServiceConsoleVirtualNic(self, request, **kw):
        if isinstance(request, RemoveServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: UpdateServiceConsoleVirtualNic
    def UpdateServiceConsoleVirtualNic(self, request, **kw):
        if isinstance(request, UpdateServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RestartServiceConsoleVirtualNic
    def RestartServiceConsoleVirtualNic(self, request, **kw):
        if isinstance(request, RestartServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RestartServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RefreshNetworkSystem
    def RefreshNetworkSystem(self, request, **kw):
        if isinstance(request, RefreshNetworkSystemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshNetworkSystemResponseMsg.typecode)
        return response

    # op: CheckHostPatch_Task
    def CheckHostPatch_Task(self, request, **kw):
        if isinstance(request, CheckHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckHostPatch_TaskResponseMsg.typecode)
        return response

    # op: ScanHostPatch_Task
    def ScanHostPatch_Task(self, request, **kw):
        if isinstance(request, ScanHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ScanHostPatch_TaskResponseMsg.typecode)
        return response

    # op: ScanHostPatchV2_Task
    def ScanHostPatchV2_Task(self, request, **kw):
        if isinstance(request, ScanHostPatchV2_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ScanHostPatchV2_TaskResponseMsg.typecode)
        return response

    # op: StageHostPatch_Task
    def StageHostPatch_Task(self, request, **kw):
        if isinstance(request, StageHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StageHostPatch_TaskResponseMsg.typecode)
        return response

    # op: InstallHostPatch_Task
    def InstallHostPatch_Task(self, request, **kw):
        if isinstance(request, InstallHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(InstallHostPatch_TaskResponseMsg.typecode)
        return response

    # op: InstallHostPatchV2_Task
    def InstallHostPatchV2_Task(self, request, **kw):
        if isinstance(request, InstallHostPatchV2_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(InstallHostPatchV2_TaskResponseMsg.typecode)
        return response

    # op: UninstallHostPatch_Task
    def UninstallHostPatch_Task(self, request, **kw):
        if isinstance(request, UninstallHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UninstallHostPatch_TaskResponseMsg.typecode)
        return response

    # op: QueryHostPatch_Task
    def QueryHostPatch_Task(self, request, **kw):
        if isinstance(request, QueryHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryHostPatch_TaskResponseMsg.typecode)
        return response

    # op: Refresh
    def Refresh(self, request, **kw):
        if isinstance(request, RefreshRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshResponseMsg.typecode)
        return response

    # op: UpdatePassthruConfig
    def UpdatePassthruConfig(self, request, **kw):
        if isinstance(request, UpdatePassthruConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePassthruConfigResponseMsg.typecode)
        return response

    # op: ConfigurePowerPolicy
    def ConfigurePowerPolicy(self, request, **kw):
        if isinstance(request, ConfigurePowerPolicyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigurePowerPolicyResponseMsg.typecode)
        return response

    # op: UpdateServicePolicy
    def UpdateServicePolicy(self, request, **kw):
        if isinstance(request, UpdateServicePolicyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServicePolicyResponseMsg.typecode)
        return response

    # op: StartService
    def StartService(self, request, **kw):
        if isinstance(request, StartServiceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StartServiceResponseMsg.typecode)
        return response

    # op: StopService
    def StopService(self, request, **kw):
        if isinstance(request, StopServiceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StopServiceResponseMsg.typecode)
        return response

    # op: RestartService
    def RestartService(self, request, **kw):
        if isinstance(request, RestartServiceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RestartServiceResponseMsg.typecode)
        return response

    # op: UninstallService
    def UninstallService(self, request, **kw):
        if isinstance(request, UninstallServiceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UninstallServiceResponseMsg.typecode)
        return response

    # op: RefreshServices
    def RefreshServices(self, request, **kw):
        if isinstance(request, RefreshServicesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshServicesResponseMsg.typecode)
        return response

    # op: ReconfigureSnmpAgent
    def ReconfigureSnmpAgent(self, request, **kw):
        if isinstance(request, ReconfigureSnmpAgentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureSnmpAgentResponseMsg.typecode)
        return response

    # op: SendTestNotification
    def SendTestNotification(self, request, **kw):
        if isinstance(request, SendTestNotificationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SendTestNotificationResponseMsg.typecode)
        return response

    # op: RetrieveDiskPartitionInfo
    def RetrieveDiskPartitionInfo(self, request, **kw):
        if isinstance(request, RetrieveDiskPartitionInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveDiskPartitionInfoResponseMsg.typecode)
        return response

    # op: ComputeDiskPartitionInfo
    def ComputeDiskPartitionInfo(self, request, **kw):
        if isinstance(request, ComputeDiskPartitionInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ComputeDiskPartitionInfoResponseMsg.typecode)
        return response

    # op: ComputeDiskPartitionInfoForResize
    def ComputeDiskPartitionInfoForResize(self, request, **kw):
        if isinstance(request, ComputeDiskPartitionInfoForResizeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ComputeDiskPartitionInfoForResizeResponseMsg.typecode)
        return response

    # op: UpdateDiskPartitions
    def UpdateDiskPartitions(self, request, **kw):
        if isinstance(request, UpdateDiskPartitionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDiskPartitionsResponseMsg.typecode)
        return response

    # op: FormatVmfs
    def FormatVmfs(self, request, **kw):
        if isinstance(request, FormatVmfsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FormatVmfsResponseMsg.typecode)
        return response

    # op: MountVmfsVolume
    def MountVmfsVolume(self, request, **kw):
        if isinstance(request, MountVmfsVolumeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MountVmfsVolumeResponseMsg.typecode)
        return response

    # op: UnmountVmfsVolume
    def UnmountVmfsVolume(self, request, **kw):
        if isinstance(request, UnmountVmfsVolumeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UnmountVmfsVolumeResponseMsg.typecode)
        return response

    # op: DeleteVmfsVolumeState
    def DeleteVmfsVolumeState(self, request, **kw):
        if isinstance(request, DeleteVmfsVolumeStateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteVmfsVolumeStateResponseMsg.typecode)
        return response

    # op: RescanVmfs
    def RescanVmfs(self, request, **kw):
        if isinstance(request, RescanVmfsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanVmfsResponseMsg.typecode)
        return response

    # op: AttachVmfsExtent
    def AttachVmfsExtent(self, request, **kw):
        if isinstance(request, AttachVmfsExtentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AttachVmfsExtentResponseMsg.typecode)
        return response

    # op: ExpandVmfsExtent
    def ExpandVmfsExtent(self, request, **kw):
        if isinstance(request, ExpandVmfsExtentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExpandVmfsExtentResponseMsg.typecode)
        return response

    # op: UpgradeVmfs
    def UpgradeVmfs(self, request, **kw):
        if isinstance(request, UpgradeVmfsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVmfsResponseMsg.typecode)
        return response

    # op: UpgradeVmLayout
    def UpgradeVmLayout(self, request, **kw):
        if isinstance(request, UpgradeVmLayoutRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVmLayoutResponseMsg.typecode)
        return response

    # op: QueryUnresolvedVmfsVolume
    def QueryUnresolvedVmfsVolume(self, request, **kw):
        if isinstance(request, QueryUnresolvedVmfsVolumeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryUnresolvedVmfsVolumeResponseMsg.typecode)
        return response

    # op: ResolveMultipleUnresolvedVmfsVolumes
    def ResolveMultipleUnresolvedVmfsVolumes(self, request, **kw):
        if isinstance(request, ResolveMultipleUnresolvedVmfsVolumesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResolveMultipleUnresolvedVmfsVolumesResponseMsg.typecode)
        return response

    # op: UnmountForceMountedVmfsVolume
    def UnmountForceMountedVmfsVolume(self, request, **kw):
        if isinstance(request, UnmountForceMountedVmfsVolumeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UnmountForceMountedVmfsVolumeResponseMsg.typecode)
        return response

    # op: RescanHba
    def RescanHba(self, request, **kw):
        if isinstance(request, RescanHbaRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanHbaResponseMsg.typecode)
        return response

    # op: RescanAllHba
    def RescanAllHba(self, request, **kw):
        if isinstance(request, RescanAllHbaRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanAllHbaResponseMsg.typecode)
        return response

    # op: UpdateSoftwareInternetScsiEnabled
    def UpdateSoftwareInternetScsiEnabled(self, request, **kw):
        if isinstance(request, UpdateSoftwareInternetScsiEnabledRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateSoftwareInternetScsiEnabledResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiDiscoveryProperties
    def UpdateInternetScsiDiscoveryProperties(self, request, **kw):
        if isinstance(request, UpdateInternetScsiDiscoveryPropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiDiscoveryPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiAuthenticationProperties
    def UpdateInternetScsiAuthenticationProperties(self, request, **kw):
        if isinstance(request, UpdateInternetScsiAuthenticationPropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiAuthenticationPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiDigestProperties
    def UpdateInternetScsiDigestProperties(self, request, **kw):
        if isinstance(request, UpdateInternetScsiDigestPropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiDigestPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiAdvancedOptions
    def UpdateInternetScsiAdvancedOptions(self, request, **kw):
        if isinstance(request, UpdateInternetScsiAdvancedOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiAdvancedOptionsResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiIPProperties
    def UpdateInternetScsiIPProperties(self, request, **kw):
        if isinstance(request, UpdateInternetScsiIPPropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiIPPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiName
    def UpdateInternetScsiName(self, request, **kw):
        if isinstance(request, UpdateInternetScsiNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiNameResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiAlias
    def UpdateInternetScsiAlias(self, request, **kw):
        if isinstance(request, UpdateInternetScsiAliasRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiAliasResponseMsg.typecode)
        return response

    # op: AddInternetScsiSendTargets
    def AddInternetScsiSendTargets(self, request, **kw):
        if isinstance(request, AddInternetScsiSendTargetsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddInternetScsiSendTargetsResponseMsg.typecode)
        return response

    # op: RemoveInternetScsiSendTargets
    def RemoveInternetScsiSendTargets(self, request, **kw):
        if isinstance(request, RemoveInternetScsiSendTargetsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveInternetScsiSendTargetsResponseMsg.typecode)
        return response

    # op: AddInternetScsiStaticTargets
    def AddInternetScsiStaticTargets(self, request, **kw):
        if isinstance(request, AddInternetScsiStaticTargetsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AddInternetScsiStaticTargetsResponseMsg.typecode)
        return response

    # op: RemoveInternetScsiStaticTargets
    def RemoveInternetScsiStaticTargets(self, request, **kw):
        if isinstance(request, RemoveInternetScsiStaticTargetsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveInternetScsiStaticTargetsResponseMsg.typecode)
        return response

    # op: EnableMultipathPath
    def EnableMultipathPath(self, request, **kw):
        if isinstance(request, EnableMultipathPathRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableMultipathPathResponseMsg.typecode)
        return response

    # op: DisableMultipathPath
    def DisableMultipathPath(self, request, **kw):
        if isinstance(request, DisableMultipathPathRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableMultipathPathResponseMsg.typecode)
        return response

    # op: SetMultipathLunPolicy
    def SetMultipathLunPolicy(self, request, **kw):
        if isinstance(request, SetMultipathLunPolicyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SetMultipathLunPolicyResponseMsg.typecode)
        return response

    # op: QueryPathSelectionPolicyOptions
    def QueryPathSelectionPolicyOptions(self, request, **kw):
        if isinstance(request, QueryPathSelectionPolicyOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPathSelectionPolicyOptionsResponseMsg.typecode)
        return response

    # op: QueryStorageArrayTypePolicyOptions
    def QueryStorageArrayTypePolicyOptions(self, request, **kw):
        if isinstance(request, QueryStorageArrayTypePolicyOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryStorageArrayTypePolicyOptionsResponseMsg.typecode)
        return response

    # op: UpdateScsiLunDisplayName
    def UpdateScsiLunDisplayName(self, request, **kw):
        if isinstance(request, UpdateScsiLunDisplayNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateScsiLunDisplayNameResponseMsg.typecode)
        return response

    # op: DetachScsiLun
    def DetachScsiLun(self, request, **kw):
        if isinstance(request, DetachScsiLunRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DetachScsiLunResponseMsg.typecode)
        return response

    # op: DeleteScsiLunState
    def DeleteScsiLunState(self, request, **kw):
        if isinstance(request, DeleteScsiLunStateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteScsiLunStateResponseMsg.typecode)
        return response

    # op: AttachScsiLun
    def AttachScsiLun(self, request, **kw):
        if isinstance(request, AttachScsiLunRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AttachScsiLunResponseMsg.typecode)
        return response

    # op: RefreshStorageSystem
    def RefreshStorageSystem(self, request, **kw):
        if isinstance(request, RefreshStorageSystemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshStorageSystemResponseMsg.typecode)
        return response

    # op: DiscoverFcoeHbas
    def DiscoverFcoeHbas(self, request, **kw):
        if isinstance(request, DiscoverFcoeHbasRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DiscoverFcoeHbasResponseMsg.typecode)
        return response

    # op: MarkForRemoval
    def MarkForRemoval(self, request, **kw):
        if isinstance(request, MarkForRemovalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MarkForRemovalResponseMsg.typecode)
        return response

    # op: UpdateIpConfig
    def UpdateIpConfig(self, request, **kw):
        if isinstance(request, UpdateIpConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpConfigResponseMsg.typecode)
        return response

    # op: SelectVnic
    def SelectVnic(self, request, **kw):
        if isinstance(request, SelectVnicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SelectVnicResponseMsg.typecode)
        return response

    # op: DeselectVnic
    def DeselectVnic(self, request, **kw):
        if isinstance(request, DeselectVnicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeselectVnicResponseMsg.typecode)
        return response

    # op: QueryNetConfig
    def QueryNetConfig(self, request, **kw):
        if isinstance(request, QueryNetConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryNetConfigResponseMsg.typecode)
        return response

    # op: SelectVnicForNicType
    def SelectVnicForNicType(self, request, **kw):
        if isinstance(request, SelectVnicForNicTypeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(SelectVnicForNicTypeResponseMsg.typecode)
        return response

    # op: DeselectVnicForNicType
    def DeselectVnicForNicType(self, request, **kw):
        if isinstance(request, DeselectVnicForNicTypeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeselectVnicForNicTypeResponseMsg.typecode)
        return response

    # op: QueryOptions
    def QueryOptions(self, request, **kw):
        if isinstance(request, QueryOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryOptionsResponseMsg.typecode)
        return response

    # op: UpdateOptions
    def UpdateOptions(self, request, **kw):
        if isinstance(request, UpdateOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateOptionsResponseMsg.typecode)
        return response

    # op: CheckCompliance_Task
    def CheckCompliance_Task(self, request, **kw):
        if isinstance(request, CheckCompliance_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCompliance_TaskResponseMsg.typecode)
        return response

    # op: QueryComplianceStatus
    def QueryComplianceStatus(self, request, **kw):
        if isinstance(request, QueryComplianceStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryComplianceStatusResponseMsg.typecode)
        return response

    # op: ClearComplianceStatus
    def ClearComplianceStatus(self, request, **kw):
        if isinstance(request, ClearComplianceStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ClearComplianceStatusResponseMsg.typecode)
        return response

    # op: QueryExpressionMetadata
    def QueryExpressionMetadata(self, request, **kw):
        if isinstance(request, QueryExpressionMetadataRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryExpressionMetadataResponseMsg.typecode)
        return response

    # op: RetrieveDescription
    def RetrieveDescription(self, request, **kw):
        if isinstance(request, RetrieveDescriptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveDescriptionResponseMsg.typecode)
        return response

    # op: DestroyProfile
    def DestroyProfile(self, request, **kw):
        if isinstance(request, DestroyProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyProfileResponseMsg.typecode)
        return response

    # op: AssociateProfile
    def AssociateProfile(self, request, **kw):
        if isinstance(request, AssociateProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AssociateProfileResponseMsg.typecode)
        return response

    # op: DissociateProfile
    def DissociateProfile(self, request, **kw):
        if isinstance(request, DissociateProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DissociateProfileResponseMsg.typecode)
        return response

    # op: CheckProfileCompliance_Task
    def CheckProfileCompliance_Task(self, request, **kw):
        if isinstance(request, CheckProfileCompliance_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckProfileCompliance_TaskResponseMsg.typecode)
        return response

    # op: ExportProfile
    def ExportProfile(self, request, **kw):
        if isinstance(request, ExportProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExportProfileResponseMsg.typecode)
        return response

    # op: CreateProfile
    def CreateProfile(self, request, **kw):
        if isinstance(request, CreateProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateProfileResponseMsg.typecode)
        return response

    # op: QueryPolicyMetadata
    def QueryPolicyMetadata(self, request, **kw):
        if isinstance(request, QueryPolicyMetadataRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPolicyMetadataResponseMsg.typecode)
        return response

    # op: FindAssociatedProfile
    def FindAssociatedProfile(self, request, **kw):
        if isinstance(request, FindAssociatedProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(FindAssociatedProfileResponseMsg.typecode)
        return response

    # op: UpdateClusterProfile
    def UpdateClusterProfile(self, request, **kw):
        if isinstance(request, UpdateClusterProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateClusterProfileResponseMsg.typecode)
        return response

    # op: UpdateReferenceHost
    def UpdateReferenceHost(self, request, **kw):
        if isinstance(request, UpdateReferenceHostRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateReferenceHostResponseMsg.typecode)
        return response

    # op: UpdateHostProfile
    def UpdateHostProfile(self, request, **kw):
        if isinstance(request, UpdateHostProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateHostProfileResponseMsg.typecode)
        return response

    # op: ExecuteHostProfile
    def ExecuteHostProfile(self, request, **kw):
        if isinstance(request, ExecuteHostProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExecuteHostProfileResponseMsg.typecode)
        return response

    # op: ApplyHostConfig_Task
    def ApplyHostConfig_Task(self, request, **kw):
        if isinstance(request, ApplyHostConfig_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyHostConfig_TaskResponseMsg.typecode)
        return response

    # op: GenerateConfigTaskList
    def GenerateConfigTaskList(self, request, **kw):
        if isinstance(request, GenerateConfigTaskListRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(GenerateConfigTaskListResponseMsg.typecode)
        return response

    # op: QueryHostProfileMetadata
    def QueryHostProfileMetadata(self, request, **kw):
        if isinstance(request, QueryHostProfileMetadataRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryHostProfileMetadataResponseMsg.typecode)
        return response

    # op: QueryProfileStructure
    def QueryProfileStructure(self, request, **kw):
        if isinstance(request, QueryProfileStructureRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryProfileStructureResponseMsg.typecode)
        return response

    # op: CreateDefaultProfile
    def CreateDefaultProfile(self, request, **kw):
        if isinstance(request, CreateDefaultProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDefaultProfileResponseMsg.typecode)
        return response

    # op: UpdateAnswerFile_Task
    def UpdateAnswerFile_Task(self, request, **kw):
        if isinstance(request, UpdateAnswerFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateAnswerFile_TaskResponseMsg.typecode)
        return response

    # op: RetrieveAnswerFile
    def RetrieveAnswerFile(self, request, **kw):
        if isinstance(request, RetrieveAnswerFileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveAnswerFileResponseMsg.typecode)
        return response

    # op: RetrieveAnswerFileForProfile
    def RetrieveAnswerFileForProfile(self, request, **kw):
        if isinstance(request, RetrieveAnswerFileForProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveAnswerFileForProfileResponseMsg.typecode)
        return response

    # op: ExportAnswerFile_Task
    def ExportAnswerFile_Task(self, request, **kw):
        if isinstance(request, ExportAnswerFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ExportAnswerFile_TaskResponseMsg.typecode)
        return response

    # op: CheckAnswerFileStatus_Task
    def CheckAnswerFileStatus_Task(self, request, **kw):
        if isinstance(request, CheckAnswerFileStatus_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckAnswerFileStatus_TaskResponseMsg.typecode)
        return response

    # op: QueryAnswerFileStatus
    def QueryAnswerFileStatus(self, request, **kw):
        if isinstance(request, QueryAnswerFileStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAnswerFileStatusResponseMsg.typecode)
        return response

    # op: RemoveScheduledTask
    def RemoveScheduledTask(self, request, **kw):
        if isinstance(request, RemoveScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveScheduledTaskResponseMsg.typecode)
        return response

    # op: ReconfigureScheduledTask
    def ReconfigureScheduledTask(self, request, **kw):
        if isinstance(request, ReconfigureScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureScheduledTaskResponseMsg.typecode)
        return response

    # op: RunScheduledTask
    def RunScheduledTask(self, request, **kw):
        if isinstance(request, RunScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RunScheduledTaskResponseMsg.typecode)
        return response

    # op: CreateScheduledTask
    def CreateScheduledTask(self, request, **kw):
        if isinstance(request, CreateScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateScheduledTaskResponseMsg.typecode)
        return response

    # op: RetrieveEntityScheduledTask
    def RetrieveEntityScheduledTask(self, request, **kw):
        if isinstance(request, RetrieveEntityScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveEntityScheduledTaskResponseMsg.typecode)
        return response

    # op: CreateObjectScheduledTask
    def CreateObjectScheduledTask(self, request, **kw):
        if isinstance(request, CreateObjectScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateObjectScheduledTaskResponseMsg.typecode)
        return response

    # op: RetrieveObjectScheduledTask
    def RetrieveObjectScheduledTask(self, request, **kw):
        if isinstance(request, RetrieveObjectScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveObjectScheduledTaskResponseMsg.typecode)
        return response

    # op: OpenInventoryViewFolder
    def OpenInventoryViewFolder(self, request, **kw):
        if isinstance(request, OpenInventoryViewFolderRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(OpenInventoryViewFolderResponseMsg.typecode)
        return response

    # op: CloseInventoryViewFolder
    def CloseInventoryViewFolder(self, request, **kw):
        if isinstance(request, CloseInventoryViewFolderRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CloseInventoryViewFolderResponseMsg.typecode)
        return response

    # op: ModifyListView
    def ModifyListView(self, request, **kw):
        if isinstance(request, ModifyListViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ModifyListViewResponseMsg.typecode)
        return response

    # op: ResetListView
    def ResetListView(self, request, **kw):
        if isinstance(request, ResetListViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetListViewResponseMsg.typecode)
        return response

    # op: ResetListViewFromView
    def ResetListViewFromView(self, request, **kw):
        if isinstance(request, ResetListViewFromViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetListViewFromViewResponseMsg.typecode)
        return response

    # op: DestroyView
    def DestroyView(self, request, **kw):
        if isinstance(request, DestroyViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyViewResponseMsg.typecode)
        return response

    # op: CreateInventoryView
    def CreateInventoryView(self, request, **kw):
        if isinstance(request, CreateInventoryViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateInventoryViewResponseMsg.typecode)
        return response

    # op: CreateContainerView
    def CreateContainerView(self, request, **kw):
        if isinstance(request, CreateContainerViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateContainerViewResponseMsg.typecode)
        return response

    # op: CreateListView
    def CreateListView(self, request, **kw):
        if isinstance(request, CreateListViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateListViewResponseMsg.typecode)
        return response

    # op: CreateListViewFromView
    def CreateListViewFromView(self, request, **kw):
        if isinstance(request, CreateListViewFromViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateListViewFromViewResponseMsg.typecode)
        return response

    # op: RevertToSnapshot_Task
    def RevertToSnapshot_Task(self, request, **kw):
        if isinstance(request, RevertToSnapshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RevertToSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RemoveSnapshot_Task
    def RemoveSnapshot_Task(self, request, **kw):
        if isinstance(request, RemoveSnapshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RenameSnapshot
    def RenameSnapshot(self, request, **kw):
        if isinstance(request, RenameSnapshotRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameSnapshotResponseMsg.typecode)
        return response

    # op: CheckCompatibility_Task
    def CheckCompatibility_Task(self, request, **kw):
        if isinstance(request, CheckCompatibility_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCompatibility_TaskResponseMsg.typecode)
        return response

    # op: QueryVMotionCompatibilityEx_Task
    def QueryVMotionCompatibilityEx_Task(self, request, **kw):
        if isinstance(request, QueryVMotionCompatibilityEx_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVMotionCompatibilityEx_TaskResponseMsg.typecode)
        return response

    # op: CheckMigrate_Task
    def CheckMigrate_Task(self, request, **kw):
        if isinstance(request, CheckMigrate_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckMigrate_TaskResponseMsg.typecode)
        return response

    # op: CheckRelocate_Task
    def CheckRelocate_Task(self, request, **kw):
        if isinstance(request, CheckRelocate_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckRelocate_TaskResponseMsg.typecode)
        return response

    # op: ValidateCredentialsInGuest
    def ValidateCredentialsInGuest(self, request, **kw):
        if isinstance(request, ValidateCredentialsInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateCredentialsInGuestResponseMsg.typecode)
        return response

    # op: AcquireCredentialsInGuest
    def AcquireCredentialsInGuest(self, request, **kw):
        if isinstance(request, AcquireCredentialsInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireCredentialsInGuestResponseMsg.typecode)
        return response

    # op: ReleaseCredentialsInGuest
    def ReleaseCredentialsInGuest(self, request, **kw):
        if isinstance(request, ReleaseCredentialsInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReleaseCredentialsInGuestResponseMsg.typecode)
        return response

    # op: MakeDirectoryInGuest
    def MakeDirectoryInGuest(self, request, **kw):
        if isinstance(request, MakeDirectoryInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MakeDirectoryInGuestResponseMsg.typecode)
        return response

    # op: DeleteFileInGuest
    def DeleteFileInGuest(self, request, **kw):
        if isinstance(request, DeleteFileInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteFileInGuestResponseMsg.typecode)
        return response

    # op: DeleteDirectoryInGuest
    def DeleteDirectoryInGuest(self, request, **kw):
        if isinstance(request, DeleteDirectoryInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteDirectoryInGuestResponseMsg.typecode)
        return response

    # op: MoveDirectoryInGuest
    def MoveDirectoryInGuest(self, request, **kw):
        if isinstance(request, MoveDirectoryInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveDirectoryInGuestResponseMsg.typecode)
        return response

    # op: MoveFileInGuest
    def MoveFileInGuest(self, request, **kw):
        if isinstance(request, MoveFileInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveFileInGuestResponseMsg.typecode)
        return response

    # op: CreateTemporaryFileInGuest
    def CreateTemporaryFileInGuest(self, request, **kw):
        if isinstance(request, CreateTemporaryFileInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateTemporaryFileInGuestResponseMsg.typecode)
        return response

    # op: CreateTemporaryDirectoryInGuest
    def CreateTemporaryDirectoryInGuest(self, request, **kw):
        if isinstance(request, CreateTemporaryDirectoryInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateTemporaryDirectoryInGuestResponseMsg.typecode)
        return response

    # op: ListFilesInGuest
    def ListFilesInGuest(self, request, **kw):
        if isinstance(request, ListFilesInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ListFilesInGuestResponseMsg.typecode)
        return response

    # op: ChangeFileAttributesInGuest
    def ChangeFileAttributesInGuest(self, request, **kw):
        if isinstance(request, ChangeFileAttributesInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ChangeFileAttributesInGuestResponseMsg.typecode)
        return response

    # op: InitiateFileTransferFromGuest
    def InitiateFileTransferFromGuest(self, request, **kw):
        if isinstance(request, InitiateFileTransferFromGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(InitiateFileTransferFromGuestResponseMsg.typecode)
        return response

    # op: InitiateFileTransferToGuest
    def InitiateFileTransferToGuest(self, request, **kw):
        if isinstance(request, InitiateFileTransferToGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(InitiateFileTransferToGuestResponseMsg.typecode)
        return response

    # op: StartProgramInGuest
    def StartProgramInGuest(self, request, **kw):
        if isinstance(request, StartProgramInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(StartProgramInGuestResponseMsg.typecode)
        return response

    # op: ListProcessesInGuest
    def ListProcessesInGuest(self, request, **kw):
        if isinstance(request, ListProcessesInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ListProcessesInGuestResponseMsg.typecode)
        return response

    # op: TerminateProcessInGuest
    def TerminateProcessInGuest(self, request, **kw):
        if isinstance(request, TerminateProcessInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(TerminateProcessInGuestResponseMsg.typecode)
        return response

    # op: ReadEnvironmentVariableInGuest
    def ReadEnvironmentVariableInGuest(self, request, **kw):
        if isinstance(request, ReadEnvironmentVariableInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.1", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadEnvironmentVariableInGuestResponseMsg.typecode)
        return response

DestroyPropertyFilterRequestMsg = GED("urn:vim25", "DestroyPropertyFilter").pyclass

DestroyPropertyFilterResponseMsg = GED("urn:vim25", "DestroyPropertyFilterResponse").pyclass

CreateFilterRequestMsg = GED("urn:vim25", "CreateFilter").pyclass

CreateFilterResponseMsg = GED("urn:vim25", "CreateFilterResponse").pyclass

RetrievePropertiesRequestMsg = GED("urn:vim25", "RetrieveProperties").pyclass

RetrievePropertiesResponseMsg = GED("urn:vim25", "RetrievePropertiesResponse").pyclass

CheckForUpdatesRequestMsg = GED("urn:vim25", "CheckForUpdates").pyclass

CheckForUpdatesResponseMsg = GED("urn:vim25", "CheckForUpdatesResponse").pyclass

WaitForUpdatesRequestMsg = GED("urn:vim25", "WaitForUpdates").pyclass

WaitForUpdatesResponseMsg = GED("urn:vim25", "WaitForUpdatesResponse").pyclass

CancelWaitForUpdatesRequestMsg = GED("urn:vim25", "CancelWaitForUpdates").pyclass

CancelWaitForUpdatesResponseMsg = GED("urn:vim25", "CancelWaitForUpdatesResponse").pyclass

WaitForUpdatesExRequestMsg = GED("urn:vim25", "WaitForUpdatesEx").pyclass

WaitForUpdatesExResponseMsg = GED("urn:vim25", "WaitForUpdatesExResponse").pyclass

RetrievePropertiesExRequestMsg = GED("urn:vim25", "RetrievePropertiesEx").pyclass

RetrievePropertiesExResponseMsg = GED("urn:vim25", "RetrievePropertiesExResponse").pyclass

ContinueRetrievePropertiesExRequestMsg = GED("urn:vim25", "ContinueRetrievePropertiesEx").pyclass

ContinueRetrievePropertiesExResponseMsg = GED("urn:vim25", "ContinueRetrievePropertiesExResponse").pyclass

CancelRetrievePropertiesExRequestMsg = GED("urn:vim25", "CancelRetrievePropertiesEx").pyclass

CancelRetrievePropertiesExResponseMsg = GED("urn:vim25", "CancelRetrievePropertiesExResponse").pyclass

CreatePropertyCollectorRequestMsg = GED("urn:vim25", "CreatePropertyCollector").pyclass

CreatePropertyCollectorResponseMsg = GED("urn:vim25", "CreatePropertyCollectorResponse").pyclass

DestroyPropertyCollectorRequestMsg = GED("urn:vim25", "DestroyPropertyCollector").pyclass

DestroyPropertyCollectorResponseMsg = GED("urn:vim25", "DestroyPropertyCollectorResponse").pyclass

AddAuthorizationRoleRequestMsg = GED("urn:vim25", "AddAuthorizationRole").pyclass

AddAuthorizationRoleResponseMsg = GED("urn:vim25", "AddAuthorizationRoleResponse").pyclass

RemoveAuthorizationRoleRequestMsg = GED("urn:vim25", "RemoveAuthorizationRole").pyclass

RemoveAuthorizationRoleResponseMsg = GED("urn:vim25", "RemoveAuthorizationRoleResponse").pyclass

UpdateAuthorizationRoleRequestMsg = GED("urn:vim25", "UpdateAuthorizationRole").pyclass

UpdateAuthorizationRoleResponseMsg = GED("urn:vim25", "UpdateAuthorizationRoleResponse").pyclass

MergePermissionsRequestMsg = GED("urn:vim25", "MergePermissions").pyclass

MergePermissionsResponseMsg = GED("urn:vim25", "MergePermissionsResponse").pyclass

RetrieveRolePermissionsRequestMsg = GED("urn:vim25", "RetrieveRolePermissions").pyclass

RetrieveRolePermissionsResponseMsg = GED("urn:vim25", "RetrieveRolePermissionsResponse").pyclass

RetrieveEntityPermissionsRequestMsg = GED("urn:vim25", "RetrieveEntityPermissions").pyclass

RetrieveEntityPermissionsResponseMsg = GED("urn:vim25", "RetrieveEntityPermissionsResponse").pyclass

RetrieveAllPermissionsRequestMsg = GED("urn:vim25", "RetrieveAllPermissions").pyclass

RetrieveAllPermissionsResponseMsg = GED("urn:vim25", "RetrieveAllPermissionsResponse").pyclass

SetEntityPermissionsRequestMsg = GED("urn:vim25", "SetEntityPermissions").pyclass

SetEntityPermissionsResponseMsg = GED("urn:vim25", "SetEntityPermissionsResponse").pyclass

ResetEntityPermissionsRequestMsg = GED("urn:vim25", "ResetEntityPermissions").pyclass

ResetEntityPermissionsResponseMsg = GED("urn:vim25", "ResetEntityPermissionsResponse").pyclass

RemoveEntityPermissionRequestMsg = GED("urn:vim25", "RemoveEntityPermission").pyclass

RemoveEntityPermissionResponseMsg = GED("urn:vim25", "RemoveEntityPermissionResponse").pyclass

HasPrivilegeOnEntityRequestMsg = GED("urn:vim25", "HasPrivilegeOnEntity").pyclass

HasPrivilegeOnEntityResponseMsg = GED("urn:vim25", "HasPrivilegeOnEntityResponse").pyclass

ReconfigureCluster_TaskRequestMsg = GED("urn:vim25", "ReconfigureCluster_Task").pyclass

ReconfigureCluster_TaskResponseMsg = GED("urn:vim25", "ReconfigureCluster_TaskResponse").pyclass

ApplyRecommendationRequestMsg = GED("urn:vim25", "ApplyRecommendation").pyclass

ApplyRecommendationResponseMsg = GED("urn:vim25", "ApplyRecommendationResponse").pyclass

CancelRecommendationRequestMsg = GED("urn:vim25", "CancelRecommendation").pyclass

CancelRecommendationResponseMsg = GED("urn:vim25", "CancelRecommendationResponse").pyclass

RecommendHostsForVmRequestMsg = GED("urn:vim25", "RecommendHostsForVm").pyclass

RecommendHostsForVmResponseMsg = GED("urn:vim25", "RecommendHostsForVmResponse").pyclass

AddHost_TaskRequestMsg = GED("urn:vim25", "AddHost_Task").pyclass

AddHost_TaskResponseMsg = GED("urn:vim25", "AddHost_TaskResponse").pyclass

MoveInto_TaskRequestMsg = GED("urn:vim25", "MoveInto_Task").pyclass

MoveInto_TaskResponseMsg = GED("urn:vim25", "MoveInto_TaskResponse").pyclass

MoveHostInto_TaskRequestMsg = GED("urn:vim25", "MoveHostInto_Task").pyclass

MoveHostInto_TaskResponseMsg = GED("urn:vim25", "MoveHostInto_TaskResponse").pyclass

RefreshRecommendationRequestMsg = GED("urn:vim25", "RefreshRecommendation").pyclass

RefreshRecommendationResponseMsg = GED("urn:vim25", "RefreshRecommendationResponse").pyclass

RetrieveDasAdvancedRuntimeInfoRequestMsg = GED("urn:vim25", "RetrieveDasAdvancedRuntimeInfo").pyclass

RetrieveDasAdvancedRuntimeInfoResponseMsg = GED("urn:vim25", "RetrieveDasAdvancedRuntimeInfoResponse").pyclass

ClusterEnterMaintenanceModeRequestMsg = GED("urn:vim25", "ClusterEnterMaintenanceMode").pyclass

ClusterEnterMaintenanceModeResponseMsg = GED("urn:vim25", "ClusterEnterMaintenanceModeResponse").pyclass

ReconfigureComputeResource_TaskRequestMsg = GED("urn:vim25", "ReconfigureComputeResource_Task").pyclass

ReconfigureComputeResource_TaskResponseMsg = GED("urn:vim25", "ReconfigureComputeResource_TaskResponse").pyclass

AddCustomFieldDefRequestMsg = GED("urn:vim25", "AddCustomFieldDef").pyclass

AddCustomFieldDefResponseMsg = GED("urn:vim25", "AddCustomFieldDefResponse").pyclass

RemoveCustomFieldDefRequestMsg = GED("urn:vim25", "RemoveCustomFieldDef").pyclass

RemoveCustomFieldDefResponseMsg = GED("urn:vim25", "RemoveCustomFieldDefResponse").pyclass

RenameCustomFieldDefRequestMsg = GED("urn:vim25", "RenameCustomFieldDef").pyclass

RenameCustomFieldDefResponseMsg = GED("urn:vim25", "RenameCustomFieldDefResponse").pyclass

SetFieldRequestMsg = GED("urn:vim25", "SetField").pyclass

SetFieldResponseMsg = GED("urn:vim25", "SetFieldResponse").pyclass

DoesCustomizationSpecExistRequestMsg = GED("urn:vim25", "DoesCustomizationSpecExist").pyclass

DoesCustomizationSpecExistResponseMsg = GED("urn:vim25", "DoesCustomizationSpecExistResponse").pyclass

GetCustomizationSpecRequestMsg = GED("urn:vim25", "GetCustomizationSpec").pyclass

GetCustomizationSpecResponseMsg = GED("urn:vim25", "GetCustomizationSpecResponse").pyclass

CreateCustomizationSpecRequestMsg = GED("urn:vim25", "CreateCustomizationSpec").pyclass

CreateCustomizationSpecResponseMsg = GED("urn:vim25", "CreateCustomizationSpecResponse").pyclass

OverwriteCustomizationSpecRequestMsg = GED("urn:vim25", "OverwriteCustomizationSpec").pyclass

OverwriteCustomizationSpecResponseMsg = GED("urn:vim25", "OverwriteCustomizationSpecResponse").pyclass

DeleteCustomizationSpecRequestMsg = GED("urn:vim25", "DeleteCustomizationSpec").pyclass

DeleteCustomizationSpecResponseMsg = GED("urn:vim25", "DeleteCustomizationSpecResponse").pyclass

DuplicateCustomizationSpecRequestMsg = GED("urn:vim25", "DuplicateCustomizationSpec").pyclass

DuplicateCustomizationSpecResponseMsg = GED("urn:vim25", "DuplicateCustomizationSpecResponse").pyclass

RenameCustomizationSpecRequestMsg = GED("urn:vim25", "RenameCustomizationSpec").pyclass

RenameCustomizationSpecResponseMsg = GED("urn:vim25", "RenameCustomizationSpecResponse").pyclass

CustomizationSpecItemToXmlRequestMsg = GED("urn:vim25", "CustomizationSpecItemToXml").pyclass

CustomizationSpecItemToXmlResponseMsg = GED("urn:vim25", "CustomizationSpecItemToXmlResponse").pyclass

XmlToCustomizationSpecItemRequestMsg = GED("urn:vim25", "XmlToCustomizationSpecItem").pyclass

XmlToCustomizationSpecItemResponseMsg = GED("urn:vim25", "XmlToCustomizationSpecItemResponse").pyclass

CheckCustomizationResourcesRequestMsg = GED("urn:vim25", "CheckCustomizationResources").pyclass

CheckCustomizationResourcesResponseMsg = GED("urn:vim25", "CheckCustomizationResourcesResponse").pyclass

QueryConnectionInfoRequestMsg = GED("urn:vim25", "QueryConnectionInfo").pyclass

QueryConnectionInfoResponseMsg = GED("urn:vim25", "QueryConnectionInfoResponse").pyclass

PowerOnMultiVM_TaskRequestMsg = GED("urn:vim25", "PowerOnMultiVM_Task").pyclass

PowerOnMultiVM_TaskResponseMsg = GED("urn:vim25", "PowerOnMultiVM_TaskResponse").pyclass

queryDatacenterConfigOptionDescriptorRequestMsg = GED("urn:vim25", "queryDatacenterConfigOptionDescriptor").pyclass

queryDatacenterConfigOptionDescriptorResponseMsg = GED("urn:vim25", "queryDatacenterConfigOptionDescriptorResponse").pyclass

ReconfigureDatacenter_TaskRequestMsg = GED("urn:vim25", "ReconfigureDatacenter_Task").pyclass

ReconfigureDatacenter_TaskResponseMsg = GED("urn:vim25", "ReconfigureDatacenter_TaskResponse").pyclass

RefreshDatastoreRequestMsg = GED("urn:vim25", "RefreshDatastore").pyclass

RefreshDatastoreResponseMsg = GED("urn:vim25", "RefreshDatastoreResponse").pyclass

RefreshDatastoreStorageInfoRequestMsg = GED("urn:vim25", "RefreshDatastoreStorageInfo").pyclass

RefreshDatastoreStorageInfoResponseMsg = GED("urn:vim25", "RefreshDatastoreStorageInfoResponse").pyclass

UpdateVirtualMachineFiles_TaskRequestMsg = GED("urn:vim25", "UpdateVirtualMachineFiles_Task").pyclass

UpdateVirtualMachineFiles_TaskResponseMsg = GED("urn:vim25", "UpdateVirtualMachineFiles_TaskResponse").pyclass

RenameDatastoreRequestMsg = GED("urn:vim25", "RenameDatastore").pyclass

RenameDatastoreResponseMsg = GED("urn:vim25", "RenameDatastoreResponse").pyclass

DestroyDatastoreRequestMsg = GED("urn:vim25", "DestroyDatastore").pyclass

DestroyDatastoreResponseMsg = GED("urn:vim25", "DestroyDatastoreResponse").pyclass

DatastoreEnterMaintenanceModeRequestMsg = GED("urn:vim25", "DatastoreEnterMaintenanceMode").pyclass

DatastoreEnterMaintenanceModeResponseMsg = GED("urn:vim25", "DatastoreEnterMaintenanceModeResponse").pyclass

DatastoreExitMaintenanceMode_TaskRequestMsg = GED("urn:vim25", "DatastoreExitMaintenanceMode_Task").pyclass

DatastoreExitMaintenanceMode_TaskResponseMsg = GED("urn:vim25", "DatastoreExitMaintenanceMode_TaskResponse").pyclass

QueryDescriptionsRequestMsg = GED("urn:vim25", "QueryDescriptions").pyclass

QueryDescriptionsResponseMsg = GED("urn:vim25", "QueryDescriptionsResponse").pyclass

BrowseDiagnosticLogRequestMsg = GED("urn:vim25", "BrowseDiagnosticLog").pyclass

BrowseDiagnosticLogResponseMsg = GED("urn:vim25", "BrowseDiagnosticLogResponse").pyclass

GenerateLogBundles_TaskRequestMsg = GED("urn:vim25", "GenerateLogBundles_Task").pyclass

GenerateLogBundles_TaskResponseMsg = GED("urn:vim25", "GenerateLogBundles_TaskResponse").pyclass

FetchDVPortKeysRequestMsg = GED("urn:vim25", "FetchDVPortKeys").pyclass

FetchDVPortKeysResponseMsg = GED("urn:vim25", "FetchDVPortKeysResponse").pyclass

FetchDVPortsRequestMsg = GED("urn:vim25", "FetchDVPorts").pyclass

FetchDVPortsResponseMsg = GED("urn:vim25", "FetchDVPortsResponse").pyclass

QueryUsedVlanIdInDvsRequestMsg = GED("urn:vim25", "QueryUsedVlanIdInDvs").pyclass

QueryUsedVlanIdInDvsResponseMsg = GED("urn:vim25", "QueryUsedVlanIdInDvsResponse").pyclass

ReconfigureDvs_TaskRequestMsg = GED("urn:vim25", "ReconfigureDvs_Task").pyclass

ReconfigureDvs_TaskResponseMsg = GED("urn:vim25", "ReconfigureDvs_TaskResponse").pyclass

PerformDvsProductSpecOperation_TaskRequestMsg = GED("urn:vim25", "PerformDvsProductSpecOperation_Task").pyclass

PerformDvsProductSpecOperation_TaskResponseMsg = GED("urn:vim25", "PerformDvsProductSpecOperation_TaskResponse").pyclass

MergeDvs_TaskRequestMsg = GED("urn:vim25", "MergeDvs_Task").pyclass

MergeDvs_TaskResponseMsg = GED("urn:vim25", "MergeDvs_TaskResponse").pyclass

AddDVPortgroup_TaskRequestMsg = GED("urn:vim25", "AddDVPortgroup_Task").pyclass

AddDVPortgroup_TaskResponseMsg = GED("urn:vim25", "AddDVPortgroup_TaskResponse").pyclass

MoveDVPort_TaskRequestMsg = GED("urn:vim25", "MoveDVPort_Task").pyclass

MoveDVPort_TaskResponseMsg = GED("urn:vim25", "MoveDVPort_TaskResponse").pyclass

UpdateDvsCapabilityRequestMsg = GED("urn:vim25", "UpdateDvsCapability").pyclass

UpdateDvsCapabilityResponseMsg = GED("urn:vim25", "UpdateDvsCapabilityResponse").pyclass

ReconfigureDVPort_TaskRequestMsg = GED("urn:vim25", "ReconfigureDVPort_Task").pyclass

ReconfigureDVPort_TaskResponseMsg = GED("urn:vim25", "ReconfigureDVPort_TaskResponse").pyclass

RefreshDVPortStateRequestMsg = GED("urn:vim25", "RefreshDVPortState").pyclass

RefreshDVPortStateResponseMsg = GED("urn:vim25", "RefreshDVPortStateResponse").pyclass

RectifyDvsHost_TaskRequestMsg = GED("urn:vim25", "RectifyDvsHost_Task").pyclass

RectifyDvsHost_TaskResponseMsg = GED("urn:vim25", "RectifyDvsHost_TaskResponse").pyclass

UpdateNetworkResourcePoolRequestMsg = GED("urn:vim25", "UpdateNetworkResourcePool").pyclass

UpdateNetworkResourcePoolResponseMsg = GED("urn:vim25", "UpdateNetworkResourcePoolResponse").pyclass

AddNetworkResourcePoolRequestMsg = GED("urn:vim25", "AddNetworkResourcePool").pyclass

AddNetworkResourcePoolResponseMsg = GED("urn:vim25", "AddNetworkResourcePoolResponse").pyclass

RemoveNetworkResourcePoolRequestMsg = GED("urn:vim25", "RemoveNetworkResourcePool").pyclass

RemoveNetworkResourcePoolResponseMsg = GED("urn:vim25", "RemoveNetworkResourcePoolResponse").pyclass

EnableNetworkResourceManagementRequestMsg = GED("urn:vim25", "EnableNetworkResourceManagement").pyclass

EnableNetworkResourceManagementResponseMsg = GED("urn:vim25", "EnableNetworkResourceManagementResponse").pyclass

DVSRollback_TaskRequestMsg = GED("urn:vim25", "DVSRollback_Task").pyclass

DVSRollback_TaskResponseMsg = GED("urn:vim25", "DVSRollback_TaskResponse").pyclass

CreateDVPortgroup_TaskRequestMsg = GED("urn:vim25", "CreateDVPortgroup_Task").pyclass

CreateDVPortgroup_TaskResponseMsg = GED("urn:vim25", "CreateDVPortgroup_TaskResponse").pyclass

UpdateDVSHealthCheckConfig_TaskRequestMsg = GED("urn:vim25", "UpdateDVSHealthCheckConfig_Task").pyclass

UpdateDVSHealthCheckConfig_TaskResponseMsg = GED("urn:vim25", "UpdateDVSHealthCheckConfig_TaskResponse").pyclass

LookupDvPortGroupRequestMsg = GED("urn:vim25", "LookupDvPortGroup").pyclass

LookupDvPortGroupResponseMsg = GED("urn:vim25", "LookupDvPortGroupResponse").pyclass

QueryConfigOptionDescriptorRequestMsg = GED("urn:vim25", "QueryConfigOptionDescriptor").pyclass

QueryConfigOptionDescriptorResponseMsg = GED("urn:vim25", "QueryConfigOptionDescriptorResponse").pyclass

QueryConfigOptionRequestMsg = GED("urn:vim25", "QueryConfigOption").pyclass

QueryConfigOptionResponseMsg = GED("urn:vim25", "QueryConfigOptionResponse").pyclass

QueryConfigTargetRequestMsg = GED("urn:vim25", "QueryConfigTarget").pyclass

QueryConfigTargetResponseMsg = GED("urn:vim25", "QueryConfigTargetResponse").pyclass

QueryTargetCapabilitiesRequestMsg = GED("urn:vim25", "QueryTargetCapabilities").pyclass

QueryTargetCapabilitiesResponseMsg = GED("urn:vim25", "QueryTargetCapabilitiesResponse").pyclass

setCustomValueRequestMsg = GED("urn:vim25", "setCustomValue").pyclass

setCustomValueResponseMsg = GED("urn:vim25", "setCustomValueResponse").pyclass

UnregisterExtensionRequestMsg = GED("urn:vim25", "UnregisterExtension").pyclass

UnregisterExtensionResponseMsg = GED("urn:vim25", "UnregisterExtensionResponse").pyclass

FindExtensionRequestMsg = GED("urn:vim25", "FindExtension").pyclass

FindExtensionResponseMsg = GED("urn:vim25", "FindExtensionResponse").pyclass

RegisterExtensionRequestMsg = GED("urn:vim25", "RegisterExtension").pyclass

RegisterExtensionResponseMsg = GED("urn:vim25", "RegisterExtensionResponse").pyclass

UpdateExtensionRequestMsg = GED("urn:vim25", "UpdateExtension").pyclass

UpdateExtensionResponseMsg = GED("urn:vim25", "UpdateExtensionResponse").pyclass

GetPublicKeyRequestMsg = GED("urn:vim25", "GetPublicKey").pyclass

GetPublicKeyResponseMsg = GED("urn:vim25", "GetPublicKeyResponse").pyclass

SetPublicKeyRequestMsg = GED("urn:vim25", "SetPublicKey").pyclass

SetPublicKeyResponseMsg = GED("urn:vim25", "SetPublicKeyResponse").pyclass

SetExtensionCertificateRequestMsg = GED("urn:vim25", "SetExtensionCertificate").pyclass

SetExtensionCertificateResponseMsg = GED("urn:vim25", "SetExtensionCertificateResponse").pyclass

QueryManagedByRequestMsg = GED("urn:vim25", "QueryManagedBy").pyclass

QueryManagedByResponseMsg = GED("urn:vim25", "QueryManagedByResponse").pyclass

QueryExtensionIpAllocationUsageRequestMsg = GED("urn:vim25", "QueryExtensionIpAllocationUsage").pyclass

QueryExtensionIpAllocationUsageResponseMsg = GED("urn:vim25", "QueryExtensionIpAllocationUsageResponse").pyclass

MoveDatastoreFile_TaskRequestMsg = GED("urn:vim25", "MoveDatastoreFile_Task").pyclass

MoveDatastoreFile_TaskResponseMsg = GED("urn:vim25", "MoveDatastoreFile_TaskResponse").pyclass

CopyDatastoreFile_TaskRequestMsg = GED("urn:vim25", "CopyDatastoreFile_Task").pyclass

CopyDatastoreFile_TaskResponseMsg = GED("urn:vim25", "CopyDatastoreFile_TaskResponse").pyclass

DeleteDatastoreFile_TaskRequestMsg = GED("urn:vim25", "DeleteDatastoreFile_Task").pyclass

DeleteDatastoreFile_TaskResponseMsg = GED("urn:vim25", "DeleteDatastoreFile_TaskResponse").pyclass

MakeDirectoryRequestMsg = GED("urn:vim25", "MakeDirectory").pyclass

MakeDirectoryResponseMsg = GED("urn:vim25", "MakeDirectoryResponse").pyclass

ChangeOwnerRequestMsg = GED("urn:vim25", "ChangeOwner").pyclass

ChangeOwnerResponseMsg = GED("urn:vim25", "ChangeOwnerResponse").pyclass

CreateFolderRequestMsg = GED("urn:vim25", "CreateFolder").pyclass

CreateFolderResponseMsg = GED("urn:vim25", "CreateFolderResponse").pyclass

MoveIntoFolder_TaskRequestMsg = GED("urn:vim25", "MoveIntoFolder_Task").pyclass

MoveIntoFolder_TaskResponseMsg = GED("urn:vim25", "MoveIntoFolder_TaskResponse").pyclass

CreateVM_TaskRequestMsg = GED("urn:vim25", "CreateVM_Task").pyclass

CreateVM_TaskResponseMsg = GED("urn:vim25", "CreateVM_TaskResponse").pyclass

RegisterVM_TaskRequestMsg = GED("urn:vim25", "RegisterVM_Task").pyclass

RegisterVM_TaskResponseMsg = GED("urn:vim25", "RegisterVM_TaskResponse").pyclass

CreateClusterRequestMsg = GED("urn:vim25", "CreateCluster").pyclass

CreateClusterResponseMsg = GED("urn:vim25", "CreateClusterResponse").pyclass

CreateClusterExRequestMsg = GED("urn:vim25", "CreateClusterEx").pyclass

CreateClusterExResponseMsg = GED("urn:vim25", "CreateClusterExResponse").pyclass

AddStandaloneHost_TaskRequestMsg = GED("urn:vim25", "AddStandaloneHost_Task").pyclass

AddStandaloneHost_TaskResponseMsg = GED("urn:vim25", "AddStandaloneHost_TaskResponse").pyclass

CreateDatacenterRequestMsg = GED("urn:vim25", "CreateDatacenter").pyclass

CreateDatacenterResponseMsg = GED("urn:vim25", "CreateDatacenterResponse").pyclass

UnregisterAndDestroy_TaskRequestMsg = GED("urn:vim25", "UnregisterAndDestroy_Task").pyclass

UnregisterAndDestroy_TaskResponseMsg = GED("urn:vim25", "UnregisterAndDestroy_TaskResponse").pyclass

CreateDVS_TaskRequestMsg = GED("urn:vim25", "CreateDVS_Task").pyclass

CreateDVS_TaskResponseMsg = GED("urn:vim25", "CreateDVS_TaskResponse").pyclass

CreateStoragePodRequestMsg = GED("urn:vim25", "CreateStoragePod").pyclass

CreateStoragePodResponseMsg = GED("urn:vim25", "CreateStoragePodResponse").pyclass

SetCollectorPageSizeRequestMsg = GED("urn:vim25", "SetCollectorPageSize").pyclass

SetCollectorPageSizeResponseMsg = GED("urn:vim25", "SetCollectorPageSizeResponse").pyclass

RewindCollectorRequestMsg = GED("urn:vim25", "RewindCollector").pyclass

RewindCollectorResponseMsg = GED("urn:vim25", "RewindCollectorResponse").pyclass

ResetCollectorRequestMsg = GED("urn:vim25", "ResetCollector").pyclass

ResetCollectorResponseMsg = GED("urn:vim25", "ResetCollectorResponse").pyclass

DestroyCollectorRequestMsg = GED("urn:vim25", "DestroyCollector").pyclass

DestroyCollectorResponseMsg = GED("urn:vim25", "DestroyCollectorResponse").pyclass

QueryTpmAttestationReportRequestMsg = GED("urn:vim25", "QueryTpmAttestationReport").pyclass

QueryTpmAttestationReportResponseMsg = GED("urn:vim25", "QueryTpmAttestationReportResponse").pyclass

QueryHostConnectionInfoRequestMsg = GED("urn:vim25", "QueryHostConnectionInfo").pyclass

QueryHostConnectionInfoResponseMsg = GED("urn:vim25", "QueryHostConnectionInfoResponse").pyclass

UpdateSystemResourcesRequestMsg = GED("urn:vim25", "UpdateSystemResources").pyclass

UpdateSystemResourcesResponseMsg = GED("urn:vim25", "UpdateSystemResourcesResponse").pyclass

UpdateSystemSwapConfigurationRequestMsg = GED("urn:vim25", "UpdateSystemSwapConfiguration").pyclass

UpdateSystemSwapConfigurationResponseMsg = GED("urn:vim25", "UpdateSystemSwapConfigurationResponse").pyclass

ReconnectHost_TaskRequestMsg = GED("urn:vim25", "ReconnectHost_Task").pyclass

ReconnectHost_TaskResponseMsg = GED("urn:vim25", "ReconnectHost_TaskResponse").pyclass

DisconnectHost_TaskRequestMsg = GED("urn:vim25", "DisconnectHost_Task").pyclass

DisconnectHost_TaskResponseMsg = GED("urn:vim25", "DisconnectHost_TaskResponse").pyclass

EnterMaintenanceMode_TaskRequestMsg = GED("urn:vim25", "EnterMaintenanceMode_Task").pyclass

EnterMaintenanceMode_TaskResponseMsg = GED("urn:vim25", "EnterMaintenanceMode_TaskResponse").pyclass

ExitMaintenanceMode_TaskRequestMsg = GED("urn:vim25", "ExitMaintenanceMode_Task").pyclass

ExitMaintenanceMode_TaskResponseMsg = GED("urn:vim25", "ExitMaintenanceMode_TaskResponse").pyclass

RebootHost_TaskRequestMsg = GED("urn:vim25", "RebootHost_Task").pyclass

RebootHost_TaskResponseMsg = GED("urn:vim25", "RebootHost_TaskResponse").pyclass

ShutdownHost_TaskRequestMsg = GED("urn:vim25", "ShutdownHost_Task").pyclass

ShutdownHost_TaskResponseMsg = GED("urn:vim25", "ShutdownHost_TaskResponse").pyclass

PowerDownHostToStandBy_TaskRequestMsg = GED("urn:vim25", "PowerDownHostToStandBy_Task").pyclass

PowerDownHostToStandBy_TaskResponseMsg = GED("urn:vim25", "PowerDownHostToStandBy_TaskResponse").pyclass

PowerUpHostFromStandBy_TaskRequestMsg = GED("urn:vim25", "PowerUpHostFromStandBy_Task").pyclass

PowerUpHostFromStandBy_TaskResponseMsg = GED("urn:vim25", "PowerUpHostFromStandBy_TaskResponse").pyclass

QueryMemoryOverheadRequestMsg = GED("urn:vim25", "QueryMemoryOverhead").pyclass

QueryMemoryOverheadResponseMsg = GED("urn:vim25", "QueryMemoryOverheadResponse").pyclass

QueryMemoryOverheadExRequestMsg = GED("urn:vim25", "QueryMemoryOverheadEx").pyclass

QueryMemoryOverheadExResponseMsg = GED("urn:vim25", "QueryMemoryOverheadExResponse").pyclass

ReconfigureHostForDAS_TaskRequestMsg = GED("urn:vim25", "ReconfigureHostForDAS_Task").pyclass

ReconfigureHostForDAS_TaskResponseMsg = GED("urn:vim25", "ReconfigureHostForDAS_TaskResponse").pyclass

UpdateFlagsRequestMsg = GED("urn:vim25", "UpdateFlags").pyclass

UpdateFlagsResponseMsg = GED("urn:vim25", "UpdateFlagsResponse").pyclass

EnterLockdownModeRequestMsg = GED("urn:vim25", "EnterLockdownMode").pyclass

EnterLockdownModeResponseMsg = GED("urn:vim25", "EnterLockdownModeResponse").pyclass

ExitLockdownModeRequestMsg = GED("urn:vim25", "ExitLockdownMode").pyclass

ExitLockdownModeResponseMsg = GED("urn:vim25", "ExitLockdownModeResponse").pyclass

AcquireCimServicesTicketRequestMsg = GED("urn:vim25", "AcquireCimServicesTicket").pyclass

AcquireCimServicesTicketResponseMsg = GED("urn:vim25", "AcquireCimServicesTicketResponse").pyclass

UpdateIpmiRequestMsg = GED("urn:vim25", "UpdateIpmi").pyclass

UpdateIpmiResponseMsg = GED("urn:vim25", "UpdateIpmiResponse").pyclass

RetrieveHardwareUptimeRequestMsg = GED("urn:vim25", "RetrieveHardwareUptime").pyclass

RetrieveHardwareUptimeResponseMsg = GED("urn:vim25", "RetrieveHardwareUptimeResponse").pyclass

HttpNfcLeaseGetManifestRequestMsg = GED("urn:vim25", "HttpNfcLeaseGetManifest").pyclass

HttpNfcLeaseGetManifestResponseMsg = GED("urn:vim25", "HttpNfcLeaseGetManifestResponse").pyclass

HttpNfcLeaseCompleteRequestMsg = GED("urn:vim25", "HttpNfcLeaseComplete").pyclass

HttpNfcLeaseCompleteResponseMsg = GED("urn:vim25", "HttpNfcLeaseCompleteResponse").pyclass

HttpNfcLeaseAbortRequestMsg = GED("urn:vim25", "HttpNfcLeaseAbort").pyclass

HttpNfcLeaseAbortResponseMsg = GED("urn:vim25", "HttpNfcLeaseAbortResponse").pyclass

HttpNfcLeaseProgressRequestMsg = GED("urn:vim25", "HttpNfcLeaseProgress").pyclass

HttpNfcLeaseProgressResponseMsg = GED("urn:vim25", "HttpNfcLeaseProgressResponse").pyclass

QueryIpPoolsRequestMsg = GED("urn:vim25", "QueryIpPools").pyclass

QueryIpPoolsResponseMsg = GED("urn:vim25", "QueryIpPoolsResponse").pyclass

CreateIpPoolRequestMsg = GED("urn:vim25", "CreateIpPool").pyclass

CreateIpPoolResponseMsg = GED("urn:vim25", "CreateIpPoolResponse").pyclass

UpdateIpPoolRequestMsg = GED("urn:vim25", "UpdateIpPool").pyclass

UpdateIpPoolResponseMsg = GED("urn:vim25", "UpdateIpPoolResponse").pyclass

DestroyIpPoolRequestMsg = GED("urn:vim25", "DestroyIpPool").pyclass

DestroyIpPoolResponseMsg = GED("urn:vim25", "DestroyIpPoolResponse").pyclass

AllocateIpv4AddressRequestMsg = GED("urn:vim25", "AllocateIpv4Address").pyclass

AllocateIpv4AddressResponseMsg = GED("urn:vim25", "AllocateIpv4AddressResponse").pyclass

AllocateIpv6AddressRequestMsg = GED("urn:vim25", "AllocateIpv6Address").pyclass

AllocateIpv6AddressResponseMsg = GED("urn:vim25", "AllocateIpv6AddressResponse").pyclass

ReleaseIpAllocationRequestMsg = GED("urn:vim25", "ReleaseIpAllocation").pyclass

ReleaseIpAllocationResponseMsg = GED("urn:vim25", "ReleaseIpAllocationResponse").pyclass

QueryIPAllocationsRequestMsg = GED("urn:vim25", "QueryIPAllocations").pyclass

QueryIPAllocationsResponseMsg = GED("urn:vim25", "QueryIPAllocationsResponse").pyclass

UpdateAssignedLicenseRequestMsg = GED("urn:vim25", "UpdateAssignedLicense").pyclass

UpdateAssignedLicenseResponseMsg = GED("urn:vim25", "UpdateAssignedLicenseResponse").pyclass

RemoveAssignedLicenseRequestMsg = GED("urn:vim25", "RemoveAssignedLicense").pyclass

RemoveAssignedLicenseResponseMsg = GED("urn:vim25", "RemoveAssignedLicenseResponse").pyclass

QueryAssignedLicensesRequestMsg = GED("urn:vim25", "QueryAssignedLicenses").pyclass

QueryAssignedLicensesResponseMsg = GED("urn:vim25", "QueryAssignedLicensesResponse").pyclass

QuerySupportedFeaturesRequestMsg = GED("urn:vim25", "QuerySupportedFeatures").pyclass

QuerySupportedFeaturesResponseMsg = GED("urn:vim25", "QuerySupportedFeaturesResponse").pyclass

QueryLicenseSourceAvailabilityRequestMsg = GED("urn:vim25", "QueryLicenseSourceAvailability").pyclass

QueryLicenseSourceAvailabilityResponseMsg = GED("urn:vim25", "QueryLicenseSourceAvailabilityResponse").pyclass

QueryLicenseUsageRequestMsg = GED("urn:vim25", "QueryLicenseUsage").pyclass

QueryLicenseUsageResponseMsg = GED("urn:vim25", "QueryLicenseUsageResponse").pyclass

SetLicenseEditionRequestMsg = GED("urn:vim25", "SetLicenseEdition").pyclass

SetLicenseEditionResponseMsg = GED("urn:vim25", "SetLicenseEditionResponse").pyclass

CheckLicenseFeatureRequestMsg = GED("urn:vim25", "CheckLicenseFeature").pyclass

CheckLicenseFeatureResponseMsg = GED("urn:vim25", "CheckLicenseFeatureResponse").pyclass

EnableFeatureRequestMsg = GED("urn:vim25", "EnableFeature").pyclass

EnableFeatureResponseMsg = GED("urn:vim25", "EnableFeatureResponse").pyclass

DisableFeatureRequestMsg = GED("urn:vim25", "DisableFeature").pyclass

DisableFeatureResponseMsg = GED("urn:vim25", "DisableFeatureResponse").pyclass

ConfigureLicenseSourceRequestMsg = GED("urn:vim25", "ConfigureLicenseSource").pyclass

ConfigureLicenseSourceResponseMsg = GED("urn:vim25", "ConfigureLicenseSourceResponse").pyclass

UpdateLicenseRequestMsg = GED("urn:vim25", "UpdateLicense").pyclass

UpdateLicenseResponseMsg = GED("urn:vim25", "UpdateLicenseResponse").pyclass

AddLicenseRequestMsg = GED("urn:vim25", "AddLicense").pyclass

AddLicenseResponseMsg = GED("urn:vim25", "AddLicenseResponse").pyclass

RemoveLicenseRequestMsg = GED("urn:vim25", "RemoveLicense").pyclass

RemoveLicenseResponseMsg = GED("urn:vim25", "RemoveLicenseResponse").pyclass

DecodeLicenseRequestMsg = GED("urn:vim25", "DecodeLicense").pyclass

DecodeLicenseResponseMsg = GED("urn:vim25", "DecodeLicenseResponse").pyclass

UpdateLicenseLabelRequestMsg = GED("urn:vim25", "UpdateLicenseLabel").pyclass

UpdateLicenseLabelResponseMsg = GED("urn:vim25", "UpdateLicenseLabelResponse").pyclass

RemoveLicenseLabelRequestMsg = GED("urn:vim25", "RemoveLicenseLabel").pyclass

RemoveLicenseLabelResponseMsg = GED("urn:vim25", "RemoveLicenseLabelResponse").pyclass

ReloadRequestMsg = GED("urn:vim25", "Reload").pyclass

ReloadResponseMsg = GED("urn:vim25", "ReloadResponse").pyclass

Rename_TaskRequestMsg = GED("urn:vim25", "Rename_Task").pyclass

Rename_TaskResponseMsg = GED("urn:vim25", "Rename_TaskResponse").pyclass

Destroy_TaskRequestMsg = GED("urn:vim25", "Destroy_Task").pyclass

Destroy_TaskResponseMsg = GED("urn:vim25", "Destroy_TaskResponse").pyclass

DestroyNetworkRequestMsg = GED("urn:vim25", "DestroyNetwork").pyclass

DestroyNetworkResponseMsg = GED("urn:vim25", "DestroyNetworkResponse").pyclass

ValidateHostRequestMsg = GED("urn:vim25", "ValidateHost").pyclass

ValidateHostResponseMsg = GED("urn:vim25", "ValidateHostResponse").pyclass

ParseDescriptorRequestMsg = GED("urn:vim25", "ParseDescriptor").pyclass

ParseDescriptorResponseMsg = GED("urn:vim25", "ParseDescriptorResponse").pyclass

CreateImportSpecRequestMsg = GED("urn:vim25", "CreateImportSpec").pyclass

CreateImportSpecResponseMsg = GED("urn:vim25", "CreateImportSpecResponse").pyclass

CreateDescriptorRequestMsg = GED("urn:vim25", "CreateDescriptor").pyclass

CreateDescriptorResponseMsg = GED("urn:vim25", "CreateDescriptorResponse").pyclass

QueryPerfProviderSummaryRequestMsg = GED("urn:vim25", "QueryPerfProviderSummary").pyclass

QueryPerfProviderSummaryResponseMsg = GED("urn:vim25", "QueryPerfProviderSummaryResponse").pyclass

QueryAvailablePerfMetricRequestMsg = GED("urn:vim25", "QueryAvailablePerfMetric").pyclass

QueryAvailablePerfMetricResponseMsg = GED("urn:vim25", "QueryAvailablePerfMetricResponse").pyclass

QueryPerfCounterRequestMsg = GED("urn:vim25", "QueryPerfCounter").pyclass

QueryPerfCounterResponseMsg = GED("urn:vim25", "QueryPerfCounterResponse").pyclass

QueryPerfCounterByLevelRequestMsg = GED("urn:vim25", "QueryPerfCounterByLevel").pyclass

QueryPerfCounterByLevelResponseMsg = GED("urn:vim25", "QueryPerfCounterByLevelResponse").pyclass

QueryPerfRequestMsg = GED("urn:vim25", "QueryPerf").pyclass

QueryPerfResponseMsg = GED("urn:vim25", "QueryPerfResponse").pyclass

QueryPerfCompositeRequestMsg = GED("urn:vim25", "QueryPerfComposite").pyclass

QueryPerfCompositeResponseMsg = GED("urn:vim25", "QueryPerfCompositeResponse").pyclass

CreatePerfIntervalRequestMsg = GED("urn:vim25", "CreatePerfInterval").pyclass

CreatePerfIntervalResponseMsg = GED("urn:vim25", "CreatePerfIntervalResponse").pyclass

RemovePerfIntervalRequestMsg = GED("urn:vim25", "RemovePerfInterval").pyclass

RemovePerfIntervalResponseMsg = GED("urn:vim25", "RemovePerfIntervalResponse").pyclass

UpdatePerfIntervalRequestMsg = GED("urn:vim25", "UpdatePerfInterval").pyclass

UpdatePerfIntervalResponseMsg = GED("urn:vim25", "UpdatePerfIntervalResponse").pyclass

UpdateCounterLevelMappingRequestMsg = GED("urn:vim25", "UpdateCounterLevelMapping").pyclass

UpdateCounterLevelMappingResponseMsg = GED("urn:vim25", "UpdateCounterLevelMappingResponse").pyclass

ResetCounterLevelMappingRequestMsg = GED("urn:vim25", "ResetCounterLevelMapping").pyclass

ResetCounterLevelMappingResponseMsg = GED("urn:vim25", "ResetCounterLevelMappingResponse").pyclass

EstimateDatabaseSizeRequestMsg = GED("urn:vim25", "EstimateDatabaseSize").pyclass

EstimateDatabaseSizeResponseMsg = GED("urn:vim25", "EstimateDatabaseSizeResponse").pyclass

UpdateConfigRequestMsg = GED("urn:vim25", "UpdateConfig").pyclass

UpdateConfigResponseMsg = GED("urn:vim25", "UpdateConfigResponse").pyclass

MoveIntoResourcePoolRequestMsg = GED("urn:vim25", "MoveIntoResourcePool").pyclass

MoveIntoResourcePoolResponseMsg = GED("urn:vim25", "MoveIntoResourcePoolResponse").pyclass

UpdateChildResourceConfigurationRequestMsg = GED("urn:vim25", "UpdateChildResourceConfiguration").pyclass

UpdateChildResourceConfigurationResponseMsg = GED("urn:vim25", "UpdateChildResourceConfigurationResponse").pyclass

CreateResourcePoolRequestMsg = GED("urn:vim25", "CreateResourcePool").pyclass

CreateResourcePoolResponseMsg = GED("urn:vim25", "CreateResourcePoolResponse").pyclass

DestroyChildrenRequestMsg = GED("urn:vim25", "DestroyChildren").pyclass

DestroyChildrenResponseMsg = GED("urn:vim25", "DestroyChildrenResponse").pyclass

CreateVAppRequestMsg = GED("urn:vim25", "CreateVApp").pyclass

CreateVAppResponseMsg = GED("urn:vim25", "CreateVAppResponse").pyclass

CreateChildVM_TaskRequestMsg = GED("urn:vim25", "CreateChildVM_Task").pyclass

CreateChildVM_TaskResponseMsg = GED("urn:vim25", "CreateChildVM_TaskResponse").pyclass

RegisterChildVM_TaskRequestMsg = GED("urn:vim25", "RegisterChildVM_Task").pyclass

RegisterChildVM_TaskResponseMsg = GED("urn:vim25", "RegisterChildVM_TaskResponse").pyclass

ImportVAppRequestMsg = GED("urn:vim25", "ImportVApp").pyclass

ImportVAppResponseMsg = GED("urn:vim25", "ImportVAppResponse").pyclass

QueryResourceConfigOptionRequestMsg = GED("urn:vim25", "QueryResourceConfigOption").pyclass

QueryResourceConfigOptionResponseMsg = GED("urn:vim25", "QueryResourceConfigOptionResponse").pyclass

RefreshRuntimeRequestMsg = GED("urn:vim25", "RefreshRuntime").pyclass

RefreshRuntimeResponseMsg = GED("urn:vim25", "RefreshRuntimeResponse").pyclass

FindByUuidRequestMsg = GED("urn:vim25", "FindByUuid").pyclass

FindByUuidResponseMsg = GED("urn:vim25", "FindByUuidResponse").pyclass

FindByDatastorePathRequestMsg = GED("urn:vim25", "FindByDatastorePath").pyclass

FindByDatastorePathResponseMsg = GED("urn:vim25", "FindByDatastorePathResponse").pyclass

FindByDnsNameRequestMsg = GED("urn:vim25", "FindByDnsName").pyclass

FindByDnsNameResponseMsg = GED("urn:vim25", "FindByDnsNameResponse").pyclass

FindByIpRequestMsg = GED("urn:vim25", "FindByIp").pyclass

FindByIpResponseMsg = GED("urn:vim25", "FindByIpResponse").pyclass

FindByInventoryPathRequestMsg = GED("urn:vim25", "FindByInventoryPath").pyclass

FindByInventoryPathResponseMsg = GED("urn:vim25", "FindByInventoryPathResponse").pyclass

FindChildRequestMsg = GED("urn:vim25", "FindChild").pyclass

FindChildResponseMsg = GED("urn:vim25", "FindChildResponse").pyclass

FindAllByUuidRequestMsg = GED("urn:vim25", "FindAllByUuid").pyclass

FindAllByUuidResponseMsg = GED("urn:vim25", "FindAllByUuidResponse").pyclass

FindAllByDnsNameRequestMsg = GED("urn:vim25", "FindAllByDnsName").pyclass

FindAllByDnsNameResponseMsg = GED("urn:vim25", "FindAllByDnsNameResponse").pyclass

FindAllByIpRequestMsg = GED("urn:vim25", "FindAllByIp").pyclass

FindAllByIpResponseMsg = GED("urn:vim25", "FindAllByIpResponse").pyclass

CurrentTimeRequestMsg = GED("urn:vim25", "CurrentTime").pyclass

CurrentTimeResponseMsg = GED("urn:vim25", "CurrentTimeResponse").pyclass

RetrieveServiceContentRequestMsg = GED("urn:vim25", "RetrieveServiceContent").pyclass

RetrieveServiceContentResponseMsg = GED("urn:vim25", "RetrieveServiceContentResponse").pyclass

ValidateMigrationRequestMsg = GED("urn:vim25", "ValidateMigration").pyclass

ValidateMigrationResponseMsg = GED("urn:vim25", "ValidateMigrationResponse").pyclass

QueryVMotionCompatibilityRequestMsg = GED("urn:vim25", "QueryVMotionCompatibility").pyclass

QueryVMotionCompatibilityResponseMsg = GED("urn:vim25", "QueryVMotionCompatibilityResponse").pyclass

RetrieveProductComponentsRequestMsg = GED("urn:vim25", "RetrieveProductComponents").pyclass

RetrieveProductComponentsResponseMsg = GED("urn:vim25", "RetrieveProductComponentsResponse").pyclass

QueryServiceListRequestMsg = GED("urn:vim25", "QueryServiceList").pyclass

QueryServiceListResponseMsg = GED("urn:vim25", "QueryServiceListResponse").pyclass

UpdateServiceMessageRequestMsg = GED("urn:vim25", "UpdateServiceMessage").pyclass

UpdateServiceMessageResponseMsg = GED("urn:vim25", "UpdateServiceMessageResponse").pyclass

LoginByTokenRequestMsg = GED("urn:vim25", "LoginByToken").pyclass

LoginByTokenResponseMsg = GED("urn:vim25", "LoginByTokenResponse").pyclass

LoginRequestMsg = GED("urn:vim25", "Login").pyclass

LoginResponseMsg = GED("urn:vim25", "LoginResponse").pyclass

LoginBySSPIRequestMsg = GED("urn:vim25", "LoginBySSPI").pyclass

LoginBySSPIResponseMsg = GED("urn:vim25", "LoginBySSPIResponse").pyclass

LogoutRequestMsg = GED("urn:vim25", "Logout").pyclass

LogoutResponseMsg = GED("urn:vim25", "LogoutResponse").pyclass

AcquireLocalTicketRequestMsg = GED("urn:vim25", "AcquireLocalTicket").pyclass

AcquireLocalTicketResponseMsg = GED("urn:vim25", "AcquireLocalTicketResponse").pyclass

AcquireGenericServiceTicketRequestMsg = GED("urn:vim25", "AcquireGenericServiceTicket").pyclass

AcquireGenericServiceTicketResponseMsg = GED("urn:vim25", "AcquireGenericServiceTicketResponse").pyclass

TerminateSessionRequestMsg = GED("urn:vim25", "TerminateSession").pyclass

TerminateSessionResponseMsg = GED("urn:vim25", "TerminateSessionResponse").pyclass

SetLocaleRequestMsg = GED("urn:vim25", "SetLocale").pyclass

SetLocaleResponseMsg = GED("urn:vim25", "SetLocaleResponse").pyclass

LoginExtensionBySubjectNameRequestMsg = GED("urn:vim25", "LoginExtensionBySubjectName").pyclass

LoginExtensionBySubjectNameResponseMsg = GED("urn:vim25", "LoginExtensionBySubjectNameResponse").pyclass

LoginExtensionByCertificateRequestMsg = GED("urn:vim25", "LoginExtensionByCertificate").pyclass

LoginExtensionByCertificateResponseMsg = GED("urn:vim25", "LoginExtensionByCertificateResponse").pyclass

ImpersonateUserRequestMsg = GED("urn:vim25", "ImpersonateUser").pyclass

ImpersonateUserResponseMsg = GED("urn:vim25", "ImpersonateUserResponse").pyclass

SessionIsActiveRequestMsg = GED("urn:vim25", "SessionIsActive").pyclass

SessionIsActiveResponseMsg = GED("urn:vim25", "SessionIsActiveResponse").pyclass

AcquireCloneTicketRequestMsg = GED("urn:vim25", "AcquireCloneTicket").pyclass

AcquireCloneTicketResponseMsg = GED("urn:vim25", "AcquireCloneTicketResponse").pyclass

CloneSessionRequestMsg = GED("urn:vim25", "CloneSession").pyclass

CloneSessionResponseMsg = GED("urn:vim25", "CloneSessionResponse").pyclass

ExecuteSimpleCommandRequestMsg = GED("urn:vim25", "ExecuteSimpleCommand").pyclass

ExecuteSimpleCommandResponseMsg = GED("urn:vim25", "ExecuteSimpleCommandResponse").pyclass

ConfigureDatastoreIORM_TaskRequestMsg = GED("urn:vim25", "ConfigureDatastoreIORM_Task").pyclass

ConfigureDatastoreIORM_TaskResponseMsg = GED("urn:vim25", "ConfigureDatastoreIORM_TaskResponse").pyclass

QueryIORMConfigOptionRequestMsg = GED("urn:vim25", "QueryIORMConfigOption").pyclass

QueryIORMConfigOptionResponseMsg = GED("urn:vim25", "QueryIORMConfigOptionResponse").pyclass

QueryDatastorePerformanceSummaryRequestMsg = GED("urn:vim25", "QueryDatastorePerformanceSummary").pyclass

QueryDatastorePerformanceSummaryResponseMsg = GED("urn:vim25", "QueryDatastorePerformanceSummaryResponse").pyclass

ApplyStorageDrsRecommendationToPod_TaskRequestMsg = GED("urn:vim25", "ApplyStorageDrsRecommendationToPod_Task").pyclass

ApplyStorageDrsRecommendationToPod_TaskResponseMsg = GED("urn:vim25", "ApplyStorageDrsRecommendationToPod_TaskResponse").pyclass

ApplyStorageDrsRecommendation_TaskRequestMsg = GED("urn:vim25", "ApplyStorageDrsRecommendation_Task").pyclass

ApplyStorageDrsRecommendation_TaskResponseMsg = GED("urn:vim25", "ApplyStorageDrsRecommendation_TaskResponse").pyclass

CancelStorageDrsRecommendationRequestMsg = GED("urn:vim25", "CancelStorageDrsRecommendation").pyclass

CancelStorageDrsRecommendationResponseMsg = GED("urn:vim25", "CancelStorageDrsRecommendationResponse").pyclass

RefreshStorageDrsRecommendationRequestMsg = GED("urn:vim25", "RefreshStorageDrsRecommendation").pyclass

RefreshStorageDrsRecommendationResponseMsg = GED("urn:vim25", "RefreshStorageDrsRecommendationResponse").pyclass

ConfigureStorageDrsForPod_TaskRequestMsg = GED("urn:vim25", "ConfigureStorageDrsForPod_Task").pyclass

ConfigureStorageDrsForPod_TaskResponseMsg = GED("urn:vim25", "ConfigureStorageDrsForPod_TaskResponse").pyclass

RecommendDatastoresRequestMsg = GED("urn:vim25", "RecommendDatastores").pyclass

RecommendDatastoresResponseMsg = GED("urn:vim25", "RecommendDatastoresResponse").pyclass

CancelTaskRequestMsg = GED("urn:vim25", "CancelTask").pyclass

CancelTaskResponseMsg = GED("urn:vim25", "CancelTaskResponse").pyclass

UpdateProgressRequestMsg = GED("urn:vim25", "UpdateProgress").pyclass

UpdateProgressResponseMsg = GED("urn:vim25", "UpdateProgressResponse").pyclass

SetTaskStateRequestMsg = GED("urn:vim25", "SetTaskState").pyclass

SetTaskStateResponseMsg = GED("urn:vim25", "SetTaskStateResponse").pyclass

SetTaskDescriptionRequestMsg = GED("urn:vim25", "SetTaskDescription").pyclass

SetTaskDescriptionResponseMsg = GED("urn:vim25", "SetTaskDescriptionResponse").pyclass

ReadNextTasksRequestMsg = GED("urn:vim25", "ReadNextTasks").pyclass

ReadNextTasksResponseMsg = GED("urn:vim25", "ReadNextTasksResponse").pyclass

ReadPreviousTasksRequestMsg = GED("urn:vim25", "ReadPreviousTasks").pyclass

ReadPreviousTasksResponseMsg = GED("urn:vim25", "ReadPreviousTasksResponse").pyclass

CreateCollectorForTasksRequestMsg = GED("urn:vim25", "CreateCollectorForTasks").pyclass

CreateCollectorForTasksResponseMsg = GED("urn:vim25", "CreateCollectorForTasksResponse").pyclass

CreateTaskRequestMsg = GED("urn:vim25", "CreateTask").pyclass

CreateTaskResponseMsg = GED("urn:vim25", "CreateTaskResponse").pyclass

RetrieveUserGroupsRequestMsg = GED("urn:vim25", "RetrieveUserGroups").pyclass

RetrieveUserGroupsResponseMsg = GED("urn:vim25", "RetrieveUserGroupsResponse").pyclass

UpdateVAppConfigRequestMsg = GED("urn:vim25", "UpdateVAppConfig").pyclass

UpdateVAppConfigResponseMsg = GED("urn:vim25", "UpdateVAppConfigResponse").pyclass

UpdateLinkedChildrenRequestMsg = GED("urn:vim25", "UpdateLinkedChildren").pyclass

UpdateLinkedChildrenResponseMsg = GED("urn:vim25", "UpdateLinkedChildrenResponse").pyclass

CloneVApp_TaskRequestMsg = GED("urn:vim25", "CloneVApp_Task").pyclass

CloneVApp_TaskResponseMsg = GED("urn:vim25", "CloneVApp_TaskResponse").pyclass

ExportVAppRequestMsg = GED("urn:vim25", "ExportVApp").pyclass

ExportVAppResponseMsg = GED("urn:vim25", "ExportVAppResponse").pyclass

PowerOnVApp_TaskRequestMsg = GED("urn:vim25", "PowerOnVApp_Task").pyclass

PowerOnVApp_TaskResponseMsg = GED("urn:vim25", "PowerOnVApp_TaskResponse").pyclass

PowerOffVApp_TaskRequestMsg = GED("urn:vim25", "PowerOffVApp_Task").pyclass

PowerOffVApp_TaskResponseMsg = GED("urn:vim25", "PowerOffVApp_TaskResponse").pyclass

SuspendVApp_TaskRequestMsg = GED("urn:vim25", "SuspendVApp_Task").pyclass

SuspendVApp_TaskResponseMsg = GED("urn:vim25", "SuspendVApp_TaskResponse").pyclass

unregisterVApp_TaskRequestMsg = GED("urn:vim25", "unregisterVApp_Task").pyclass

unregisterVApp_TaskResponseMsg = GED("urn:vim25", "unregisterVApp_TaskResponse").pyclass

CreateVirtualDisk_TaskRequestMsg = GED("urn:vim25", "CreateVirtualDisk_Task").pyclass

CreateVirtualDisk_TaskResponseMsg = GED("urn:vim25", "CreateVirtualDisk_TaskResponse").pyclass

DeleteVirtualDisk_TaskRequestMsg = GED("urn:vim25", "DeleteVirtualDisk_Task").pyclass

DeleteVirtualDisk_TaskResponseMsg = GED("urn:vim25", "DeleteVirtualDisk_TaskResponse").pyclass

MoveVirtualDisk_TaskRequestMsg = GED("urn:vim25", "MoveVirtualDisk_Task").pyclass

MoveVirtualDisk_TaskResponseMsg = GED("urn:vim25", "MoveVirtualDisk_TaskResponse").pyclass

CopyVirtualDisk_TaskRequestMsg = GED("urn:vim25", "CopyVirtualDisk_Task").pyclass

CopyVirtualDisk_TaskResponseMsg = GED("urn:vim25", "CopyVirtualDisk_TaskResponse").pyclass

ExtendVirtualDisk_TaskRequestMsg = GED("urn:vim25", "ExtendVirtualDisk_Task").pyclass

ExtendVirtualDisk_TaskResponseMsg = GED("urn:vim25", "ExtendVirtualDisk_TaskResponse").pyclass

QueryVirtualDiskFragmentationRequestMsg = GED("urn:vim25", "QueryVirtualDiskFragmentation").pyclass

QueryVirtualDiskFragmentationResponseMsg = GED("urn:vim25", "QueryVirtualDiskFragmentationResponse").pyclass

DefragmentVirtualDisk_TaskRequestMsg = GED("urn:vim25", "DefragmentVirtualDisk_Task").pyclass

DefragmentVirtualDisk_TaskResponseMsg = GED("urn:vim25", "DefragmentVirtualDisk_TaskResponse").pyclass

ShrinkVirtualDisk_TaskRequestMsg = GED("urn:vim25", "ShrinkVirtualDisk_Task").pyclass

ShrinkVirtualDisk_TaskResponseMsg = GED("urn:vim25", "ShrinkVirtualDisk_TaskResponse").pyclass

InflateVirtualDisk_TaskRequestMsg = GED("urn:vim25", "InflateVirtualDisk_Task").pyclass

InflateVirtualDisk_TaskResponseMsg = GED("urn:vim25", "InflateVirtualDisk_TaskResponse").pyclass

EagerZeroVirtualDisk_TaskRequestMsg = GED("urn:vim25", "EagerZeroVirtualDisk_Task").pyclass

EagerZeroVirtualDisk_TaskResponseMsg = GED("urn:vim25", "EagerZeroVirtualDisk_TaskResponse").pyclass

ZeroFillVirtualDisk_TaskRequestMsg = GED("urn:vim25", "ZeroFillVirtualDisk_Task").pyclass

ZeroFillVirtualDisk_TaskResponseMsg = GED("urn:vim25", "ZeroFillVirtualDisk_TaskResponse").pyclass

SetVirtualDiskUuidRequestMsg = GED("urn:vim25", "SetVirtualDiskUuid").pyclass

SetVirtualDiskUuidResponseMsg = GED("urn:vim25", "SetVirtualDiskUuidResponse").pyclass

QueryVirtualDiskUuidRequestMsg = GED("urn:vim25", "QueryVirtualDiskUuid").pyclass

QueryVirtualDiskUuidResponseMsg = GED("urn:vim25", "QueryVirtualDiskUuidResponse").pyclass

QueryVirtualDiskGeometryRequestMsg = GED("urn:vim25", "QueryVirtualDiskGeometry").pyclass

QueryVirtualDiskGeometryResponseMsg = GED("urn:vim25", "QueryVirtualDiskGeometryResponse").pyclass

RefreshStorageInfoRequestMsg = GED("urn:vim25", "RefreshStorageInfo").pyclass

RefreshStorageInfoResponseMsg = GED("urn:vim25", "RefreshStorageInfoResponse").pyclass

CreateSnapshot_TaskRequestMsg = GED("urn:vim25", "CreateSnapshot_Task").pyclass

CreateSnapshot_TaskResponseMsg = GED("urn:vim25", "CreateSnapshot_TaskResponse").pyclass

RevertToCurrentSnapshot_TaskRequestMsg = GED("urn:vim25", "RevertToCurrentSnapshot_Task").pyclass

RevertToCurrentSnapshot_TaskResponseMsg = GED("urn:vim25", "RevertToCurrentSnapshot_TaskResponse").pyclass

RemoveAllSnapshots_TaskRequestMsg = GED("urn:vim25", "RemoveAllSnapshots_Task").pyclass

RemoveAllSnapshots_TaskResponseMsg = GED("urn:vim25", "RemoveAllSnapshots_TaskResponse").pyclass

ConsolidateVMDisks_TaskRequestMsg = GED("urn:vim25", "ConsolidateVMDisks_Task").pyclass

ConsolidateVMDisks_TaskResponseMsg = GED("urn:vim25", "ConsolidateVMDisks_TaskResponse").pyclass

EstimateStorageForConsolidateSnapshots_TaskRequestMsg = GED("urn:vim25", "EstimateStorageForConsolidateSnapshots_Task").pyclass

EstimateStorageForConsolidateSnapshots_TaskResponseMsg = GED("urn:vim25", "EstimateStorageForConsolidateSnapshots_TaskResponse").pyclass

ReconfigVM_TaskRequestMsg = GED("urn:vim25", "ReconfigVM_Task").pyclass

ReconfigVM_TaskResponseMsg = GED("urn:vim25", "ReconfigVM_TaskResponse").pyclass

UpgradeVM_TaskRequestMsg = GED("urn:vim25", "UpgradeVM_Task").pyclass

UpgradeVM_TaskResponseMsg = GED("urn:vim25", "UpgradeVM_TaskResponse").pyclass

ExtractOvfEnvironmentRequestMsg = GED("urn:vim25", "ExtractOvfEnvironment").pyclass

ExtractOvfEnvironmentResponseMsg = GED("urn:vim25", "ExtractOvfEnvironmentResponse").pyclass

PowerOnVM_TaskRequestMsg = GED("urn:vim25", "PowerOnVM_Task").pyclass

PowerOnVM_TaskResponseMsg = GED("urn:vim25", "PowerOnVM_TaskResponse").pyclass

PowerOffVM_TaskRequestMsg = GED("urn:vim25", "PowerOffVM_Task").pyclass

PowerOffVM_TaskResponseMsg = GED("urn:vim25", "PowerOffVM_TaskResponse").pyclass

SuspendVM_TaskRequestMsg = GED("urn:vim25", "SuspendVM_Task").pyclass

SuspendVM_TaskResponseMsg = GED("urn:vim25", "SuspendVM_TaskResponse").pyclass

ResetVM_TaskRequestMsg = GED("urn:vim25", "ResetVM_Task").pyclass

ResetVM_TaskResponseMsg = GED("urn:vim25", "ResetVM_TaskResponse").pyclass

ShutdownGuestRequestMsg = GED("urn:vim25", "ShutdownGuest").pyclass

ShutdownGuestResponseMsg = GED("urn:vim25", "ShutdownGuestResponse").pyclass

RebootGuestRequestMsg = GED("urn:vim25", "RebootGuest").pyclass

RebootGuestResponseMsg = GED("urn:vim25", "RebootGuestResponse").pyclass

StandbyGuestRequestMsg = GED("urn:vim25", "StandbyGuest").pyclass

StandbyGuestResponseMsg = GED("urn:vim25", "StandbyGuestResponse").pyclass

AnswerVMRequestMsg = GED("urn:vim25", "AnswerVM").pyclass

AnswerVMResponseMsg = GED("urn:vim25", "AnswerVMResponse").pyclass

CustomizeVM_TaskRequestMsg = GED("urn:vim25", "CustomizeVM_Task").pyclass

CustomizeVM_TaskResponseMsg = GED("urn:vim25", "CustomizeVM_TaskResponse").pyclass

CheckCustomizationSpecRequestMsg = GED("urn:vim25", "CheckCustomizationSpec").pyclass

CheckCustomizationSpecResponseMsg = GED("urn:vim25", "CheckCustomizationSpecResponse").pyclass

MigrateVM_TaskRequestMsg = GED("urn:vim25", "MigrateVM_Task").pyclass

MigrateVM_TaskResponseMsg = GED("urn:vim25", "MigrateVM_TaskResponse").pyclass

RelocateVM_TaskRequestMsg = GED("urn:vim25", "RelocateVM_Task").pyclass

RelocateVM_TaskResponseMsg = GED("urn:vim25", "RelocateVM_TaskResponse").pyclass

CloneVM_TaskRequestMsg = GED("urn:vim25", "CloneVM_Task").pyclass

CloneVM_TaskResponseMsg = GED("urn:vim25", "CloneVM_TaskResponse").pyclass

ExportVmRequestMsg = GED("urn:vim25", "ExportVm").pyclass

ExportVmResponseMsg = GED("urn:vim25", "ExportVmResponse").pyclass

MarkAsTemplateRequestMsg = GED("urn:vim25", "MarkAsTemplate").pyclass

MarkAsTemplateResponseMsg = GED("urn:vim25", "MarkAsTemplateResponse").pyclass

MarkAsVirtualMachineRequestMsg = GED("urn:vim25", "MarkAsVirtualMachine").pyclass

MarkAsVirtualMachineResponseMsg = GED("urn:vim25", "MarkAsVirtualMachineResponse").pyclass

UnregisterVMRequestMsg = GED("urn:vim25", "UnregisterVM").pyclass

UnregisterVMResponseMsg = GED("urn:vim25", "UnregisterVMResponse").pyclass

ResetGuestInformationRequestMsg = GED("urn:vim25", "ResetGuestInformation").pyclass

ResetGuestInformationResponseMsg = GED("urn:vim25", "ResetGuestInformationResponse").pyclass

MountToolsInstallerRequestMsg = GED("urn:vim25", "MountToolsInstaller").pyclass

MountToolsInstallerResponseMsg = GED("urn:vim25", "MountToolsInstallerResponse").pyclass

UnmountToolsInstallerRequestMsg = GED("urn:vim25", "UnmountToolsInstaller").pyclass

UnmountToolsInstallerResponseMsg = GED("urn:vim25", "UnmountToolsInstallerResponse").pyclass

UpgradeTools_TaskRequestMsg = GED("urn:vim25", "UpgradeTools_Task").pyclass

UpgradeTools_TaskResponseMsg = GED("urn:vim25", "UpgradeTools_TaskResponse").pyclass

AcquireMksTicketRequestMsg = GED("urn:vim25", "AcquireMksTicket").pyclass

AcquireMksTicketResponseMsg = GED("urn:vim25", "AcquireMksTicketResponse").pyclass

AcquireTicketRequestMsg = GED("urn:vim25", "AcquireTicket").pyclass

AcquireTicketResponseMsg = GED("urn:vim25", "AcquireTicketResponse").pyclass

SetScreenResolutionRequestMsg = GED("urn:vim25", "SetScreenResolution").pyclass

SetScreenResolutionResponseMsg = GED("urn:vim25", "SetScreenResolutionResponse").pyclass

DefragmentAllDisksRequestMsg = GED("urn:vim25", "DefragmentAllDisks").pyclass

DefragmentAllDisksResponseMsg = GED("urn:vim25", "DefragmentAllDisksResponse").pyclass

CreateSecondaryVM_TaskRequestMsg = GED("urn:vim25", "CreateSecondaryVM_Task").pyclass

CreateSecondaryVM_TaskResponseMsg = GED("urn:vim25", "CreateSecondaryVM_TaskResponse").pyclass

TurnOffFaultToleranceForVM_TaskRequestMsg = GED("urn:vim25", "TurnOffFaultToleranceForVM_Task").pyclass

TurnOffFaultToleranceForVM_TaskResponseMsg = GED("urn:vim25", "TurnOffFaultToleranceForVM_TaskResponse").pyclass

MakePrimaryVM_TaskRequestMsg = GED("urn:vim25", "MakePrimaryVM_Task").pyclass

MakePrimaryVM_TaskResponseMsg = GED("urn:vim25", "MakePrimaryVM_TaskResponse").pyclass

TerminateFaultTolerantVM_TaskRequestMsg = GED("urn:vim25", "TerminateFaultTolerantVM_Task").pyclass

TerminateFaultTolerantVM_TaskResponseMsg = GED("urn:vim25", "TerminateFaultTolerantVM_TaskResponse").pyclass

DisableSecondaryVM_TaskRequestMsg = GED("urn:vim25", "DisableSecondaryVM_Task").pyclass

DisableSecondaryVM_TaskResponseMsg = GED("urn:vim25", "DisableSecondaryVM_TaskResponse").pyclass

EnableSecondaryVM_TaskRequestMsg = GED("urn:vim25", "EnableSecondaryVM_Task").pyclass

EnableSecondaryVM_TaskResponseMsg = GED("urn:vim25", "EnableSecondaryVM_TaskResponse").pyclass

SetDisplayTopologyRequestMsg = GED("urn:vim25", "SetDisplayTopology").pyclass

SetDisplayTopologyResponseMsg = GED("urn:vim25", "SetDisplayTopologyResponse").pyclass

StartRecording_TaskRequestMsg = GED("urn:vim25", "StartRecording_Task").pyclass

StartRecording_TaskResponseMsg = GED("urn:vim25", "StartRecording_TaskResponse").pyclass

StopRecording_TaskRequestMsg = GED("urn:vim25", "StopRecording_Task").pyclass

StopRecording_TaskResponseMsg = GED("urn:vim25", "StopRecording_TaskResponse").pyclass

StartReplaying_TaskRequestMsg = GED("urn:vim25", "StartReplaying_Task").pyclass

StartReplaying_TaskResponseMsg = GED("urn:vim25", "StartReplaying_TaskResponse").pyclass

StopReplaying_TaskRequestMsg = GED("urn:vim25", "StopReplaying_Task").pyclass

StopReplaying_TaskResponseMsg = GED("urn:vim25", "StopReplaying_TaskResponse").pyclass

PromoteDisks_TaskRequestMsg = GED("urn:vim25", "PromoteDisks_Task").pyclass

PromoteDisks_TaskResponseMsg = GED("urn:vim25", "PromoteDisks_TaskResponse").pyclass

CreateScreenshot_TaskRequestMsg = GED("urn:vim25", "CreateScreenshot_Task").pyclass

CreateScreenshot_TaskResponseMsg = GED("urn:vim25", "CreateScreenshot_TaskResponse").pyclass

QueryChangedDiskAreasRequestMsg = GED("urn:vim25", "QueryChangedDiskAreas").pyclass

QueryChangedDiskAreasResponseMsg = GED("urn:vim25", "QueryChangedDiskAreasResponse").pyclass

QueryUnownedFilesRequestMsg = GED("urn:vim25", "QueryUnownedFiles").pyclass

QueryUnownedFilesResponseMsg = GED("urn:vim25", "QueryUnownedFilesResponse").pyclass

reloadVirtualMachineFromPath_TaskRequestMsg = GED("urn:vim25", "reloadVirtualMachineFromPath_Task").pyclass

reloadVirtualMachineFromPath_TaskResponseMsg = GED("urn:vim25", "reloadVirtualMachineFromPath_TaskResponse").pyclass

QueryFaultToleranceCompatibilityRequestMsg = GED("urn:vim25", "QueryFaultToleranceCompatibility").pyclass

QueryFaultToleranceCompatibilityResponseMsg = GED("urn:vim25", "QueryFaultToleranceCompatibilityResponse").pyclass

TerminateVMRequestMsg = GED("urn:vim25", "TerminateVM").pyclass

TerminateVMResponseMsg = GED("urn:vim25", "TerminateVMResponse").pyclass

RemoveAlarmRequestMsg = GED("urn:vim25", "RemoveAlarm").pyclass

RemoveAlarmResponseMsg = GED("urn:vim25", "RemoveAlarmResponse").pyclass

ReconfigureAlarmRequestMsg = GED("urn:vim25", "ReconfigureAlarm").pyclass

ReconfigureAlarmResponseMsg = GED("urn:vim25", "ReconfigureAlarmResponse").pyclass

CreateAlarmRequestMsg = GED("urn:vim25", "CreateAlarm").pyclass

CreateAlarmResponseMsg = GED("urn:vim25", "CreateAlarmResponse").pyclass

GetAlarmRequestMsg = GED("urn:vim25", "GetAlarm").pyclass

GetAlarmResponseMsg = GED("urn:vim25", "GetAlarmResponse").pyclass

AreAlarmActionsEnabledRequestMsg = GED("urn:vim25", "AreAlarmActionsEnabled").pyclass

AreAlarmActionsEnabledResponseMsg = GED("urn:vim25", "AreAlarmActionsEnabledResponse").pyclass

EnableAlarmActionsRequestMsg = GED("urn:vim25", "EnableAlarmActions").pyclass

EnableAlarmActionsResponseMsg = GED("urn:vim25", "EnableAlarmActionsResponse").pyclass

GetAlarmStateRequestMsg = GED("urn:vim25", "GetAlarmState").pyclass

GetAlarmStateResponseMsg = GED("urn:vim25", "GetAlarmStateResponse").pyclass

AcknowledgeAlarmRequestMsg = GED("urn:vim25", "AcknowledgeAlarm").pyclass

AcknowledgeAlarmResponseMsg = GED("urn:vim25", "AcknowledgeAlarmResponse").pyclass

ReconfigureDVPortgroup_TaskRequestMsg = GED("urn:vim25", "ReconfigureDVPortgroup_Task").pyclass

ReconfigureDVPortgroup_TaskResponseMsg = GED("urn:vim25", "ReconfigureDVPortgroup_TaskResponse").pyclass

DVPortgroupRollback_TaskRequestMsg = GED("urn:vim25", "DVPortgroupRollback_Task").pyclass

DVPortgroupRollback_TaskResponseMsg = GED("urn:vim25", "DVPortgroupRollback_TaskResponse").pyclass

QueryAvailableDvsSpecRequestMsg = GED("urn:vim25", "QueryAvailableDvsSpec").pyclass

QueryAvailableDvsSpecResponseMsg = GED("urn:vim25", "QueryAvailableDvsSpecResponse").pyclass

QueryCompatibleHostForNewDvsRequestMsg = GED("urn:vim25", "QueryCompatibleHostForNewDvs").pyclass

QueryCompatibleHostForNewDvsResponseMsg = GED("urn:vim25", "QueryCompatibleHostForNewDvsResponse").pyclass

QueryCompatibleHostForExistingDvsRequestMsg = GED("urn:vim25", "QueryCompatibleHostForExistingDvs").pyclass

QueryCompatibleHostForExistingDvsResponseMsg = GED("urn:vim25", "QueryCompatibleHostForExistingDvsResponse").pyclass

QueryDvsCompatibleHostSpecRequestMsg = GED("urn:vim25", "QueryDvsCompatibleHostSpec").pyclass

QueryDvsCompatibleHostSpecResponseMsg = GED("urn:vim25", "QueryDvsCompatibleHostSpecResponse").pyclass

QueryDvsFeatureCapabilityRequestMsg = GED("urn:vim25", "QueryDvsFeatureCapability").pyclass

QueryDvsFeatureCapabilityResponseMsg = GED("urn:vim25", "QueryDvsFeatureCapabilityResponse").pyclass

QueryDvsByUuidRequestMsg = GED("urn:vim25", "QueryDvsByUuid").pyclass

QueryDvsByUuidResponseMsg = GED("urn:vim25", "QueryDvsByUuidResponse").pyclass

QueryDvsConfigTargetRequestMsg = GED("urn:vim25", "QueryDvsConfigTarget").pyclass

QueryDvsConfigTargetResponseMsg = GED("urn:vim25", "QueryDvsConfigTargetResponse").pyclass

QueryDvsCheckCompatibilityRequestMsg = GED("urn:vim25", "QueryDvsCheckCompatibility").pyclass

QueryDvsCheckCompatibilityResponseMsg = GED("urn:vim25", "QueryDvsCheckCompatibilityResponse").pyclass

RectifyDvsOnHost_TaskRequestMsg = GED("urn:vim25", "RectifyDvsOnHost_Task").pyclass

RectifyDvsOnHost_TaskResponseMsg = GED("urn:vim25", "RectifyDvsOnHost_TaskResponse").pyclass

DVSManagerExportEntity_TaskRequestMsg = GED("urn:vim25", "DVSManagerExportEntity_Task").pyclass

DVSManagerExportEntity_TaskResponseMsg = GED("urn:vim25", "DVSManagerExportEntity_TaskResponse").pyclass

DVSManagerImportEntity_TaskRequestMsg = GED("urn:vim25", "DVSManagerImportEntity_Task").pyclass

DVSManagerImportEntity_TaskResponseMsg = GED("urn:vim25", "DVSManagerImportEntity_TaskResponse").pyclass

DVSManagerLookupDvPortGroupRequestMsg = GED("urn:vim25", "DVSManagerLookupDvPortGroup").pyclass

DVSManagerLookupDvPortGroupResponseMsg = GED("urn:vim25", "DVSManagerLookupDvPortGroupResponse").pyclass

ReadNextEventsRequestMsg = GED("urn:vim25", "ReadNextEvents").pyclass

ReadNextEventsResponseMsg = GED("urn:vim25", "ReadNextEventsResponse").pyclass

ReadPreviousEventsRequestMsg = GED("urn:vim25", "ReadPreviousEvents").pyclass

ReadPreviousEventsResponseMsg = GED("urn:vim25", "ReadPreviousEventsResponse").pyclass

RetrieveArgumentDescriptionRequestMsg = GED("urn:vim25", "RetrieveArgumentDescription").pyclass

RetrieveArgumentDescriptionResponseMsg = GED("urn:vim25", "RetrieveArgumentDescriptionResponse").pyclass

CreateCollectorForEventsRequestMsg = GED("urn:vim25", "CreateCollectorForEvents").pyclass

CreateCollectorForEventsResponseMsg = GED("urn:vim25", "CreateCollectorForEventsResponse").pyclass

LogUserEventRequestMsg = GED("urn:vim25", "LogUserEvent").pyclass

LogUserEventResponseMsg = GED("urn:vim25", "LogUserEventResponse").pyclass

QueryEventsRequestMsg = GED("urn:vim25", "QueryEvents").pyclass

QueryEventsResponseMsg = GED("urn:vim25", "QueryEventsResponse").pyclass

PostEventRequestMsg = GED("urn:vim25", "PostEvent").pyclass

PostEventResponseMsg = GED("urn:vim25", "PostEventResponse").pyclass

JoinDomain_TaskRequestMsg = GED("urn:vim25", "JoinDomain_Task").pyclass

JoinDomain_TaskResponseMsg = GED("urn:vim25", "JoinDomain_TaskResponse").pyclass

JoinDomainWithCAM_TaskRequestMsg = GED("urn:vim25", "JoinDomainWithCAM_Task").pyclass

JoinDomainWithCAM_TaskResponseMsg = GED("urn:vim25", "JoinDomainWithCAM_TaskResponse").pyclass

ImportCertificateForCAM_TaskRequestMsg = GED("urn:vim25", "ImportCertificateForCAM_Task").pyclass

ImportCertificateForCAM_TaskResponseMsg = GED("urn:vim25", "ImportCertificateForCAM_TaskResponse").pyclass

LeaveCurrentDomain_TaskRequestMsg = GED("urn:vim25", "LeaveCurrentDomain_Task").pyclass

LeaveCurrentDomain_TaskResponseMsg = GED("urn:vim25", "LeaveCurrentDomain_TaskResponse").pyclass

ReconfigureAutostartRequestMsg = GED("urn:vim25", "ReconfigureAutostart").pyclass

ReconfigureAutostartResponseMsg = GED("urn:vim25", "ReconfigureAutostartResponse").pyclass

AutoStartPowerOnRequestMsg = GED("urn:vim25", "AutoStartPowerOn").pyclass

AutoStartPowerOnResponseMsg = GED("urn:vim25", "AutoStartPowerOnResponse").pyclass

AutoStartPowerOffRequestMsg = GED("urn:vim25", "AutoStartPowerOff").pyclass

AutoStartPowerOffResponseMsg = GED("urn:vim25", "AutoStartPowerOffResponse").pyclass

QueryBootDevicesRequestMsg = GED("urn:vim25", "QueryBootDevices").pyclass

QueryBootDevicesResponseMsg = GED("urn:vim25", "QueryBootDevicesResponse").pyclass

UpdateBootDeviceRequestMsg = GED("urn:vim25", "UpdateBootDevice").pyclass

UpdateBootDeviceResponseMsg = GED("urn:vim25", "UpdateBootDeviceResponse").pyclass

ConfigureHostCache_TaskRequestMsg = GED("urn:vim25", "ConfigureHostCache_Task").pyclass

ConfigureHostCache_TaskResponseMsg = GED("urn:vim25", "ConfigureHostCache_TaskResponse").pyclass

EnableHyperThreadingRequestMsg = GED("urn:vim25", "EnableHyperThreading").pyclass

EnableHyperThreadingResponseMsg = GED("urn:vim25", "EnableHyperThreadingResponse").pyclass

DisableHyperThreadingRequestMsg = GED("urn:vim25", "DisableHyperThreading").pyclass

DisableHyperThreadingResponseMsg = GED("urn:vim25", "DisableHyperThreadingResponse").pyclass

SearchDatastore_TaskRequestMsg = GED("urn:vim25", "SearchDatastore_Task").pyclass

SearchDatastore_TaskResponseMsg = GED("urn:vim25", "SearchDatastore_TaskResponse").pyclass

SearchDatastoreSubFolders_TaskRequestMsg = GED("urn:vim25", "SearchDatastoreSubFolders_Task").pyclass

SearchDatastoreSubFolders_TaskResponseMsg = GED("urn:vim25", "SearchDatastoreSubFolders_TaskResponse").pyclass

DeleteFileRequestMsg = GED("urn:vim25", "DeleteFile").pyclass

DeleteFileResponseMsg = GED("urn:vim25", "DeleteFileResponse").pyclass

UpdateLocalSwapDatastoreRequestMsg = GED("urn:vim25", "UpdateLocalSwapDatastore").pyclass

UpdateLocalSwapDatastoreResponseMsg = GED("urn:vim25", "UpdateLocalSwapDatastoreResponse").pyclass

QueryAvailableDisksForVmfsRequestMsg = GED("urn:vim25", "QueryAvailableDisksForVmfs").pyclass

QueryAvailableDisksForVmfsResponseMsg = GED("urn:vim25", "QueryAvailableDisksForVmfsResponse").pyclass

QueryVmfsDatastoreCreateOptionsRequestMsg = GED("urn:vim25", "QueryVmfsDatastoreCreateOptions").pyclass

QueryVmfsDatastoreCreateOptionsResponseMsg = GED("urn:vim25", "QueryVmfsDatastoreCreateOptionsResponse").pyclass

CreateVmfsDatastoreRequestMsg = GED("urn:vim25", "CreateVmfsDatastore").pyclass

CreateVmfsDatastoreResponseMsg = GED("urn:vim25", "CreateVmfsDatastoreResponse").pyclass

QueryVmfsDatastoreExtendOptionsRequestMsg = GED("urn:vim25", "QueryVmfsDatastoreExtendOptions").pyclass

QueryVmfsDatastoreExtendOptionsResponseMsg = GED("urn:vim25", "QueryVmfsDatastoreExtendOptionsResponse").pyclass

QueryVmfsDatastoreExpandOptionsRequestMsg = GED("urn:vim25", "QueryVmfsDatastoreExpandOptions").pyclass

QueryVmfsDatastoreExpandOptionsResponseMsg = GED("urn:vim25", "QueryVmfsDatastoreExpandOptionsResponse").pyclass

ExtendVmfsDatastoreRequestMsg = GED("urn:vim25", "ExtendVmfsDatastore").pyclass

ExtendVmfsDatastoreResponseMsg = GED("urn:vim25", "ExtendVmfsDatastoreResponse").pyclass

ExpandVmfsDatastoreRequestMsg = GED("urn:vim25", "ExpandVmfsDatastore").pyclass

ExpandVmfsDatastoreResponseMsg = GED("urn:vim25", "ExpandVmfsDatastoreResponse").pyclass

CreateNasDatastoreRequestMsg = GED("urn:vim25", "CreateNasDatastore").pyclass

CreateNasDatastoreResponseMsg = GED("urn:vim25", "CreateNasDatastoreResponse").pyclass

CreateLocalDatastoreRequestMsg = GED("urn:vim25", "CreateLocalDatastore").pyclass

CreateLocalDatastoreResponseMsg = GED("urn:vim25", "CreateLocalDatastoreResponse").pyclass

RemoveDatastoreRequestMsg = GED("urn:vim25", "RemoveDatastore").pyclass

RemoveDatastoreResponseMsg = GED("urn:vim25", "RemoveDatastoreResponse").pyclass

ConfigureDatastorePrincipalRequestMsg = GED("urn:vim25", "ConfigureDatastorePrincipal").pyclass

ConfigureDatastorePrincipalResponseMsg = GED("urn:vim25", "ConfigureDatastorePrincipalResponse").pyclass

QueryUnresolvedVmfsVolumesRequestMsg = GED("urn:vim25", "QueryUnresolvedVmfsVolumes").pyclass

QueryUnresolvedVmfsVolumesResponseMsg = GED("urn:vim25", "QueryUnresolvedVmfsVolumesResponse").pyclass

ResignatureUnresolvedVmfsVolume_TaskRequestMsg = GED("urn:vim25", "ResignatureUnresolvedVmfsVolume_Task").pyclass

ResignatureUnresolvedVmfsVolume_TaskResponseMsg = GED("urn:vim25", "ResignatureUnresolvedVmfsVolume_TaskResponse").pyclass

UpdateDateTimeConfigRequestMsg = GED("urn:vim25", "UpdateDateTimeConfig").pyclass

UpdateDateTimeConfigResponseMsg = GED("urn:vim25", "UpdateDateTimeConfigResponse").pyclass

QueryAvailableTimeZonesRequestMsg = GED("urn:vim25", "QueryAvailableTimeZones").pyclass

QueryAvailableTimeZonesResponseMsg = GED("urn:vim25", "QueryAvailableTimeZonesResponse").pyclass

QueryDateTimeRequestMsg = GED("urn:vim25", "QueryDateTime").pyclass

QueryDateTimeResponseMsg = GED("urn:vim25", "QueryDateTimeResponse").pyclass

UpdateDateTimeRequestMsg = GED("urn:vim25", "UpdateDateTime").pyclass

UpdateDateTimeResponseMsg = GED("urn:vim25", "UpdateDateTimeResponse").pyclass

RefreshDateTimeSystemRequestMsg = GED("urn:vim25", "RefreshDateTimeSystem").pyclass

RefreshDateTimeSystemResponseMsg = GED("urn:vim25", "RefreshDateTimeSystemResponse").pyclass

QueryAvailablePartitionRequestMsg = GED("urn:vim25", "QueryAvailablePartition").pyclass

QueryAvailablePartitionResponseMsg = GED("urn:vim25", "QueryAvailablePartitionResponse").pyclass

SelectActivePartitionRequestMsg = GED("urn:vim25", "SelectActivePartition").pyclass

SelectActivePartitionResponseMsg = GED("urn:vim25", "SelectActivePartitionResponse").pyclass

QueryPartitionCreateOptionsRequestMsg = GED("urn:vim25", "QueryPartitionCreateOptions").pyclass

QueryPartitionCreateOptionsResponseMsg = GED("urn:vim25", "QueryPartitionCreateOptionsResponse").pyclass

QueryPartitionCreateDescRequestMsg = GED("urn:vim25", "QueryPartitionCreateDesc").pyclass

QueryPartitionCreateDescResponseMsg = GED("urn:vim25", "QueryPartitionCreateDescResponse").pyclass

CreateDiagnosticPartitionRequestMsg = GED("urn:vim25", "CreateDiagnosticPartition").pyclass

CreateDiagnosticPartitionResponseMsg = GED("urn:vim25", "CreateDiagnosticPartitionResponse").pyclass

EsxAgentHostManagerUpdateConfigRequestMsg = GED("urn:vim25", "EsxAgentHostManagerUpdateConfig").pyclass

EsxAgentHostManagerUpdateConfigResponseMsg = GED("urn:vim25", "EsxAgentHostManagerUpdateConfigResponse").pyclass

UpdateDefaultPolicyRequestMsg = GED("urn:vim25", "UpdateDefaultPolicy").pyclass

UpdateDefaultPolicyResponseMsg = GED("urn:vim25", "UpdateDefaultPolicyResponse").pyclass

EnableRulesetRequestMsg = GED("urn:vim25", "EnableRuleset").pyclass

EnableRulesetResponseMsg = GED("urn:vim25", "EnableRulesetResponse").pyclass

DisableRulesetRequestMsg = GED("urn:vim25", "DisableRuleset").pyclass

DisableRulesetResponseMsg = GED("urn:vim25", "DisableRulesetResponse").pyclass

UpdateRulesetRequestMsg = GED("urn:vim25", "UpdateRuleset").pyclass

UpdateRulesetResponseMsg = GED("urn:vim25", "UpdateRulesetResponse").pyclass

RefreshFirewallRequestMsg = GED("urn:vim25", "RefreshFirewall").pyclass

RefreshFirewallResponseMsg = GED("urn:vim25", "RefreshFirewallResponse").pyclass

ResetFirmwareToFactoryDefaultsRequestMsg = GED("urn:vim25", "ResetFirmwareToFactoryDefaults").pyclass

ResetFirmwareToFactoryDefaultsResponseMsg = GED("urn:vim25", "ResetFirmwareToFactoryDefaultsResponse").pyclass

BackupFirmwareConfigurationRequestMsg = GED("urn:vim25", "BackupFirmwareConfiguration").pyclass

BackupFirmwareConfigurationResponseMsg = GED("urn:vim25", "BackupFirmwareConfigurationResponse").pyclass

QueryFirmwareConfigUploadURLRequestMsg = GED("urn:vim25", "QueryFirmwareConfigUploadURL").pyclass

QueryFirmwareConfigUploadURLResponseMsg = GED("urn:vim25", "QueryFirmwareConfigUploadURLResponse").pyclass

RestoreFirmwareConfigurationRequestMsg = GED("urn:vim25", "RestoreFirmwareConfiguration").pyclass

RestoreFirmwareConfigurationResponseMsg = GED("urn:vim25", "RestoreFirmwareConfigurationResponse").pyclass

RefreshHealthStatusSystemRequestMsg = GED("urn:vim25", "RefreshHealthStatusSystem").pyclass

RefreshHealthStatusSystemResponseMsg = GED("urn:vim25", "RefreshHealthStatusSystemResponse").pyclass

ResetSystemHealthInfoRequestMsg = GED("urn:vim25", "ResetSystemHealthInfo").pyclass

ResetSystemHealthInfoResponseMsg = GED("urn:vim25", "ResetSystemHealthInfoResponse").pyclass

HostImageConfigGetAcceptanceRequestMsg = GED("urn:vim25", "HostImageConfigGetAcceptance").pyclass

HostImageConfigGetAcceptanceResponseMsg = GED("urn:vim25", "HostImageConfigGetAcceptanceResponse").pyclass

HostImageConfigGetProfileRequestMsg = GED("urn:vim25", "HostImageConfigGetProfile").pyclass

HostImageConfigGetProfileResponseMsg = GED("urn:vim25", "HostImageConfigGetProfileResponse").pyclass

UpdateHostImageAcceptanceLevelRequestMsg = GED("urn:vim25", "UpdateHostImageAcceptanceLevel").pyclass

UpdateHostImageAcceptanceLevelResponseMsg = GED("urn:vim25", "UpdateHostImageAcceptanceLevelResponse").pyclass

QueryVnicStatusRequestMsg = GED("urn:vim25", "QueryVnicStatus").pyclass

QueryVnicStatusResponseMsg = GED("urn:vim25", "QueryVnicStatusResponse").pyclass

QueryPnicStatusRequestMsg = GED("urn:vim25", "QueryPnicStatus").pyclass

QueryPnicStatusResponseMsg = GED("urn:vim25", "QueryPnicStatusResponse").pyclass

QueryBoundVnicsRequestMsg = GED("urn:vim25", "QueryBoundVnics").pyclass

QueryBoundVnicsResponseMsg = GED("urn:vim25", "QueryBoundVnicsResponse").pyclass

QueryCandidateNicsRequestMsg = GED("urn:vim25", "QueryCandidateNics").pyclass

QueryCandidateNicsResponseMsg = GED("urn:vim25", "QueryCandidateNicsResponse").pyclass

BindVnicRequestMsg = GED("urn:vim25", "BindVnic").pyclass

BindVnicResponseMsg = GED("urn:vim25", "BindVnicResponse").pyclass

UnbindVnicRequestMsg = GED("urn:vim25", "UnbindVnic").pyclass

UnbindVnicResponseMsg = GED("urn:vim25", "UnbindVnicResponse").pyclass

QueryMigrationDependenciesRequestMsg = GED("urn:vim25", "QueryMigrationDependencies").pyclass

QueryMigrationDependenciesResponseMsg = GED("urn:vim25", "QueryMigrationDependenciesResponse").pyclass

QueryModulesRequestMsg = GED("urn:vim25", "QueryModules").pyclass

QueryModulesResponseMsg = GED("urn:vim25", "QueryModulesResponse").pyclass

UpdateModuleOptionStringRequestMsg = GED("urn:vim25", "UpdateModuleOptionString").pyclass

UpdateModuleOptionStringResponseMsg = GED("urn:vim25", "UpdateModuleOptionStringResponse").pyclass

QueryConfiguredModuleOptionStringRequestMsg = GED("urn:vim25", "QueryConfiguredModuleOptionString").pyclass

QueryConfiguredModuleOptionStringResponseMsg = GED("urn:vim25", "QueryConfiguredModuleOptionStringResponse").pyclass

CreateUserRequestMsg = GED("urn:vim25", "CreateUser").pyclass

CreateUserResponseMsg = GED("urn:vim25", "CreateUserResponse").pyclass

UpdateUserRequestMsg = GED("urn:vim25", "UpdateUser").pyclass

UpdateUserResponseMsg = GED("urn:vim25", "UpdateUserResponse").pyclass

CreateGroupRequestMsg = GED("urn:vim25", "CreateGroup").pyclass

CreateGroupResponseMsg = GED("urn:vim25", "CreateGroupResponse").pyclass

RemoveUserRequestMsg = GED("urn:vim25", "RemoveUser").pyclass

RemoveUserResponseMsg = GED("urn:vim25", "RemoveUserResponse").pyclass

RemoveGroupRequestMsg = GED("urn:vim25", "RemoveGroup").pyclass

RemoveGroupResponseMsg = GED("urn:vim25", "RemoveGroupResponse").pyclass

AssignUserToGroupRequestMsg = GED("urn:vim25", "AssignUserToGroup").pyclass

AssignUserToGroupResponseMsg = GED("urn:vim25", "AssignUserToGroupResponse").pyclass

UnassignUserFromGroupRequestMsg = GED("urn:vim25", "UnassignUserFromGroup").pyclass

UnassignUserFromGroupResponseMsg = GED("urn:vim25", "UnassignUserFromGroupResponse").pyclass

ReconfigureServiceConsoleReservationRequestMsg = GED("urn:vim25", "ReconfigureServiceConsoleReservation").pyclass

ReconfigureServiceConsoleReservationResponseMsg = GED("urn:vim25", "ReconfigureServiceConsoleReservationResponse").pyclass

ReconfigureVirtualMachineReservationRequestMsg = GED("urn:vim25", "ReconfigureVirtualMachineReservation").pyclass

ReconfigureVirtualMachineReservationResponseMsg = GED("urn:vim25", "ReconfigureVirtualMachineReservationResponse").pyclass

UpdateNetworkConfigRequestMsg = GED("urn:vim25", "UpdateNetworkConfig").pyclass

UpdateNetworkConfigResponseMsg = GED("urn:vim25", "UpdateNetworkConfigResponse").pyclass

UpdateDnsConfigRequestMsg = GED("urn:vim25", "UpdateDnsConfig").pyclass

UpdateDnsConfigResponseMsg = GED("urn:vim25", "UpdateDnsConfigResponse").pyclass

UpdateIpRouteConfigRequestMsg = GED("urn:vim25", "UpdateIpRouteConfig").pyclass

UpdateIpRouteConfigResponseMsg = GED("urn:vim25", "UpdateIpRouteConfigResponse").pyclass

UpdateConsoleIpRouteConfigRequestMsg = GED("urn:vim25", "UpdateConsoleIpRouteConfig").pyclass

UpdateConsoleIpRouteConfigResponseMsg = GED("urn:vim25", "UpdateConsoleIpRouteConfigResponse").pyclass

UpdateIpRouteTableConfigRequestMsg = GED("urn:vim25", "UpdateIpRouteTableConfig").pyclass

UpdateIpRouteTableConfigResponseMsg = GED("urn:vim25", "UpdateIpRouteTableConfigResponse").pyclass

AddVirtualSwitchRequestMsg = GED("urn:vim25", "AddVirtualSwitch").pyclass

AddVirtualSwitchResponseMsg = GED("urn:vim25", "AddVirtualSwitchResponse").pyclass

RemoveVirtualSwitchRequestMsg = GED("urn:vim25", "RemoveVirtualSwitch").pyclass

RemoveVirtualSwitchResponseMsg = GED("urn:vim25", "RemoveVirtualSwitchResponse").pyclass

UpdateVirtualSwitchRequestMsg = GED("urn:vim25", "UpdateVirtualSwitch").pyclass

UpdateVirtualSwitchResponseMsg = GED("urn:vim25", "UpdateVirtualSwitchResponse").pyclass

AddPortGroupRequestMsg = GED("urn:vim25", "AddPortGroup").pyclass

AddPortGroupResponseMsg = GED("urn:vim25", "AddPortGroupResponse").pyclass

RemovePortGroupRequestMsg = GED("urn:vim25", "RemovePortGroup").pyclass

RemovePortGroupResponseMsg = GED("urn:vim25", "RemovePortGroupResponse").pyclass

UpdatePortGroupRequestMsg = GED("urn:vim25", "UpdatePortGroup").pyclass

UpdatePortGroupResponseMsg = GED("urn:vim25", "UpdatePortGroupResponse").pyclass

UpdatePhysicalNicLinkSpeedRequestMsg = GED("urn:vim25", "UpdatePhysicalNicLinkSpeed").pyclass

UpdatePhysicalNicLinkSpeedResponseMsg = GED("urn:vim25", "UpdatePhysicalNicLinkSpeedResponse").pyclass

QueryNetworkHintRequestMsg = GED("urn:vim25", "QueryNetworkHint").pyclass

QueryNetworkHintResponseMsg = GED("urn:vim25", "QueryNetworkHintResponse").pyclass

AddVirtualNicRequestMsg = GED("urn:vim25", "AddVirtualNic").pyclass

AddVirtualNicResponseMsg = GED("urn:vim25", "AddVirtualNicResponse").pyclass

RemoveVirtualNicRequestMsg = GED("urn:vim25", "RemoveVirtualNic").pyclass

RemoveVirtualNicResponseMsg = GED("urn:vim25", "RemoveVirtualNicResponse").pyclass

UpdateVirtualNicRequestMsg = GED("urn:vim25", "UpdateVirtualNic").pyclass

UpdateVirtualNicResponseMsg = GED("urn:vim25", "UpdateVirtualNicResponse").pyclass

AddServiceConsoleVirtualNicRequestMsg = GED("urn:vim25", "AddServiceConsoleVirtualNic").pyclass

AddServiceConsoleVirtualNicResponseMsg = GED("urn:vim25", "AddServiceConsoleVirtualNicResponse").pyclass

RemoveServiceConsoleVirtualNicRequestMsg = GED("urn:vim25", "RemoveServiceConsoleVirtualNic").pyclass

RemoveServiceConsoleVirtualNicResponseMsg = GED("urn:vim25", "RemoveServiceConsoleVirtualNicResponse").pyclass

UpdateServiceConsoleVirtualNicRequestMsg = GED("urn:vim25", "UpdateServiceConsoleVirtualNic").pyclass

UpdateServiceConsoleVirtualNicResponseMsg = GED("urn:vim25", "UpdateServiceConsoleVirtualNicResponse").pyclass

RestartServiceConsoleVirtualNicRequestMsg = GED("urn:vim25", "RestartServiceConsoleVirtualNic").pyclass

RestartServiceConsoleVirtualNicResponseMsg = GED("urn:vim25", "RestartServiceConsoleVirtualNicResponse").pyclass

RefreshNetworkSystemRequestMsg = GED("urn:vim25", "RefreshNetworkSystem").pyclass

RefreshNetworkSystemResponseMsg = GED("urn:vim25", "RefreshNetworkSystemResponse").pyclass

CheckHostPatch_TaskRequestMsg = GED("urn:vim25", "CheckHostPatch_Task").pyclass

CheckHostPatch_TaskResponseMsg = GED("urn:vim25", "CheckHostPatch_TaskResponse").pyclass

ScanHostPatch_TaskRequestMsg = GED("urn:vim25", "ScanHostPatch_Task").pyclass

ScanHostPatch_TaskResponseMsg = GED("urn:vim25", "ScanHostPatch_TaskResponse").pyclass

ScanHostPatchV2_TaskRequestMsg = GED("urn:vim25", "ScanHostPatchV2_Task").pyclass

ScanHostPatchV2_TaskResponseMsg = GED("urn:vim25", "ScanHostPatchV2_TaskResponse").pyclass

StageHostPatch_TaskRequestMsg = GED("urn:vim25", "StageHostPatch_Task").pyclass

StageHostPatch_TaskResponseMsg = GED("urn:vim25", "StageHostPatch_TaskResponse").pyclass

InstallHostPatch_TaskRequestMsg = GED("urn:vim25", "InstallHostPatch_Task").pyclass

InstallHostPatch_TaskResponseMsg = GED("urn:vim25", "InstallHostPatch_TaskResponse").pyclass

InstallHostPatchV2_TaskRequestMsg = GED("urn:vim25", "InstallHostPatchV2_Task").pyclass

InstallHostPatchV2_TaskResponseMsg = GED("urn:vim25", "InstallHostPatchV2_TaskResponse").pyclass

UninstallHostPatch_TaskRequestMsg = GED("urn:vim25", "UninstallHostPatch_Task").pyclass

UninstallHostPatch_TaskResponseMsg = GED("urn:vim25", "UninstallHostPatch_TaskResponse").pyclass

QueryHostPatch_TaskRequestMsg = GED("urn:vim25", "QueryHostPatch_Task").pyclass

QueryHostPatch_TaskResponseMsg = GED("urn:vim25", "QueryHostPatch_TaskResponse").pyclass

RefreshRequestMsg = GED("urn:vim25", "Refresh").pyclass

RefreshResponseMsg = GED("urn:vim25", "RefreshResponse").pyclass

UpdatePassthruConfigRequestMsg = GED("urn:vim25", "UpdatePassthruConfig").pyclass

UpdatePassthruConfigResponseMsg = GED("urn:vim25", "UpdatePassthruConfigResponse").pyclass

ConfigurePowerPolicyRequestMsg = GED("urn:vim25", "ConfigurePowerPolicy").pyclass

ConfigurePowerPolicyResponseMsg = GED("urn:vim25", "ConfigurePowerPolicyResponse").pyclass

UpdateServicePolicyRequestMsg = GED("urn:vim25", "UpdateServicePolicy").pyclass

UpdateServicePolicyResponseMsg = GED("urn:vim25", "UpdateServicePolicyResponse").pyclass

StartServiceRequestMsg = GED("urn:vim25", "StartService").pyclass

StartServiceResponseMsg = GED("urn:vim25", "StartServiceResponse").pyclass

StopServiceRequestMsg = GED("urn:vim25", "StopService").pyclass

StopServiceResponseMsg = GED("urn:vim25", "StopServiceResponse").pyclass

RestartServiceRequestMsg = GED("urn:vim25", "RestartService").pyclass

RestartServiceResponseMsg = GED("urn:vim25", "RestartServiceResponse").pyclass

UninstallServiceRequestMsg = GED("urn:vim25", "UninstallService").pyclass

UninstallServiceResponseMsg = GED("urn:vim25", "UninstallServiceResponse").pyclass

RefreshServicesRequestMsg = GED("urn:vim25", "RefreshServices").pyclass

RefreshServicesResponseMsg = GED("urn:vim25", "RefreshServicesResponse").pyclass

ReconfigureSnmpAgentRequestMsg = GED("urn:vim25", "ReconfigureSnmpAgent").pyclass

ReconfigureSnmpAgentResponseMsg = GED("urn:vim25", "ReconfigureSnmpAgentResponse").pyclass

SendTestNotificationRequestMsg = GED("urn:vim25", "SendTestNotification").pyclass

SendTestNotificationResponseMsg = GED("urn:vim25", "SendTestNotificationResponse").pyclass

RetrieveDiskPartitionInfoRequestMsg = GED("urn:vim25", "RetrieveDiskPartitionInfo").pyclass

RetrieveDiskPartitionInfoResponseMsg = GED("urn:vim25", "RetrieveDiskPartitionInfoResponse").pyclass

ComputeDiskPartitionInfoRequestMsg = GED("urn:vim25", "ComputeDiskPartitionInfo").pyclass

ComputeDiskPartitionInfoResponseMsg = GED("urn:vim25", "ComputeDiskPartitionInfoResponse").pyclass

ComputeDiskPartitionInfoForResizeRequestMsg = GED("urn:vim25", "ComputeDiskPartitionInfoForResize").pyclass

ComputeDiskPartitionInfoForResizeResponseMsg = GED("urn:vim25", "ComputeDiskPartitionInfoForResizeResponse").pyclass

UpdateDiskPartitionsRequestMsg = GED("urn:vim25", "UpdateDiskPartitions").pyclass

UpdateDiskPartitionsResponseMsg = GED("urn:vim25", "UpdateDiskPartitionsResponse").pyclass

FormatVmfsRequestMsg = GED("urn:vim25", "FormatVmfs").pyclass

FormatVmfsResponseMsg = GED("urn:vim25", "FormatVmfsResponse").pyclass

MountVmfsVolumeRequestMsg = GED("urn:vim25", "MountVmfsVolume").pyclass

MountVmfsVolumeResponseMsg = GED("urn:vim25", "MountVmfsVolumeResponse").pyclass

UnmountVmfsVolumeRequestMsg = GED("urn:vim25", "UnmountVmfsVolume").pyclass

UnmountVmfsVolumeResponseMsg = GED("urn:vim25", "UnmountVmfsVolumeResponse").pyclass

DeleteVmfsVolumeStateRequestMsg = GED("urn:vim25", "DeleteVmfsVolumeState").pyclass

DeleteVmfsVolumeStateResponseMsg = GED("urn:vim25", "DeleteVmfsVolumeStateResponse").pyclass

RescanVmfsRequestMsg = GED("urn:vim25", "RescanVmfs").pyclass

RescanVmfsResponseMsg = GED("urn:vim25", "RescanVmfsResponse").pyclass

AttachVmfsExtentRequestMsg = GED("urn:vim25", "AttachVmfsExtent").pyclass

AttachVmfsExtentResponseMsg = GED("urn:vim25", "AttachVmfsExtentResponse").pyclass

ExpandVmfsExtentRequestMsg = GED("urn:vim25", "ExpandVmfsExtent").pyclass

ExpandVmfsExtentResponseMsg = GED("urn:vim25", "ExpandVmfsExtentResponse").pyclass

UpgradeVmfsRequestMsg = GED("urn:vim25", "UpgradeVmfs").pyclass

UpgradeVmfsResponseMsg = GED("urn:vim25", "UpgradeVmfsResponse").pyclass

UpgradeVmLayoutRequestMsg = GED("urn:vim25", "UpgradeVmLayout").pyclass

UpgradeVmLayoutResponseMsg = GED("urn:vim25", "UpgradeVmLayoutResponse").pyclass

QueryUnresolvedVmfsVolumeRequestMsg = GED("urn:vim25", "QueryUnresolvedVmfsVolume").pyclass

QueryUnresolvedVmfsVolumeResponseMsg = GED("urn:vim25", "QueryUnresolvedVmfsVolumeResponse").pyclass

ResolveMultipleUnresolvedVmfsVolumesRequestMsg = GED("urn:vim25", "ResolveMultipleUnresolvedVmfsVolumes").pyclass

ResolveMultipleUnresolvedVmfsVolumesResponseMsg = GED("urn:vim25", "ResolveMultipleUnresolvedVmfsVolumesResponse").pyclass

UnmountForceMountedVmfsVolumeRequestMsg = GED("urn:vim25", "UnmountForceMountedVmfsVolume").pyclass

UnmountForceMountedVmfsVolumeResponseMsg = GED("urn:vim25", "UnmountForceMountedVmfsVolumeResponse").pyclass

RescanHbaRequestMsg = GED("urn:vim25", "RescanHba").pyclass

RescanHbaResponseMsg = GED("urn:vim25", "RescanHbaResponse").pyclass

RescanAllHbaRequestMsg = GED("urn:vim25", "RescanAllHba").pyclass

RescanAllHbaResponseMsg = GED("urn:vim25", "RescanAllHbaResponse").pyclass

UpdateSoftwareInternetScsiEnabledRequestMsg = GED("urn:vim25", "UpdateSoftwareInternetScsiEnabled").pyclass

UpdateSoftwareInternetScsiEnabledResponseMsg = GED("urn:vim25", "UpdateSoftwareInternetScsiEnabledResponse").pyclass

UpdateInternetScsiDiscoveryPropertiesRequestMsg = GED("urn:vim25", "UpdateInternetScsiDiscoveryProperties").pyclass

UpdateInternetScsiDiscoveryPropertiesResponseMsg = GED("urn:vim25", "UpdateInternetScsiDiscoveryPropertiesResponse").pyclass

UpdateInternetScsiAuthenticationPropertiesRequestMsg = GED("urn:vim25", "UpdateInternetScsiAuthenticationProperties").pyclass

UpdateInternetScsiAuthenticationPropertiesResponseMsg = GED("urn:vim25", "UpdateInternetScsiAuthenticationPropertiesResponse").pyclass

UpdateInternetScsiDigestPropertiesRequestMsg = GED("urn:vim25", "UpdateInternetScsiDigestProperties").pyclass

UpdateInternetScsiDigestPropertiesResponseMsg = GED("urn:vim25", "UpdateInternetScsiDigestPropertiesResponse").pyclass

UpdateInternetScsiAdvancedOptionsRequestMsg = GED("urn:vim25", "UpdateInternetScsiAdvancedOptions").pyclass

UpdateInternetScsiAdvancedOptionsResponseMsg = GED("urn:vim25", "UpdateInternetScsiAdvancedOptionsResponse").pyclass

UpdateInternetScsiIPPropertiesRequestMsg = GED("urn:vim25", "UpdateInternetScsiIPProperties").pyclass

UpdateInternetScsiIPPropertiesResponseMsg = GED("urn:vim25", "UpdateInternetScsiIPPropertiesResponse").pyclass

UpdateInternetScsiNameRequestMsg = GED("urn:vim25", "UpdateInternetScsiName").pyclass

UpdateInternetScsiNameResponseMsg = GED("urn:vim25", "UpdateInternetScsiNameResponse").pyclass

UpdateInternetScsiAliasRequestMsg = GED("urn:vim25", "UpdateInternetScsiAlias").pyclass

UpdateInternetScsiAliasResponseMsg = GED("urn:vim25", "UpdateInternetScsiAliasResponse").pyclass

AddInternetScsiSendTargetsRequestMsg = GED("urn:vim25", "AddInternetScsiSendTargets").pyclass

AddInternetScsiSendTargetsResponseMsg = GED("urn:vim25", "AddInternetScsiSendTargetsResponse").pyclass

RemoveInternetScsiSendTargetsRequestMsg = GED("urn:vim25", "RemoveInternetScsiSendTargets").pyclass

RemoveInternetScsiSendTargetsResponseMsg = GED("urn:vim25", "RemoveInternetScsiSendTargetsResponse").pyclass

AddInternetScsiStaticTargetsRequestMsg = GED("urn:vim25", "AddInternetScsiStaticTargets").pyclass

AddInternetScsiStaticTargetsResponseMsg = GED("urn:vim25", "AddInternetScsiStaticTargetsResponse").pyclass

RemoveInternetScsiStaticTargetsRequestMsg = GED("urn:vim25", "RemoveInternetScsiStaticTargets").pyclass

RemoveInternetScsiStaticTargetsResponseMsg = GED("urn:vim25", "RemoveInternetScsiStaticTargetsResponse").pyclass

EnableMultipathPathRequestMsg = GED("urn:vim25", "EnableMultipathPath").pyclass

EnableMultipathPathResponseMsg = GED("urn:vim25", "EnableMultipathPathResponse").pyclass

DisableMultipathPathRequestMsg = GED("urn:vim25", "DisableMultipathPath").pyclass

DisableMultipathPathResponseMsg = GED("urn:vim25", "DisableMultipathPathResponse").pyclass

SetMultipathLunPolicyRequestMsg = GED("urn:vim25", "SetMultipathLunPolicy").pyclass

SetMultipathLunPolicyResponseMsg = GED("urn:vim25", "SetMultipathLunPolicyResponse").pyclass

QueryPathSelectionPolicyOptionsRequestMsg = GED("urn:vim25", "QueryPathSelectionPolicyOptions").pyclass

QueryPathSelectionPolicyOptionsResponseMsg = GED("urn:vim25", "QueryPathSelectionPolicyOptionsResponse").pyclass

QueryStorageArrayTypePolicyOptionsRequestMsg = GED("urn:vim25", "QueryStorageArrayTypePolicyOptions").pyclass

QueryStorageArrayTypePolicyOptionsResponseMsg = GED("urn:vim25", "QueryStorageArrayTypePolicyOptionsResponse").pyclass

UpdateScsiLunDisplayNameRequestMsg = GED("urn:vim25", "UpdateScsiLunDisplayName").pyclass

UpdateScsiLunDisplayNameResponseMsg = GED("urn:vim25", "UpdateScsiLunDisplayNameResponse").pyclass

DetachScsiLunRequestMsg = GED("urn:vim25", "DetachScsiLun").pyclass

DetachScsiLunResponseMsg = GED("urn:vim25", "DetachScsiLunResponse").pyclass

DeleteScsiLunStateRequestMsg = GED("urn:vim25", "DeleteScsiLunState").pyclass

DeleteScsiLunStateResponseMsg = GED("urn:vim25", "DeleteScsiLunStateResponse").pyclass

AttachScsiLunRequestMsg = GED("urn:vim25", "AttachScsiLun").pyclass

AttachScsiLunResponseMsg = GED("urn:vim25", "AttachScsiLunResponse").pyclass

RefreshStorageSystemRequestMsg = GED("urn:vim25", "RefreshStorageSystem").pyclass

RefreshStorageSystemResponseMsg = GED("urn:vim25", "RefreshStorageSystemResponse").pyclass

DiscoverFcoeHbasRequestMsg = GED("urn:vim25", "DiscoverFcoeHbas").pyclass

DiscoverFcoeHbasResponseMsg = GED("urn:vim25", "DiscoverFcoeHbasResponse").pyclass

MarkForRemovalRequestMsg = GED("urn:vim25", "MarkForRemoval").pyclass

MarkForRemovalResponseMsg = GED("urn:vim25", "MarkForRemovalResponse").pyclass

UpdateIpConfigRequestMsg = GED("urn:vim25", "UpdateIpConfig").pyclass

UpdateIpConfigResponseMsg = GED("urn:vim25", "UpdateIpConfigResponse").pyclass

SelectVnicRequestMsg = GED("urn:vim25", "SelectVnic").pyclass

SelectVnicResponseMsg = GED("urn:vim25", "SelectVnicResponse").pyclass

DeselectVnicRequestMsg = GED("urn:vim25", "DeselectVnic").pyclass

DeselectVnicResponseMsg = GED("urn:vim25", "DeselectVnicResponse").pyclass

QueryNetConfigRequestMsg = GED("urn:vim25", "QueryNetConfig").pyclass

QueryNetConfigResponseMsg = GED("urn:vim25", "QueryNetConfigResponse").pyclass

SelectVnicForNicTypeRequestMsg = GED("urn:vim25", "SelectVnicForNicType").pyclass

SelectVnicForNicTypeResponseMsg = GED("urn:vim25", "SelectVnicForNicTypeResponse").pyclass

DeselectVnicForNicTypeRequestMsg = GED("urn:vim25", "DeselectVnicForNicType").pyclass

DeselectVnicForNicTypeResponseMsg = GED("urn:vim25", "DeselectVnicForNicTypeResponse").pyclass

QueryOptionsRequestMsg = GED("urn:vim25", "QueryOptions").pyclass

QueryOptionsResponseMsg = GED("urn:vim25", "QueryOptionsResponse").pyclass

UpdateOptionsRequestMsg = GED("urn:vim25", "UpdateOptions").pyclass

UpdateOptionsResponseMsg = GED("urn:vim25", "UpdateOptionsResponse").pyclass

CheckCompliance_TaskRequestMsg = GED("urn:vim25", "CheckCompliance_Task").pyclass

CheckCompliance_TaskResponseMsg = GED("urn:vim25", "CheckCompliance_TaskResponse").pyclass

QueryComplianceStatusRequestMsg = GED("urn:vim25", "QueryComplianceStatus").pyclass

QueryComplianceStatusResponseMsg = GED("urn:vim25", "QueryComplianceStatusResponse").pyclass

ClearComplianceStatusRequestMsg = GED("urn:vim25", "ClearComplianceStatus").pyclass

ClearComplianceStatusResponseMsg = GED("urn:vim25", "ClearComplianceStatusResponse").pyclass

QueryExpressionMetadataRequestMsg = GED("urn:vim25", "QueryExpressionMetadata").pyclass

QueryExpressionMetadataResponseMsg = GED("urn:vim25", "QueryExpressionMetadataResponse").pyclass

RetrieveDescriptionRequestMsg = GED("urn:vim25", "RetrieveDescription").pyclass

RetrieveDescriptionResponseMsg = GED("urn:vim25", "RetrieveDescriptionResponse").pyclass

DestroyProfileRequestMsg = GED("urn:vim25", "DestroyProfile").pyclass

DestroyProfileResponseMsg = GED("urn:vim25", "DestroyProfileResponse").pyclass

AssociateProfileRequestMsg = GED("urn:vim25", "AssociateProfile").pyclass

AssociateProfileResponseMsg = GED("urn:vim25", "AssociateProfileResponse").pyclass

DissociateProfileRequestMsg = GED("urn:vim25", "DissociateProfile").pyclass

DissociateProfileResponseMsg = GED("urn:vim25", "DissociateProfileResponse").pyclass

CheckProfileCompliance_TaskRequestMsg = GED("urn:vim25", "CheckProfileCompliance_Task").pyclass

CheckProfileCompliance_TaskResponseMsg = GED("urn:vim25", "CheckProfileCompliance_TaskResponse").pyclass

ExportProfileRequestMsg = GED("urn:vim25", "ExportProfile").pyclass

ExportProfileResponseMsg = GED("urn:vim25", "ExportProfileResponse").pyclass

CreateProfileRequestMsg = GED("urn:vim25", "CreateProfile").pyclass

CreateProfileResponseMsg = GED("urn:vim25", "CreateProfileResponse").pyclass

QueryPolicyMetadataRequestMsg = GED("urn:vim25", "QueryPolicyMetadata").pyclass

QueryPolicyMetadataResponseMsg = GED("urn:vim25", "QueryPolicyMetadataResponse").pyclass

FindAssociatedProfileRequestMsg = GED("urn:vim25", "FindAssociatedProfile").pyclass

FindAssociatedProfileResponseMsg = GED("urn:vim25", "FindAssociatedProfileResponse").pyclass

UpdateClusterProfileRequestMsg = GED("urn:vim25", "UpdateClusterProfile").pyclass

UpdateClusterProfileResponseMsg = GED("urn:vim25", "UpdateClusterProfileResponse").pyclass

UpdateReferenceHostRequestMsg = GED("urn:vim25", "UpdateReferenceHost").pyclass

UpdateReferenceHostResponseMsg = GED("urn:vim25", "UpdateReferenceHostResponse").pyclass

UpdateHostProfileRequestMsg = GED("urn:vim25", "UpdateHostProfile").pyclass

UpdateHostProfileResponseMsg = GED("urn:vim25", "UpdateHostProfileResponse").pyclass

ExecuteHostProfileRequestMsg = GED("urn:vim25", "ExecuteHostProfile").pyclass

ExecuteHostProfileResponseMsg = GED("urn:vim25", "ExecuteHostProfileResponse").pyclass

ApplyHostConfig_TaskRequestMsg = GED("urn:vim25", "ApplyHostConfig_Task").pyclass

ApplyHostConfig_TaskResponseMsg = GED("urn:vim25", "ApplyHostConfig_TaskResponse").pyclass

GenerateConfigTaskListRequestMsg = GED("urn:vim25", "GenerateConfigTaskList").pyclass

GenerateConfigTaskListResponseMsg = GED("urn:vim25", "GenerateConfigTaskListResponse").pyclass

QueryHostProfileMetadataRequestMsg = GED("urn:vim25", "QueryHostProfileMetadata").pyclass

QueryHostProfileMetadataResponseMsg = GED("urn:vim25", "QueryHostProfileMetadataResponse").pyclass

QueryProfileStructureRequestMsg = GED("urn:vim25", "QueryProfileStructure").pyclass

QueryProfileStructureResponseMsg = GED("urn:vim25", "QueryProfileStructureResponse").pyclass

CreateDefaultProfileRequestMsg = GED("urn:vim25", "CreateDefaultProfile").pyclass

CreateDefaultProfileResponseMsg = GED("urn:vim25", "CreateDefaultProfileResponse").pyclass

UpdateAnswerFile_TaskRequestMsg = GED("urn:vim25", "UpdateAnswerFile_Task").pyclass

UpdateAnswerFile_TaskResponseMsg = GED("urn:vim25", "UpdateAnswerFile_TaskResponse").pyclass

RetrieveAnswerFileRequestMsg = GED("urn:vim25", "RetrieveAnswerFile").pyclass

RetrieveAnswerFileResponseMsg = GED("urn:vim25", "RetrieveAnswerFileResponse").pyclass

RetrieveAnswerFileForProfileRequestMsg = GED("urn:vim25", "RetrieveAnswerFileForProfile").pyclass

RetrieveAnswerFileForProfileResponseMsg = GED("urn:vim25", "RetrieveAnswerFileForProfileResponse").pyclass

ExportAnswerFile_TaskRequestMsg = GED("urn:vim25", "ExportAnswerFile_Task").pyclass

ExportAnswerFile_TaskResponseMsg = GED("urn:vim25", "ExportAnswerFile_TaskResponse").pyclass

CheckAnswerFileStatus_TaskRequestMsg = GED("urn:vim25", "CheckAnswerFileStatus_Task").pyclass

CheckAnswerFileStatus_TaskResponseMsg = GED("urn:vim25", "CheckAnswerFileStatus_TaskResponse").pyclass

QueryAnswerFileStatusRequestMsg = GED("urn:vim25", "QueryAnswerFileStatus").pyclass

QueryAnswerFileStatusResponseMsg = GED("urn:vim25", "QueryAnswerFileStatusResponse").pyclass

RemoveScheduledTaskRequestMsg = GED("urn:vim25", "RemoveScheduledTask").pyclass

RemoveScheduledTaskResponseMsg = GED("urn:vim25", "RemoveScheduledTaskResponse").pyclass

ReconfigureScheduledTaskRequestMsg = GED("urn:vim25", "ReconfigureScheduledTask").pyclass

ReconfigureScheduledTaskResponseMsg = GED("urn:vim25", "ReconfigureScheduledTaskResponse").pyclass

RunScheduledTaskRequestMsg = GED("urn:vim25", "RunScheduledTask").pyclass

RunScheduledTaskResponseMsg = GED("urn:vim25", "RunScheduledTaskResponse").pyclass

CreateScheduledTaskRequestMsg = GED("urn:vim25", "CreateScheduledTask").pyclass

CreateScheduledTaskResponseMsg = GED("urn:vim25", "CreateScheduledTaskResponse").pyclass

RetrieveEntityScheduledTaskRequestMsg = GED("urn:vim25", "RetrieveEntityScheduledTask").pyclass

RetrieveEntityScheduledTaskResponseMsg = GED("urn:vim25", "RetrieveEntityScheduledTaskResponse").pyclass

CreateObjectScheduledTaskRequestMsg = GED("urn:vim25", "CreateObjectScheduledTask").pyclass

CreateObjectScheduledTaskResponseMsg = GED("urn:vim25", "CreateObjectScheduledTaskResponse").pyclass

RetrieveObjectScheduledTaskRequestMsg = GED("urn:vim25", "RetrieveObjectScheduledTask").pyclass

RetrieveObjectScheduledTaskResponseMsg = GED("urn:vim25", "RetrieveObjectScheduledTaskResponse").pyclass

OpenInventoryViewFolderRequestMsg = GED("urn:vim25", "OpenInventoryViewFolder").pyclass

OpenInventoryViewFolderResponseMsg = GED("urn:vim25", "OpenInventoryViewFolderResponse").pyclass

CloseInventoryViewFolderRequestMsg = GED("urn:vim25", "CloseInventoryViewFolder").pyclass

CloseInventoryViewFolderResponseMsg = GED("urn:vim25", "CloseInventoryViewFolderResponse").pyclass

ModifyListViewRequestMsg = GED("urn:vim25", "ModifyListView").pyclass

ModifyListViewResponseMsg = GED("urn:vim25", "ModifyListViewResponse").pyclass

ResetListViewRequestMsg = GED("urn:vim25", "ResetListView").pyclass

ResetListViewResponseMsg = GED("urn:vim25", "ResetListViewResponse").pyclass

ResetListViewFromViewRequestMsg = GED("urn:vim25", "ResetListViewFromView").pyclass

ResetListViewFromViewResponseMsg = GED("urn:vim25", "ResetListViewFromViewResponse").pyclass

DestroyViewRequestMsg = GED("urn:vim25", "DestroyView").pyclass

DestroyViewResponseMsg = GED("urn:vim25", "DestroyViewResponse").pyclass

CreateInventoryViewRequestMsg = GED("urn:vim25", "CreateInventoryView").pyclass

CreateInventoryViewResponseMsg = GED("urn:vim25", "CreateInventoryViewResponse").pyclass

CreateContainerViewRequestMsg = GED("urn:vim25", "CreateContainerView").pyclass

CreateContainerViewResponseMsg = GED("urn:vim25", "CreateContainerViewResponse").pyclass

CreateListViewRequestMsg = GED("urn:vim25", "CreateListView").pyclass

CreateListViewResponseMsg = GED("urn:vim25", "CreateListViewResponse").pyclass

CreateListViewFromViewRequestMsg = GED("urn:vim25", "CreateListViewFromView").pyclass

CreateListViewFromViewResponseMsg = GED("urn:vim25", "CreateListViewFromViewResponse").pyclass

RevertToSnapshot_TaskRequestMsg = GED("urn:vim25", "RevertToSnapshot_Task").pyclass

RevertToSnapshot_TaskResponseMsg = GED("urn:vim25", "RevertToSnapshot_TaskResponse").pyclass

RemoveSnapshot_TaskRequestMsg = GED("urn:vim25", "RemoveSnapshot_Task").pyclass

RemoveSnapshot_TaskResponseMsg = GED("urn:vim25", "RemoveSnapshot_TaskResponse").pyclass

RenameSnapshotRequestMsg = GED("urn:vim25", "RenameSnapshot").pyclass

RenameSnapshotResponseMsg = GED("urn:vim25", "RenameSnapshotResponse").pyclass

CheckCompatibility_TaskRequestMsg = GED("urn:vim25", "CheckCompatibility_Task").pyclass

CheckCompatibility_TaskResponseMsg = GED("urn:vim25", "CheckCompatibility_TaskResponse").pyclass

QueryVMotionCompatibilityEx_TaskRequestMsg = GED("urn:vim25", "QueryVMotionCompatibilityEx_Task").pyclass

QueryVMotionCompatibilityEx_TaskResponseMsg = GED("urn:vim25", "QueryVMotionCompatibilityEx_TaskResponse").pyclass

CheckMigrate_TaskRequestMsg = GED("urn:vim25", "CheckMigrate_Task").pyclass

CheckMigrate_TaskResponseMsg = GED("urn:vim25", "CheckMigrate_TaskResponse").pyclass

CheckRelocate_TaskRequestMsg = GED("urn:vim25", "CheckRelocate_Task").pyclass

CheckRelocate_TaskResponseMsg = GED("urn:vim25", "CheckRelocate_TaskResponse").pyclass

ValidateCredentialsInGuestRequestMsg = GED("urn:vim25", "ValidateCredentialsInGuest").pyclass

ValidateCredentialsInGuestResponseMsg = GED("urn:vim25", "ValidateCredentialsInGuestResponse").pyclass

AcquireCredentialsInGuestRequestMsg = GED("urn:vim25", "AcquireCredentialsInGuest").pyclass

AcquireCredentialsInGuestResponseMsg = GED("urn:vim25", "AcquireCredentialsInGuestResponse").pyclass

ReleaseCredentialsInGuestRequestMsg = GED("urn:vim25", "ReleaseCredentialsInGuest").pyclass

ReleaseCredentialsInGuestResponseMsg = GED("urn:vim25", "ReleaseCredentialsInGuestResponse").pyclass

MakeDirectoryInGuestRequestMsg = GED("urn:vim25", "MakeDirectoryInGuest").pyclass

MakeDirectoryInGuestResponseMsg = GED("urn:vim25", "MakeDirectoryInGuestResponse").pyclass

DeleteFileInGuestRequestMsg = GED("urn:vim25", "DeleteFileInGuest").pyclass

DeleteFileInGuestResponseMsg = GED("urn:vim25", "DeleteFileInGuestResponse").pyclass

DeleteDirectoryInGuestRequestMsg = GED("urn:vim25", "DeleteDirectoryInGuest").pyclass

DeleteDirectoryInGuestResponseMsg = GED("urn:vim25", "DeleteDirectoryInGuestResponse").pyclass

MoveDirectoryInGuestRequestMsg = GED("urn:vim25", "MoveDirectoryInGuest").pyclass

MoveDirectoryInGuestResponseMsg = GED("urn:vim25", "MoveDirectoryInGuestResponse").pyclass

MoveFileInGuestRequestMsg = GED("urn:vim25", "MoveFileInGuest").pyclass

MoveFileInGuestResponseMsg = GED("urn:vim25", "MoveFileInGuestResponse").pyclass

CreateTemporaryFileInGuestRequestMsg = GED("urn:vim25", "CreateTemporaryFileInGuest").pyclass

CreateTemporaryFileInGuestResponseMsg = GED("urn:vim25", "CreateTemporaryFileInGuestResponse").pyclass

CreateTemporaryDirectoryInGuestRequestMsg = GED("urn:vim25", "CreateTemporaryDirectoryInGuest").pyclass

CreateTemporaryDirectoryInGuestResponseMsg = GED("urn:vim25", "CreateTemporaryDirectoryInGuestResponse").pyclass

ListFilesInGuestRequestMsg = GED("urn:vim25", "ListFilesInGuest").pyclass

ListFilesInGuestResponseMsg = GED("urn:vim25", "ListFilesInGuestResponse").pyclass

ChangeFileAttributesInGuestRequestMsg = GED("urn:vim25", "ChangeFileAttributesInGuest").pyclass

ChangeFileAttributesInGuestResponseMsg = GED("urn:vim25", "ChangeFileAttributesInGuestResponse").pyclass

InitiateFileTransferFromGuestRequestMsg = GED("urn:vim25", "InitiateFileTransferFromGuest").pyclass

InitiateFileTransferFromGuestResponseMsg = GED("urn:vim25", "InitiateFileTransferFromGuestResponse").pyclass

InitiateFileTransferToGuestRequestMsg = GED("urn:vim25", "InitiateFileTransferToGuest").pyclass

InitiateFileTransferToGuestResponseMsg = GED("urn:vim25", "InitiateFileTransferToGuestResponse").pyclass

StartProgramInGuestRequestMsg = GED("urn:vim25", "StartProgramInGuest").pyclass

StartProgramInGuestResponseMsg = GED("urn:vim25", "StartProgramInGuestResponse").pyclass

ListProcessesInGuestRequestMsg = GED("urn:vim25", "ListProcessesInGuest").pyclass

ListProcessesInGuestResponseMsg = GED("urn:vim25", "ListProcessesInGuestResponse").pyclass

TerminateProcessInGuestRequestMsg = GED("urn:vim25", "TerminateProcessInGuest").pyclass

TerminateProcessInGuestResponseMsg = GED("urn:vim25", "TerminateProcessInGuestResponse").pyclass

ReadEnvironmentVariableInGuestRequestMsg = GED("urn:vim25", "ReadEnvironmentVariableInGuest").pyclass

ReadEnvironmentVariableInGuestResponseMsg = GED("urn:vim25", "ReadEnvironmentVariableInGuestResponse").pyclass
